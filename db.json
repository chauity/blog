{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"acad91ace80b80295b11a9b7ad4c29a2dcfdd8fb","modified":1667788988721},{"_id":"source/_posts/指针详解1.md","hash":"104e251480548d0f2ad62e53604879f873afcaf5","modified":1667565049857},{"_id":"source/link/index.md","hash":"baa1ad04649a7713c1c6ea7480309716f6b25d1d","modified":1667478280567},{"_id":"source/categories/index.md","hash":"8804436b3237117c5923b79b8702ee198841bb75","modified":1667478268868},{"_id":"source/tags/index.md","hash":"40f1a1d84bd2c43a10a4c7d5b957f60008bacd29","modified":1667478242247},{"_id":"source/link/_data/link.yml","hash":"b671a3049f244c559e614a303722ad39f0e54a7c","modified":1667479875893},{"_id":"source/_posts/建站历程.md","hash":"bc509e35b28e7fccb73332fb97c2901c2f990637","modified":1667805766717},{"_id":"themes/butterfly/LICENSE","hash":"c8bc7df08db9dd3b39c2c2259a163a36cf2f6808","modified":1667445924556},{"_id":"themes/butterfly/README.md","hash":"15e7f6386b4fd3fa4a6c179ddf641e1ae57eafa2","modified":1667445924556},{"_id":"themes/butterfly/README_CN.md","hash":"d0f7a24732855ae340f94e8286085d5387850cde","modified":1667445924557},{"_id":"themes/butterfly/_config.yml","hash":"88516616c646da383d8ac070856f588dc7754e5e","modified":1667808839431},{"_id":"themes/butterfly/package.json","hash":"c81d3e680b7219b271496afbd60718bda8915368","modified":1667445924608},{"_id":"themes/butterfly/languages/en.yml","hash":"a96ab1bbe74e99ca2e4d67da9d83f442eb9b73af","modified":1667445924559},{"_id":"themes/butterfly/languages/default.yml","hash":"335731ef259a3cec2499a2d5b050025ff4bdc608","modified":1667445924558},{"_id":"themes/butterfly/plugins.yml","hash":"49092888e97d1424624258369928586c5b4067ef","modified":1667445924608},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"4adf079fb0170e3a8de6ddbb0392d6d1120030c4","modified":1667445924559},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"dcb10d62249bb149af8ad78db3ee6e342c6d6be7","modified":1667445924560},{"_id":"themes/butterfly/layout/category.pug","hash":"bf979aec88d78b644fc5d31518f8679ad7625792","modified":1667445924561},{"_id":"themes/butterfly/layout/archive.pug","hash":"115fa5ee8864e5c97549eff91a17c66101d724ab","modified":1667445924560},{"_id":"themes/butterfly/layout/index.pug","hash":"648dcbdb3d145a710de81c909e000e8664d2ac9c","modified":1667445924607},{"_id":"themes/butterfly/layout/post.pug","hash":"fdbb508b5e6dec30fb8753c5a7fdd494410c4fc0","modified":1667445924607},{"_id":"themes/butterfly/layout/tag.pug","hash":"4bb5efc6dabdf1626685bf6771aaa1467155ae86","modified":1667445924608},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"d9ff4bad9c9664e12729c7a531169a05698a3fd1","modified":1667445924553},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"92683cb785a29e5a73701b33dba73d3afac268c3","modified":1667445924553},{"_id":"themes/butterfly/layout/page.pug","hash":"bf2d6c6d2d156777b55292e51be02b0b3acf0af8","modified":1667445924607},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"6e0f9470b18bd37d4891282ac73d61676b040e8c","modified":1667445924554},{"_id":"themes/butterfly/.github/workflows/publish.yml","hash":"e320b40c051bae1549156cd5ea4a51383cf78598","modified":1667445924555},{"_id":"themes/butterfly/.github/workflows/stale.yml","hash":"4040c76547e270aaf184e9b219a44ca41bbb1b9f","modified":1667445924555},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"553f6e5e242506775ea02ebe4ebf5c99bcd9d439","modified":1667445924561},{"_id":"themes/butterfly/layout/includes/404.pug","hash":"aace9ddff469de4226e47a52ede1c81e66d66d5c","modified":1667445924561},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"d2e0e71a98f6eb28b3ee91df5286cbbc70b45394","modified":1667445924562},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"8715948b93e7508b84d913be1969b28c6b067b9b","modified":1667445924562},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"ac5f3b2aee29fe6ee72d534c3d78c9fa4d7de404","modified":1667445924570},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"bb1847f45e713cc88b1c0a97035ec01f0209c995","modified":1667445924573},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"205562ec188bfba5686c51af77486550d0927df5","modified":1667445924575},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"4f41fc46410e1e3018ff87e1d1a5c28be7258119","modified":1667445924575},{"_id":"themes/butterfly/scripts/events/cdn.js","hash":"8e6f0677c190d44c64222054e2e7c065fc6c4802","modified":1667445924609},{"_id":"themes/butterfly/scripts/events/404.js","hash":"f1d1c378356b776e9b2a8411e6dca88dc8c3245c","modified":1667445924609},{"_id":"themes/butterfly/scripts/events/init.js","hash":"b3e05e3440b078f57391c113d6b0c8ecff112720","modified":1667445924610},{"_id":"themes/butterfly/scripts/events/comment.js","hash":"176332aa4d01728d0bd084e9b02c60167dc307dd","modified":1667445924610},{"_id":"themes/butterfly/scripts/events/stylus.js","hash":"218add7e9b39b6fb6e69921abb9e44891a6cc3ce","modified":1667445924610},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"b92cc4648cfe5fb28c58943727823d1178b73a4a","modified":1667445924611},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"5fd6c9659262dc8f61d87866d0417fd534292c88","modified":1667445924611},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"6c3b7d0874fa499800a4fd49894c481b05ec750c","modified":1667445924612},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"4f712b4ea383b59a3122683db1d54c04a79ccc5d","modified":1667445924612},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"376e1884ea764404c38b1e73b16de0358ece519e","modified":1667445924612},{"_id":"themes/butterfly/scripts/helpers/findArchiveLength.js","hash":"db4f5971c27f49a4cb47d34729f4ddf9919d392b","modified":1667445924613},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"c445140fa16f19bf5fb617fa735504e7799d4d42","modified":1667445924615},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"c07efb04120914363b8de2c276ac5783b82db776","modified":1667445924615},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"83bfb16ab8d440be04e1b1f889f6affa7ad65a67","modified":1667445924616},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"44cca49ddc76921bb455465ef912cab46c993cef","modified":1667445924616},{"_id":"themes/butterfly/scripts/tag/flink.js","hash":"3ba7677969ff01fab06fc6713455ddc6861f0024","modified":1667445924617},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"6d4cd2393945a9316339351cab588265f5c18d73","modified":1667445924617},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"e01a3967e5884881bab858b11635457df412de80","modified":1667445924617},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"7641adb0d520c5ff29dd36fc1fb8617c52ecc9fb","modified":1667445924618},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"551f1b8edc973bd8afc5cce2eae546f002fa84c3","modified":1667445924618},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"fd683ccc090db3122d77c7ee73e8d35dc8735ee3","modified":1667445924618},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"56a5d41487d74654b75305c5325167a116495900","modified":1667445924618},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"08ea00791bd4738952234cb5d8360e119df6f875","modified":1667445924619},{"_id":"themes/butterfly/scripts/tag/timeline.js","hash":"4c7056d3cd56f10bd209d2ba4d3cc2027aad1440","modified":1667445924619},{"_id":"themes/butterfly/source/css/index.styl","hash":"c7924868adcb046b46498626a9223c7a7b3f2e30","modified":1667445924643},{"_id":"themes/butterfly/source/css/var.styl","hash":"63f12a6a847738b1479ce782c8caac5e0cf16a6b","modified":1667445924643},{"_id":"themes/butterfly/source/js/main.js","hash":"8650aaa2b77b1a25f48dfe2ea952050275b4038a","modified":1667445924645},{"_id":"themes/butterfly/source/js/utils.js","hash":"fdb9e5b38f076953a2431b8f682388b030694b55","modified":1667445924648},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"1ae9561ea27fd9f929a9a67f1b1025303ca4370f","modified":1667445924648},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1667445924644},{"_id":"themes/butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1667445924644},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1667445924645},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"bee7e29995ebe28ff8518646ef162201b5efa9d9","modified":1667445924562},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"b69f54423e1d7db78b0e4a5ff726244401a6546b","modified":1667445924564},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"c1e45d4d0bd905ddcd2282de4fe89be92e67847d","modified":1667445924563},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"bd5dd5452e28a4fe94c3241a758ec6f4fdb7a149","modified":1667445924565},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"f29123e603cbbcc6ce277d4e8f600ba67498077c","modified":1667445924566},{"_id":"themes/butterfly/layout/includes/head/noscript.pug","hash":"72efaa09ff60843567458bd54152e06f0cb2757e","modified":1667445924566},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"fc3e67e5ae4774d9e89964ba96beed28f34ee8f0","modified":1667445924566},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"6dc2c9b85df9ab4f5b554305339fd80a90a6cf43","modified":1667445924567},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"5168caadc4cf541f5d6676a9c5e8ae47a948f9ad","modified":1667445924567},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"6f489b24f06578440f18b629db56c810f00f8c3f","modified":1667445924568},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"ca8bcd90ad9467819330bfe7c02b76322754bccf","modified":1667445924568},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"50b4b9c7f6a4771910be4198639cfcfc6d7b8925","modified":1667445924569},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"a9e56b1c41bf327859b0a7bcb8e72b458bd851b2","modified":1667445924569},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"631ec7000fd4d6cfa2de118ee02ad8a42ffb34f5","modified":1667445924570},{"_id":"themes/butterfly/layout/includes/loading/fullpage-loading.pug","hash":"767ca9b4dad126ba5fbd2f3ea5ca8d07c0d2b32c","modified":1667445924571},{"_id":"themes/butterfly/layout/includes/loading/index.pug","hash":"00ae419f527d8225a2dc03d4f977cec737248423","modified":1667445924571},{"_id":"themes/butterfly/layout/includes/loading/pace.pug","hash":"39847b8a1f0fad7889954a4ac936b7681949f16c","modified":1667445924571},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"971038debf539333b1687b4a1d87cf4fc965a846","modified":1667445924572},{"_id":"themes/butterfly/layout/includes/mixins/post-ui.pug","hash":"8b8e04d3d9462b3790ba17e5a865dab5a4740a73","modified":1667445924572},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"e9459f122af7b733398578f9f0f8ab3c5e12a217","modified":1667445924573},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1667445924572},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"8f43fdeaf8cff4a35bab74b48c963786ca015620","modified":1667445924573},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"ea89ca7bb18dc3059079709ee5b6e971a8b87c50","modified":1667445924573},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"cc1f7ae8a7ce5445277215821092e712ec8cc296","modified":1667445924574},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"594626a18b7efbf771232855dfbce143fb244bc6","modified":1667445924574},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"e939344fd389aeb11864ee697d5fd9b036d8325f","modified":1667445924575},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"4e37535c63149708ecbedb262336014524ad8723","modified":1667445924590},{"_id":"themes/butterfly/layout/includes/third-party/pangu.pug","hash":"f0898509da70388b5c532f19e762756d74080200","modified":1667445924596},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"558456d85100606c14e0a59801b0ee2ee67aadd9","modified":1667445924596},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"08979afbfecb4476a5ae8e360947b92624d285b8","modified":1667445924597},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"d561d36229692e2c8a9ee45a7c24c0c2b3599170","modified":1667445924601},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"a8312b527493dabbadbb1280760168d3bc909a3b","modified":1667445924602},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"21e019bdc3b1e796bb00976bb29af2d51f873624","modified":1667445924602},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"73d33b6930e7944187a4b3403daf25d27077a2dd","modified":1667445924602},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"08641633d38903351a7424baf9893d9038ba057d","modified":1667445924603},{"_id":"themes/butterfly/layout/includes/widget/card_bottom_self.pug","hash":"1dba77d250eeebfb6e293d504352c7e9ea31980b","modified":1667445924603},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"66e383b4ef374951eb87dd1bf4cdb7a667193fb5","modified":1667445924603},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"c02b1779bd0ebca6749f195be096b6ca574bfa29","modified":1667445924604},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"59d979702fa21d960443824198614d63aaf69662","modified":1667445924604},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"471b20e71a19db1f5115727082e5188200c49383","modified":1667445924605},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"9755cac8424dc578e9ec07dbcaa429fddbedd392","modified":1667445924605},{"_id":"themes/butterfly/layout/includes/widget/card_top_self.pug","hash":"7b5ae404a1205546b7de4be42291315cf918f2b3","modified":1667445924605},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"5e0e9e9b2cd3c256d52423e2278e790aa387a53a","modified":1667445924607},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"12185713f9ca08984fc74e3b69d8cd6828d23da8","modified":1667445924605},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"f562648de515abc873609bfe9b9f799c8cf42b72","modified":1667445924621},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"b9d7d23dc8810542b8c8ffcbfbd3694318debcc6","modified":1667445924621},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"a2aa5caf338ff5323b6ff0601ebcc09e710d8398","modified":1667445924622},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"3c178608406c31d768af355ef1d7326da37cc75f","modified":1667445924626},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"af6e3357b8f6df18d0775b8352551c0f8ce38e55","modified":1667445924627},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"792a04d36de32f230ca3256ad87a90fe8392f333","modified":1667445924628},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"0abe05309a186682772a94e5e759b63f8028e61a","modified":1667445924628},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"e931ef81754a7b9d999fa23d134c620e68e75491","modified":1667445924628},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"612d2f8a53141b353078f2a3405d8d44a79d9558","modified":1667445924629},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"f0b01bbf321c2c24fdccaee367dd9fd448031a72","modified":1667445924629},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"bd099f7d3adef4b7edd24c0a25a07415b156e587","modified":1667445924629},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"b0ba6f72848bc711bcf534c56b04ae14ab21b320","modified":1667445924630},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"6dcf19c0933c8828a439f801b0f4b256447dec07","modified":1667445924631},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"b5ba2c3339ad406ce611d12d3f8cc84f864fbc03","modified":1667445924632},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"1c1c585ba99cb4004956b5e98fc044260b456f99","modified":1667445924632},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"7e9b65dcae7ac54e0183bc841fea0f4bd4d78e5c","modified":1667445924632},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"956ed11cc5d65941b49192b9be47cecfaed57a91","modified":1667445924633},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"5dabc3a5330cc28f0666d1cd8db0d67f553fd854","modified":1667445924633},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"1fed25162d7204480e9bcf476b3246e1717107ca","modified":1667445924634},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"68bc8cbea25dbb3cdc170f09f9b43ce130547717","modified":1667445924635},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"d72218cb5a6bfe048ae1c92009bd815a08a53d3a","modified":1667445924634},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"a714776e3d585369f2285b6bb4e1564539c58d8b","modified":1667445924635},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"ecc2b2e28c179eb9406fc2c6f00e141078249cdd","modified":1667445924636},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"6d2a841c7656fb28b1e15afe1d7dda56c424b7d7","modified":1667445924636},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"9e35f91847773b915c74a78b8aa66c7bdb950ad0","modified":1667445924636},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"cced94e70b4b90130cfa215582be2adbf883efba","modified":1667445924637},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"d1398399eb7f1cc004fbcefa18f56188cc8fec8c","modified":1667445924637},{"_id":"themes/butterfly/source/css/_page/404.styl","hash":"a7223a8fcc4fa7b81e552c9a2554be7df9de312e","modified":1667445924634},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"45792c13c7c439d412b7dc597d74d24f3b598406","modified":1667445924637},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"62da1de0d5b8453fcecbfacddb16985265638ba5","modified":1667445924638},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"84c42716e833d2d1dd47195ea996803ffa0e58ec","modified":1667445924638},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"985b183db7b7bfd8f9bdb60494549fb7f850348b","modified":1667445924638},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"b7cf7753479fcf2fe07287ffdb0e568adbba4c18","modified":1667445924640},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"5a873d01fabebcf7ddf7a6b1c2e2e5e2714097f4","modified":1667445924640},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"2f83bd145b870d80d4b18b0ac603235229a5694e","modified":1667445924641},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"ec81ea316c82b83d6aee31e52f248d329559d5d3","modified":1667445924641},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"331c89ecfb79fab68466944a43e9e3d0ff49c646","modified":1667445924641},{"_id":"themes/butterfly/source/css/_tags/timeline.styl","hash":"07ea7134db7a66c87658116f089fb1a2a6906563","modified":1667445924642},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"8549829fb7d3c21cd9e119884962e8c463a4a267","modified":1667445924642},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"d0d60008ef4ff74298ff062878766f194a2e4a70","modified":1667445924646},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"f72e002d56903a49c36174e77e42f88b8af8bd44","modified":1667445924647},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"f4d21dcbc3b00eed9b1f604e132c4c6811a0a059","modified":1667445924576},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"645087801624a73cbee63269cfd399e9da39c663","modified":1667445924576},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"aff5c34b6061b281c66a986cf017e9021dc11ac6","modified":1667445924577},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"846cabae287ae31b3bbfac3da022475713dd5ecc","modified":1667445924577},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"38b85d216d9377ddbaa2e5867e2f03805227237c","modified":1667445924578},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"716dc463fe4ef5112e7018ed60804125fdfa5cad","modified":1667445924578},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"cd4fc9c5a61608a5dedf645c1295430a1623040f","modified":1667445924578},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"6e5ccc9ea4346c71ad4cbf1e9f1cb83bb45e6f27","modified":1667445924579},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"f3f6eaecbcf9352342e259f4a5a3ad7160f31fc9","modified":1667445924579},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"b741b5e942481d779a8a1fe94c45154a62a6b748","modified":1667445924580},{"_id":"themes/butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"e5af55cdb87d1ffd3d8702bc77097159acf95b54","modified":1667445924581},{"_id":"themes/butterfly/layout/includes/third-party/chat/gitter.pug","hash":"794ce3911f17d354b7196deb8c36d191afac63fb","modified":1667445924582},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"a5ddcf84ce8855c7801289270009e29c3a103150","modified":1667445924582},{"_id":"themes/butterfly/layout/includes/third-party/chat/messenger.pug","hash":"e703319ae5395273e81de11ba2366f21a104cf47","modified":1667445924583},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"cd7ab4a776be93eea96a6f6fd0a547977fbe1ea3","modified":1667445924583},{"_id":"themes/butterfly/layout/includes/third-party/comments/artalk.pug","hash":"55f7c144e4ef7a7f317bcdab8044fd8f89bdd5d9","modified":1667445924584},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"3b551ab7618b36795480015b5cf565288df5b957","modified":1667445924584},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"8c16214a610ff8087628f32d005a1b0aab3bb910","modified":1667445924585},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"fe599836225b835bd19fe1a6831fb4d41bcec071","modified":1667445924585},{"_id":"themes/butterfly/layout/includes/third-party/comments/giscus.pug","hash":"319463fc8ff993b798f2293b659b522ad7770cf0","modified":1667445924585},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"3df2f59c9552a1f2e6f0d50c4ae97e72c5392b59","modified":1667445924586},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"3abbaaa4ea575c45b3cebffd40bad1acc6ffce84","modified":1667445924587},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"589f8503f264d4fda971c8daf2028f45c4f2867b","modified":1667445924587},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"5b44b4e5f2445260811de81edd3eeeb97d8bb583","modified":1667445924586},{"_id":"themes/butterfly/layout/includes/third-party/comments/remark42.pug","hash":"f04263a3bd7efb7f1b250cfee112e82f49805492","modified":1667445924587},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"ccb5c3f2a821b87986998595743387d7c997c16e","modified":1667445924588},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"d48d59ebf8c0142fb3c4592a0d35874f85e6fd4c","modified":1667445924588},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"cba55cbbd0962bf84b8956195e686b0e158ed247","modified":1667445924588},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"e45152e4ebc3fb2462916be93f98d18f0574f2d3","modified":1667445924589},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"2afa4c21dd19890f47fb568cfb0d90efb676a253","modified":1667445924591},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"2a39dd634a80a735359206a2481f8468f34a0b5c","modified":1667445924592},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"f0d3eddd2bed68e5517274b3530bfe0fa5057d8e","modified":1667445924591},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"297d34d83e7bff8ec3b8bc19bb0f4d901c35fe5a","modified":1667445924592},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"77ac27a24b8347668c4df9d5c44c9461c69eaec9","modified":1667445924593},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"b2ede1f6b41026ebd233ac076a405889a6eec76b","modified":1667445924594},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"cd1ce86441dc508e4c3dbf8b829046455ba8a6b4","modified":1667445924593},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"f8b65460c399973090c1fb7ab81e3708c252e7cc","modified":1667445924594},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"bc207dcb771fc2c2c329f29d01708ff6b18443da","modified":1667445924594},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"91a72e94743befa21a7b1c557fbb3751efb87ab0","modified":1667445924595},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"33368c0b80e4c4e78f3c7ee9bec0fed70ad838ca","modified":1667445924595},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"63ef0b2a75cf26a94c5bcd885f3a1c144451b852","modified":1667445924595},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"af5d3d87b736598dafcf5871863596592cacdfe1","modified":1667445924598},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"3b5ef84744a1a8fec5a63554079008040d96f924","modified":1667445924599},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"ff3727c3ec698ec61a28c55cbc8c8508f0efb0a0","modified":1667445924598},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"1f02a26730e5f36cc2dfec7ff4d5c93a099ed5ba","modified":1667445924600},{"_id":"themes/butterfly/layout/includes/third-party/share/add-this.pug","hash":"8b4034e53ca5bf85097f681a6e76a53ce685c205","modified":1667445924600},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"4898a09d8e67fb358ffd74b3a1f0014f555dd856","modified":1667445924600},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"b45fc15c3ae7db3a0fbce0d6da74a72a95ca8a2b","modified":1667445924601},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"6e77f1ca0cfb0db6b028f5c0238780e66d344f3d","modified":1667445924623},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"fc702a4614d0562a381907b083f71ba63d301d86","modified":1667445924623},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"01ff9e77eb1bd454bec65a6ff5972c8e219bc708","modified":1667445924625},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"1309292f1c8c53d96cd7333507b106bcc24ca8fc","modified":1667445924624},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"0b8aea62d1550113e1fcc237fae1b03743190208","modified":1667445924625},{"_id":"public/atom.xml","hash":"d91b2c8123f2780438305b66083adcd7920326ac","modified":1667810561391},{"_id":"public/sitemap.xml","hash":"fe628f167f322acfde403ef74278ae19b4c9e370","modified":1667812515197},{"_id":"public/sitemap.txt","hash":"89278f0ce5154125686b386d6a83e98a37294155","modified":1667812515197},{"_id":"public/link/index.html","hash":"9e6451ccf58977f5bc81b28b1f2fddb06201a6c2","modified":1667812515197},{"_id":"public/categories/index.html","hash":"afff1f767e66288add70e1d14816f1cd66051adb","modified":1667812515197},{"_id":"public/tags/index.html","hash":"d4a9f4e6a693e7e0371cf98f6e8e9f540c5bf561","modified":1667812515197},{"_id":"public/2022/11/04/建站历程/index.html","hash":"35cee22928e7be02deed1c0b6572fbcd3377087f","modified":1667810561391},{"_id":"public/2022/11/03/指针详解1/index.html","hash":"0d08c8119f619807dc54f30e72d19f134b277876","modified":1667810561391},{"_id":"public/2022/11/03/hello-world/index.html","hash":"1f3c37120358f4e9bb2bb3647567222bbab03721","modified":1667810561391},{"_id":"public/archives/index.html","hash":"1055c3971cacd89e544fc41615a48c805e9b59cb","modified":1667812515197},{"_id":"public/archives/2022/index.html","hash":"b33d6fece0ed509708944dc2b3d0037f8bb06b5e","modified":1667812515197},{"_id":"public/archives/2022/11/index.html","hash":"308e9ebf941b1b5bc964c07597be5dccb9e77e5e","modified":1667812515197},{"_id":"public/index.html","hash":"c6a1ab9e9c6a481346c65a8749cf09e547b50370","modified":1667812515197},{"_id":"public/tags/关于指针的一些事儿/index.html","hash":"b55ab4b1184ad5803e5165b207d767cd6275b982","modified":1667812515197},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1667545898739},{"_id":"public/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1667545898739},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1667545898739},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1667545898739},{"_id":"public/js/utils.js","hash":"0b95daada72abb5d64a1e3236049a60120e47cca","modified":1667545898739},{"_id":"public/js/search/algolia.js","hash":"9feb248552667c53ce1b19bc7a295215f8c77008","modified":1667545898739},{"_id":"public/js/search/local-search.js","hash":"3071a4208fdf89ad7e0031536dd6ffa7bc951e4d","modified":1667545898739},{"_id":"public/css/index.css","hash":"4e7ba084af7d7c40fcec61d5378e9f8b6753ab11","modified":1667545898739},{"_id":"public/js/tw_cn.js","hash":"5c1391c9e96950833641f178b5f23c58422fb659","modified":1667545898739},{"_id":"public/js/main.js","hash":"189359400f6cd4d814ca9ebb5a27b96f7031bce3","modified":1667545898739},{"_id":"source/_posts/image/指针详解1/1667564080019.png","hash":"aed95a929bfbab9d569933278444f2d299dac38f","modified":1667564081327},{"_id":"source/_posts/image/指针详解1/1667564963187.png","hash":"ca826b6532223f561ba7476ce7d770696481cc3e","modified":1667564963627},{"_id":"source/_posts/VScode+PicGo +GitHub图床----辅助书写markdown文档.md","hash":"ba63515907cbcd8bc34799910db75dd0b22011a1","modified":1667805651655},{"_id":"public/2022/11/07/VScode+PicGo +GitHub图床----辅助书写markdown文档/index.html","hash":"fb5ccb0cc7f4f85287bd517f98256e92ae3096fd","modified":1667810561391},{"_id":"source/about/index.md","hash":"534e34462f6f686ffccacc9302d41d8a49dd8967","modified":1667812448423},{"_id":"public/about/index.html","hash":"9ec367a1f86ff69e2df3a56998ce608f315f6b59","modified":1667812515197},{"_id":"source/about/About.md","hash":"62d4ae598df64332a63700a2ae8479b496514a6b","modified":1667810638953},{"_id":"public/about/About.html","hash":"b6fc36f49dce285c3c24273d2248392c39a87d2b","modified":1667810659441}],"Category":[],"Data":[{"_id":"link","data":{"YAMLclass":{"class_name":"友情链接","link_list":{"1":{"name":"小康博客","link":"https://www.antmoe.com","avatar":"https://img.antmoe.com/avatar.png","descr":"每天进步一点点"},"2":{"name":"test","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"test"}}},"class2":{"class_name":"链接无效","link_list":{"1":{"name":"test","link":"https://blog.xxx.com","avatar":"https://img.antmoe.com/avatar.png","descr":"test"},"2":{"name":"test","link":"https://www.axxxx.cn/","avatar":"https://img.antmoe.com/avatar.png","descr":"test"}}}}}],"Page":[{"title":"link","date":"2022-11-03T12:24:40.000Z","_content":"","source":"link/index.md","raw":"---\ntitle: link\ndate: 2022-11-03 20:24:40\n---\n","updated":"2022-11-03T12:24:40.567Z","path":"link/index.html","comments":1,"layout":"page","_id":"cla25rvab0000o8vsb7ut29ja","content":"","site":{"data":{"link":{"YAMLclass":{"class_name":"友情链接","link_list":{"1":{"name":"小康博客","link":"https://www.antmoe.com","avatar":"https://img.antmoe.com/avatar.png","descr":"每天进步一点点"},"2":{"name":"test","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"test"}}},"class2":{"class_name":"链接无效","link_list":{"1":{"name":"test","link":"https://blog.xxx.com","avatar":"https://img.antmoe.com/avatar.png","descr":"test"},"2":{"name":"test","link":"https://www.axxxx.cn/","avatar":"https://img.antmoe.com/avatar.png","descr":"test"}}}}}},"cover":"https://cdn.jsdelivr.net/gh/chauity/images/481465568ef442c490780bf8b0151c83.jpg","excerpt":"","more":""},{"title":"categories","date":"2022-11-03T12:24:28.000Z","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2022-11-03 20:24:28\n---\n","updated":"2022-11-03T12:24:28.868Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cla25rvai0002o8vs5n7d1gdo","content":"","site":{"data":{"link":{"YAMLclass":{"class_name":"友情链接","link_list":{"1":{"name":"小康博客","link":"https://www.antmoe.com","avatar":"https://img.antmoe.com/avatar.png","descr":"每天进步一点点"},"2":{"name":"test","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"test"}}},"class2":{"class_name":"链接无效","link_list":{"1":{"name":"test","link":"https://blog.xxx.com","avatar":"https://img.antmoe.com/avatar.png","descr":"test"},"2":{"name":"test","link":"https://www.axxxx.cn/","avatar":"https://img.antmoe.com/avatar.png","descr":"test"}}}}}},"cover":"https://cdn.jsdelivr.net/gh/chauity/images/481465568ef442c490780bf8b0151c83.jpg","excerpt":"","more":""},{"title":"tags","date":"2022-11-03T12:24:02.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2022-11-03 20:24:02\n---\n","updated":"2022-11-03T12:24:02.247Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cla25rvak0004o8vs4h92fx3t","content":"","site":{"data":{"link":{"YAMLclass":{"class_name":"友情链接","link_list":{"1":{"name":"小康博客","link":"https://www.antmoe.com","avatar":"https://img.antmoe.com/avatar.png","descr":"每天进步一点点"},"2":{"name":"test","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"test"}}},"class2":{"class_name":"链接无效","link_list":{"1":{"name":"test","link":"https://blog.xxx.com","avatar":"https://img.antmoe.com/avatar.png","descr":"test"},"2":{"name":"test","link":"https://www.axxxx.cn/","avatar":"https://img.antmoe.com/avatar.png","descr":"test"}}}}}},"cover":"https://cdn.jsdelivr.net/gh/chauity/images/481465568ef442c490780bf8b0151c83.jpg","excerpt":"","more":""},{"title":"about","date":"2022-11-07T08:23:33.000Z","_content":"\n# 我的简介\n\n啥也不是，啥都不会......\n\nemmmm~~~\n\n介绍完毕！！！\n\n\n作为一名刚毕业的学生，如今是一名社畜。曾经也幻想过去考研进大厂，在这里，分享一下自己的心得体会。\n\n本人在高中时就很一般，最后高中毕业时，也就比本科线高20来分，最后去了本省的一所民办二本院校。\n\n在母校，虽然，学费很贵，家庭条件也很差，和同龄人比，感觉自己一直不知道怎么长大。但是生活在城镇，生活费一个月1000来块也够打发了。\n\n在学校，我也获得过一些不相干的奖项，都是一些没什么用的奖项。\n\n大一第一次奖学金，也是唯一一次。我拿了励志奖学金，很莫名其妙，也很幸运，特别感谢母校各位老师的信任。\n\n我在大学期间一直，都没醒悟过来，现在也不知道未来，路该如何走......不经意间就大四了。这时，我还依稀记得还差189天是2022年的研究生考试，宿舍有两位考公的室友，我就决定了去考研，也不知道自己是怎么想的...... ,我还看了还剩6个月考哪一所学校好...... 最后我选择了桂电的电子信息专硕，这6个月每天起早贪黑，最后我去另外的学校（本校没有考点）参加了考试，两天一夜的时间过了。感觉整个人浑浑噩噩的，很难受，很疲倦，感觉像打了一场大战。两个月后，拿成绩。在家里就天天打游戏、刷手机，好想把这六个月没打的游戏全大回来.......\n\n最后出成绩那天，我明知道自己考不好，甚至还想着二战其他的。最后，过了国家线，因为我考的桂电是国家线B区线就能进复试，这时候还没出国家线，我对比了去年的国家线。好像B区是253分，我一下又很兴奋。","source":"about/index.md","raw":"---\ntitle: about\ndate: 2022-11-07 16:23:33\n---\n\n# 我的简介\n\n啥也不是，啥都不会......\n\nemmmm~~~\n\n介绍完毕！！！\n\n\n作为一名刚毕业的学生，如今是一名社畜。曾经也幻想过去考研进大厂，在这里，分享一下自己的心得体会。\n\n本人在高中时就很一般，最后高中毕业时，也就比本科线高20来分，最后去了本省的一所民办二本院校。\n\n在母校，虽然，学费很贵，家庭条件也很差，和同龄人比，感觉自己一直不知道怎么长大。但是生活在城镇，生活费一个月1000来块也够打发了。\n\n在学校，我也获得过一些不相干的奖项，都是一些没什么用的奖项。\n\n大一第一次奖学金，也是唯一一次。我拿了励志奖学金，很莫名其妙，也很幸运，特别感谢母校各位老师的信任。\n\n我在大学期间一直，都没醒悟过来，现在也不知道未来，路该如何走......不经意间就大四了。这时，我还依稀记得还差189天是2022年的研究生考试，宿舍有两位考公的室友，我就决定了去考研，也不知道自己是怎么想的...... ,我还看了还剩6个月考哪一所学校好...... 最后我选择了桂电的电子信息专硕，这6个月每天起早贪黑，最后我去另外的学校（本校没有考点）参加了考试，两天一夜的时间过了。感觉整个人浑浑噩噩的，很难受，很疲倦，感觉像打了一场大战。两个月后，拿成绩。在家里就天天打游戏、刷手机，好想把这六个月没打的游戏全大回来.......\n\n最后出成绩那天，我明知道自己考不好，甚至还想着二战其他的。最后，过了国家线，因为我考的桂电是国家线B区线就能进复试，这时候还没出国家线，我对比了去年的国家线。好像B区是253分，我一下又很兴奋。","updated":"2022-11-07T09:14:08.423Z","path":"about/index.html","_id":"cla6iunf10000mcvs3dbr2zd1","comments":1,"layout":"page","content":"<h1 id=\"我的简介\"><a href=\"#我的简介\" class=\"headerlink\" title=\"我的简介\"></a>我的简介</h1><p>啥也不是，啥都不会……</p>\n<p>emmmm~~~</p>\n<p>介绍完毕！！！</p>\n<p>作为一名刚毕业的学生，如今是一名社畜。曾经也幻想过去考研进大厂，在这里，分享一下自己的心得体会。</p>\n<p>本人在高中时就很一般，最后高中毕业时，也就比本科线高20来分，最后去了本省的一所民办二本院校。</p>\n<p>在母校，虽然，学费很贵，家庭条件也很差，和同龄人比，感觉自己一直不知道怎么长大。但是生活在城镇，生活费一个月1000来块也够打发了。</p>\n<p>在学校，我也获得过一些不相干的奖项，都是一些没什么用的奖项。</p>\n<p>大一第一次奖学金，也是唯一一次。我拿了励志奖学金，很莫名其妙，也很幸运，特别感谢母校各位老师的信任。</p>\n<p>我在大学期间一直，都没醒悟过来，现在也不知道未来，路该如何走……不经意间就大四了。这时，我还依稀记得还差189天是2022年的研究生考试，宿舍有两位考公的室友，我就决定了去考研，也不知道自己是怎么想的…… ,我还看了还剩6个月考哪一所学校好…… 最后我选择了桂电的电子信息专硕，这6个月每天起早贪黑，最后我去另外的学校（本校没有考点）参加了考试，两天一夜的时间过了。感觉整个人浑浑噩噩的，很难受，很疲倦，感觉像打了一场大战。两个月后，拿成绩。在家里就天天打游戏、刷手机，好想把这六个月没打的游戏全大回来…….</p>\n<p>最后出成绩那天，我明知道自己考不好，甚至还想着二战其他的。最后，过了国家线，因为我考的桂电是国家线B区线就能进复试，这时候还没出国家线，我对比了去年的国家线。好像B区是253分，我一下又很兴奋。</p>\n","site":{"data":{"link":{"YAMLclass":{"class_name":"友情链接","link_list":{"1":{"name":"小康博客","link":"https://www.antmoe.com","avatar":"https://img.antmoe.com/avatar.png","descr":"每天进步一点点"},"2":{"name":"test","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"test"}}},"class2":{"class_name":"链接无效","link_list":{"1":{"name":"test","link":"https://blog.xxx.com","avatar":"https://img.antmoe.com/avatar.png","descr":"test"},"2":{"name":"test","link":"https://www.axxxx.cn/","avatar":"https://img.antmoe.com/avatar.png","descr":"test"}}}}}},"cover":"https://cdn.staticaly.com/gh/chauity/images@master/347e24821bcd4fc5b513a53cbcaa0b3a (1).jpg","excerpt":"","more":"<h1 id=\"我的简介\"><a href=\"#我的简介\" class=\"headerlink\" title=\"我的简介\"></a>我的简介</h1><p>啥也不是，啥都不会……</p>\n<p>emmmm~~~</p>\n<p>介绍完毕！！！</p>\n<p>作为一名刚毕业的学生，如今是一名社畜。曾经也幻想过去考研进大厂，在这里，分享一下自己的心得体会。</p>\n<p>本人在高中时就很一般，最后高中毕业时，也就比本科线高20来分，最后去了本省的一所民办二本院校。</p>\n<p>在母校，虽然，学费很贵，家庭条件也很差，和同龄人比，感觉自己一直不知道怎么长大。但是生活在城镇，生活费一个月1000来块也够打发了。</p>\n<p>在学校，我也获得过一些不相干的奖项，都是一些没什么用的奖项。</p>\n<p>大一第一次奖学金，也是唯一一次。我拿了励志奖学金，很莫名其妙，也很幸运，特别感谢母校各位老师的信任。</p>\n<p>我在大学期间一直，都没醒悟过来，现在也不知道未来，路该如何走……不经意间就大四了。这时，我还依稀记得还差189天是2022年的研究生考试，宿舍有两位考公的室友，我就决定了去考研，也不知道自己是怎么想的…… ,我还看了还剩6个月考哪一所学校好…… 最后我选择了桂电的电子信息专硕，这6个月每天起早贪黑，最后我去另外的学校（本校没有考点）参加了考试，两天一夜的时间过了。感觉整个人浑浑噩噩的，很难受，很疲倦，感觉像打了一场大战。两个月后，拿成绩。在家里就天天打游戏、刷手机，好想把这六个月没打的游戏全大回来…….</p>\n<p>最后出成绩那天，我明知道自己考不好，甚至还想着二战其他的。最后，过了国家线，因为我考的桂电是国家线B区线就能进复试，这时候还没出国家线，我对比了去年的国家线。好像B区是253分，我一下又很兴奋。</p>\n"}],"Post":[{"title":"VScode+PicGo +GitHub图床----辅助书写markdown文档","_content":"\n# VScode + GitHub + PicGo + Statically\n\n## 说明\n\n本文将介绍，如何使用VScode安装picGo插件。将图片上传至GitHub的图床中，将使用到Staticlly的CDN加速，方便国内查看。\n\n建议：\n免费图床虽好，切勿滥用，如果有条件的话，可以选择国内的OSS和COS等云服务器搭建。GitHub国内加速CDN已经封了jsdelivr了，请谨慎使用statically。建议一个库不超过1G，，一张图片不要超过15M。超过了，就建立其他的库。否则可能会有封号的风险。\n\n## 第一步：安装VScode、配置PicGo\n\n国内可以选择腾讯软件中心下载：https://pc.qq.com/detail/16/detail_22856.html\n\n官网是：https://code.visualstudio.com/Download\n\n下载插件PicGo、Chinese、GitHub Theme、markdownlint、Office Viewer\n![20221107110904](https://cdn.staticaly.com/gh/chauity/images@master/blog/pictrues20221107110904.png)\n\n上面是我使用VScode的一些插件，VScode还是挺好用的。如果只是写一些md文档，不使用远程图床工具本地使用的话，可以选择其他工具。我之前使用的是typedown，这个工具有一个很大的缺陷就是不能直接粘贴图片，付费的话也可以选择typero。\n\n配置PicGo远程图床\n![20221107111319](https://cdn.staticaly.com/gh/chauity/images@master/blog/pictrues20221107111319.png)\n\n![20221107145751](https://cdn.staticaly.com/gh/chauity/images@master/blog/pictures/20221107145751.png)\n\n\n## 第二步：GitHub的设置\n\n### 1）配置密钥\n\n在GitHub里面的注册账号，并点击头像下面设置\n如果无法进入GitHub，就下载一个Steam++或者UU加速器学术资源加速。\n![20221107134300](https://cdn.staticaly.com/gh/chauity/images@master/blog/pictures/20221107134300.jpg)\n\n下滑到最下面找到 `Developer settings`,点击进入\n![20221107134455](https://cdn.staticaly.com/gh/chauity/images@master/blog/pictures/20221107134455.jpg)\n\n点击 `Personal access tokens`下面的 `Tokens(classic)`\n![20221107134529](https://cdn.staticaly.com/gh/chauity/images@master/blog/pictures/20221107134529.jpg)\n\n点击 `Generate new token`，创建密钥\n![20221107134802](https://cdn.staticaly.com/gh/chauity/images@master/blog/pictures/20221107134802.jpg)\n\n![20221107134953](https://cdn.staticaly.com/gh/chauity/images@master/blog/pictures/20221107134953.jpg)\n\n这里的密钥就是上面配置PicGo需要的密钥。\n\n### 2）创建仓库\n\n回到GitHub首页，点击 `New`按钮\n![20221107135217](https://cdn.staticaly.com/gh/chauity/images@master/blog/pictures/20221107135217.jpg)\n\n![20221107140047](https://cdn.staticaly.com/gh/chauity/images@master/blog/pictures/20221107140047.jpg)\n\n配置完成后点击，Create repository，就创建好了仓库了。\n\n## 完成，使用\n\n这里就配置好了，大家使用markdown文档时，打开VScode时。\n\n直接使用 `Ctrl + Alt + U`键就能粘贴且上传到GitHub里面。\n","source":"_posts/VScode+PicGo +GitHub图床----辅助书写markdown文档.md","raw":"---\ntitle: VScode+PicGo +GitHub图床----辅助书写markdown文档\n---\n\n# VScode + GitHub + PicGo + Statically\n\n## 说明\n\n本文将介绍，如何使用VScode安装picGo插件。将图片上传至GitHub的图床中，将使用到Staticlly的CDN加速，方便国内查看。\n\n建议：\n免费图床虽好，切勿滥用，如果有条件的话，可以选择国内的OSS和COS等云服务器搭建。GitHub国内加速CDN已经封了jsdelivr了，请谨慎使用statically。建议一个库不超过1G，，一张图片不要超过15M。超过了，就建立其他的库。否则可能会有封号的风险。\n\n## 第一步：安装VScode、配置PicGo\n\n国内可以选择腾讯软件中心下载：https://pc.qq.com/detail/16/detail_22856.html\n\n官网是：https://code.visualstudio.com/Download\n\n下载插件PicGo、Chinese、GitHub Theme、markdownlint、Office Viewer\n![20221107110904](https://cdn.staticaly.com/gh/chauity/images@master/blog/pictrues20221107110904.png)\n\n上面是我使用VScode的一些插件，VScode还是挺好用的。如果只是写一些md文档，不使用远程图床工具本地使用的话，可以选择其他工具。我之前使用的是typedown，这个工具有一个很大的缺陷就是不能直接粘贴图片，付费的话也可以选择typero。\n\n配置PicGo远程图床\n![20221107111319](https://cdn.staticaly.com/gh/chauity/images@master/blog/pictrues20221107111319.png)\n\n![20221107145751](https://cdn.staticaly.com/gh/chauity/images@master/blog/pictures/20221107145751.png)\n\n\n## 第二步：GitHub的设置\n\n### 1）配置密钥\n\n在GitHub里面的注册账号，并点击头像下面设置\n如果无法进入GitHub，就下载一个Steam++或者UU加速器学术资源加速。\n![20221107134300](https://cdn.staticaly.com/gh/chauity/images@master/blog/pictures/20221107134300.jpg)\n\n下滑到最下面找到 `Developer settings`,点击进入\n![20221107134455](https://cdn.staticaly.com/gh/chauity/images@master/blog/pictures/20221107134455.jpg)\n\n点击 `Personal access tokens`下面的 `Tokens(classic)`\n![20221107134529](https://cdn.staticaly.com/gh/chauity/images@master/blog/pictures/20221107134529.jpg)\n\n点击 `Generate new token`，创建密钥\n![20221107134802](https://cdn.staticaly.com/gh/chauity/images@master/blog/pictures/20221107134802.jpg)\n\n![20221107134953](https://cdn.staticaly.com/gh/chauity/images@master/blog/pictures/20221107134953.jpg)\n\n这里的密钥就是上面配置PicGo需要的密钥。\n\n### 2）创建仓库\n\n回到GitHub首页，点击 `New`按钮\n![20221107135217](https://cdn.staticaly.com/gh/chauity/images@master/blog/pictures/20221107135217.jpg)\n\n![20221107140047](https://cdn.staticaly.com/gh/chauity/images@master/blog/pictures/20221107140047.jpg)\n\n配置完成后点击，Create repository，就创建好了仓库了。\n\n## 完成，使用\n\n这里就配置好了，大家使用markdown文档时，打开VScode时。\n\n直接使用 `Ctrl + Alt + U`键就能粘贴且上传到GitHub里面。\n","slug":"VScode+PicGo +GitHub图床----辅助书写markdown文档","published":1,"date":"2022-11-07T08:17:22.133Z","updated":"2022-11-07T07:20:51.655Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cla6j4axq000030vs61e6f2bz","content":"<h1 id=\"VScode-GitHub-PicGo-Statically\"><a href=\"#VScode-GitHub-PicGo-Statically\" class=\"headerlink\" title=\"VScode + GitHub + PicGo + Statically\"></a>VScode + GitHub + PicGo + Statically</h1><h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>本文将介绍，如何使用VScode安装picGo插件。将图片上传至GitHub的图床中，将使用到Staticlly的CDN加速，方便国内查看。</p>\n<p>建议：<br>免费图床虽好，切勿滥用，如果有条件的话，可以选择国内的OSS和COS等云服务器搭建。GitHub国内加速CDN已经封了jsdelivr了，请谨慎使用statically。建议一个库不超过1G，，一张图片不要超过15M。超过了，就建立其他的库。否则可能会有封号的风险。</p>\n<h2 id=\"第一步：安装VScode、配置PicGo\"><a href=\"#第一步：安装VScode、配置PicGo\" class=\"headerlink\" title=\"第一步：安装VScode、配置PicGo\"></a>第一步：安装VScode、配置PicGo</h2><p>国内可以选择腾讯软件中心下载：<a href=\"https://pc.qq.com/detail/16/detail_22856.html\">https://pc.qq.com/detail/16/detail_22856.html</a></p>\n<p>官网是：<a href=\"https://code.visualstudio.com/Download\">https://code.visualstudio.com/Download</a></p>\n<p>下载插件PicGo、Chinese、GitHub Theme、markdownlint、Office Viewer<br><img src=\"https://cdn.staticaly.com/gh/chauity/images@master/blog/pictrues20221107110904.png\" alt=\"20221107110904\"></p>\n<p>上面是我使用VScode的一些插件，VScode还是挺好用的。如果只是写一些md文档，不使用远程图床工具本地使用的话，可以选择其他工具。我之前使用的是typedown，这个工具有一个很大的缺陷就是不能直接粘贴图片，付费的话也可以选择typero。</p>\n<p>配置PicGo远程图床<br><img src=\"https://cdn.staticaly.com/gh/chauity/images@master/blog/pictrues20221107111319.png\" alt=\"20221107111319\"></p>\n<p><img src=\"https://cdn.staticaly.com/gh/chauity/images@master/blog/pictures/20221107145751.png\" alt=\"20221107145751\"></p>\n<h2 id=\"第二步：GitHub的设置\"><a href=\"#第二步：GitHub的设置\" class=\"headerlink\" title=\"第二步：GitHub的设置\"></a>第二步：GitHub的设置</h2><h3 id=\"1）配置密钥\"><a href=\"#1）配置密钥\" class=\"headerlink\" title=\"1）配置密钥\"></a>1）配置密钥</h3><p>在GitHub里面的注册账号，并点击头像下面设置<br>如果无法进入GitHub，就下载一个Steam++或者UU加速器学术资源加速。<br><img src=\"https://cdn.staticaly.com/gh/chauity/images@master/blog/pictures/20221107134300.jpg\" alt=\"20221107134300\"></p>\n<p>下滑到最下面找到 <code>Developer settings</code>,点击进入<br><img src=\"https://cdn.staticaly.com/gh/chauity/images@master/blog/pictures/20221107134455.jpg\" alt=\"20221107134455\"></p>\n<p>点击 <code>Personal access tokens</code>下面的 <code>Tokens(classic)</code><br><img src=\"https://cdn.staticaly.com/gh/chauity/images@master/blog/pictures/20221107134529.jpg\" alt=\"20221107134529\"></p>\n<p>点击 <code>Generate new token</code>，创建密钥<br><img src=\"https://cdn.staticaly.com/gh/chauity/images@master/blog/pictures/20221107134802.jpg\" alt=\"20221107134802\"></p>\n<p><img src=\"https://cdn.staticaly.com/gh/chauity/images@master/blog/pictures/20221107134953.jpg\" alt=\"20221107134953\"></p>\n<p>这里的密钥就是上面配置PicGo需要的密钥。</p>\n<h3 id=\"2）创建仓库\"><a href=\"#2）创建仓库\" class=\"headerlink\" title=\"2）创建仓库\"></a>2）创建仓库</h3><p>回到GitHub首页，点击 <code>New</code>按钮<br><img src=\"https://cdn.staticaly.com/gh/chauity/images@master/blog/pictures/20221107135217.jpg\" alt=\"20221107135217\"></p>\n<p><img src=\"https://cdn.staticaly.com/gh/chauity/images@master/blog/pictures/20221107140047.jpg\" alt=\"20221107140047\"></p>\n<p>配置完成后点击，Create repository，就创建好了仓库了。</p>\n<h2 id=\"完成，使用\"><a href=\"#完成，使用\" class=\"headerlink\" title=\"完成，使用\"></a>完成，使用</h2><p>这里就配置好了，大家使用markdown文档时，打开VScode时。</p>\n<p>直接使用 <code>Ctrl + Alt + U</code>键就能粘贴且上传到GitHub里面。</p>\n","site":{"data":{"link":{"YAMLclass":{"class_name":"友情链接","link_list":{"1":{"name":"小康博客","link":"https://www.antmoe.com","avatar":"https://img.antmoe.com/avatar.png","descr":"每天进步一点点"},"2":{"name":"test","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"test"}}},"class2":{"class_name":"链接无效","link_list":{"1":{"name":"test","link":"https://blog.xxx.com","avatar":"https://img.antmoe.com/avatar.png","descr":"test"},"2":{"name":"test","link":"https://www.axxxx.cn/","avatar":"https://img.antmoe.com/avatar.png","descr":"test"}}}}}},"cover":"https://cdn.staticaly.com/gh/chauity/images@master/347e24821bcd4fc5b513a53cbcaa0b3a (1).jpg","excerpt":"","more":"<h1 id=\"VScode-GitHub-PicGo-Statically\"><a href=\"#VScode-GitHub-PicGo-Statically\" class=\"headerlink\" title=\"VScode + GitHub + PicGo + Statically\"></a>VScode + GitHub + PicGo + Statically</h1><h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>本文将介绍，如何使用VScode安装picGo插件。将图片上传至GitHub的图床中，将使用到Staticlly的CDN加速，方便国内查看。</p>\n<p>建议：<br>免费图床虽好，切勿滥用，如果有条件的话，可以选择国内的OSS和COS等云服务器搭建。GitHub国内加速CDN已经封了jsdelivr了，请谨慎使用statically。建议一个库不超过1G，，一张图片不要超过15M。超过了，就建立其他的库。否则可能会有封号的风险。</p>\n<h2 id=\"第一步：安装VScode、配置PicGo\"><a href=\"#第一步：安装VScode、配置PicGo\" class=\"headerlink\" title=\"第一步：安装VScode、配置PicGo\"></a>第一步：安装VScode、配置PicGo</h2><p>国内可以选择腾讯软件中心下载：<a href=\"https://pc.qq.com/detail/16/detail_22856.html\">https://pc.qq.com/detail/16/detail_22856.html</a></p>\n<p>官网是：<a href=\"https://code.visualstudio.com/Download\">https://code.visualstudio.com/Download</a></p>\n<p>下载插件PicGo、Chinese、GitHub Theme、markdownlint、Office Viewer<br><img src=\"https://cdn.staticaly.com/gh/chauity/images@master/blog/pictrues20221107110904.png\" alt=\"20221107110904\"></p>\n<p>上面是我使用VScode的一些插件，VScode还是挺好用的。如果只是写一些md文档，不使用远程图床工具本地使用的话，可以选择其他工具。我之前使用的是typedown，这个工具有一个很大的缺陷就是不能直接粘贴图片，付费的话也可以选择typero。</p>\n<p>配置PicGo远程图床<br><img src=\"https://cdn.staticaly.com/gh/chauity/images@master/blog/pictrues20221107111319.png\" alt=\"20221107111319\"></p>\n<p><img src=\"https://cdn.staticaly.com/gh/chauity/images@master/blog/pictures/20221107145751.png\" alt=\"20221107145751\"></p>\n<h2 id=\"第二步：GitHub的设置\"><a href=\"#第二步：GitHub的设置\" class=\"headerlink\" title=\"第二步：GitHub的设置\"></a>第二步：GitHub的设置</h2><h3 id=\"1）配置密钥\"><a href=\"#1）配置密钥\" class=\"headerlink\" title=\"1）配置密钥\"></a>1）配置密钥</h3><p>在GitHub里面的注册账号，并点击头像下面设置<br>如果无法进入GitHub，就下载一个Steam++或者UU加速器学术资源加速。<br><img src=\"https://cdn.staticaly.com/gh/chauity/images@master/blog/pictures/20221107134300.jpg\" alt=\"20221107134300\"></p>\n<p>下滑到最下面找到 <code>Developer settings</code>,点击进入<br><img src=\"https://cdn.staticaly.com/gh/chauity/images@master/blog/pictures/20221107134455.jpg\" alt=\"20221107134455\"></p>\n<p>点击 <code>Personal access tokens</code>下面的 <code>Tokens(classic)</code><br><img src=\"https://cdn.staticaly.com/gh/chauity/images@master/blog/pictures/20221107134529.jpg\" alt=\"20221107134529\"></p>\n<p>点击 <code>Generate new token</code>，创建密钥<br><img src=\"https://cdn.staticaly.com/gh/chauity/images@master/blog/pictures/20221107134802.jpg\" alt=\"20221107134802\"></p>\n<p><img src=\"https://cdn.staticaly.com/gh/chauity/images@master/blog/pictures/20221107134953.jpg\" alt=\"20221107134953\"></p>\n<p>这里的密钥就是上面配置PicGo需要的密钥。</p>\n<h3 id=\"2）创建仓库\"><a href=\"#2）创建仓库\" class=\"headerlink\" title=\"2）创建仓库\"></a>2）创建仓库</h3><p>回到GitHub首页，点击 <code>New</code>按钮<br><img src=\"https://cdn.staticaly.com/gh/chauity/images@master/blog/pictures/20221107135217.jpg\" alt=\"20221107135217\"></p>\n<p><img src=\"https://cdn.staticaly.com/gh/chauity/images@master/blog/pictures/20221107140047.jpg\" alt=\"20221107140047\"></p>\n<p>配置完成后点击，Create repository，就创建好了仓库了。</p>\n<h2 id=\"完成，使用\"><a href=\"#完成，使用\" class=\"headerlink\" title=\"完成，使用\"></a>完成，使用</h2><p>这里就配置好了，大家使用markdown文档时，打开VScode时。</p>\n<p>直接使用 <code>Ctrl + Alt + U</code>键就能粘贴且上传到GitHub里面。</p>\n"},{"title":"建站历程","date":"2022-11-04T02:38:53.000Z","_content":"\n## 缘由\n\n博主是一个新入行的编程小白，目前从事的是C++游戏开发学徒。我在大学期间也走了很多的弯路，自己学习过的东西，希望从今天开始学到的东西记录到本网站上。希望搭建博客来展示自己，奈何自己技术不行，在网上也学过一些 Java语言的SpringBoot框架 +Vue 的前后端开发的博客的教程。\n\n说一下，为什么不选择前后端，其一是我的技术不过关，写出来的东西不仅花时间，可能自己都不想看。其二Hexo和GitHub搭建静态网站已经很成熟了，而且不使用后端数据库，笔记全在自己的电脑上，不用去花钱买远程服务器。为什么使用GitHub，当然是我舍不得花钱啊，能白嫖坚决不会花钱，哈哈哈哈。\n\n在搭建之前，笔者希望读者已经学会了MarkDown文档编写自己的笔记。\n\n## 搭建工具\n\n我相信在你有搭建自己博客网站的想法之后，肯定已经学过这两个工具了。我就简单说一下吧，Git就是提交代码的工具，目前世界上最大的Git仓库就是GitHub，国内的码云（Gitee）也日渐成熟。我们学习写的代码就可以提交到GitHub上，方便存储，在GitHub上也有数不清的大佬教学Code。\n\n- [Git](https://git-scm.com/downloads)\n\nNode则是前端开发，必须使用的工具。我也不太懂前端，反正现在前端的Vue框架实现了前后端的分离，前端人员只用编写页面，数据也可以使用Json自己造假数据。加速前后端开发效率。\n\n- [Node.js](https://nodejs.org/zh-cn/)\n\n反正大家不用管下载下来就完事了。我来教你们怎么用。\n\n## 本地搭建过程\n\n### 1）node换源\n\n下载安装完成之后，打开任务命令行 `win + R`\n\n输入`node -v 和 git -v` 查看自己的安装状态\n\n![](https://cdn.staticaly.com/gh/chauity/images@master/20221104111425.jpg)\n\n看安装状态，没什么问题就可以进行node的换源了。有问题的话大概就可能是环境变量安装时候没选，系统找不到他们。读者自行解决（百度~~）。\n\n- 1）执行换源命令：`npm config set registry https://registry.npm.taobao.org`\n\n- 2）执行查看源命令：`npm config get registry`\n\n![](https://cdn.staticaly.com/gh/chauity/images@master/20221104112415.jpg)\n\n### 2）安装Hexo\n\n自己找一个空白文件夹，进入`Command`终端命令窗口。\n\n![](https://cdn.staticaly.com/gh/chauity/images@master/20221104113323.jpg)\n\n- 1）执行node安装hexo：`npm install hexo-cli g`\n\n- 2）初始化脚手架：`hexo init blog2`（名字随意起，我这里是blog2）\n\n![](https://cdn.staticaly.com/gh/chauity/images@master/20221104114010.jpg)\n\n### 3）访问本地网站\n\n- 执行命令：`hexo clean && hexo g && hexo s`\n  \n  <mark>注意看路径：blog2目录下面执行</mark>\n  \n  解释一下：这是三条命令的集合，大概意思就是重新部署一下，并运行起来\n  \n  - `hexo clean`  ：clean的意思\n  \n  - `hexo g` ： g是generate的缩写\n  \n  - `hexo s` :    s是server的缩写\n  \n  ![](https://cdn.staticaly.com/gh/chauity/images@master/20221104115235.jpg)\n\n- 访问`localhost:4000`,可以看到一个**很丑**的网站，就长下面这样，这种做Blog，大多数人肯定都接受不了\n\n![](https://cdn.staticaly.com/gh/chauity/images@master/20221104115349.jpg)\n\n### 4）美化\n\n这里使用的是名为`landscape`的主题，这里我使用的是butterfly的主题\n\n[Hexo 主题仓库](https://hexo.io/themes/)\n\nbutterfly主题GitHub仓库地址：([🦋 A Hexo Theme: Butterfly](https://github.com/jerryc127/hexo-theme-butterfly))\n\n如果不能访问GitHub，可以下载一个加速器，我用的是`Steam++`，现在改名叫`Watt Toolkit`了。\n\n下载的时候选择[码云下载](https://gitee.com/rmbgame/SteamTools/releases/tag/2.8.4)就好了\n\n[Steam++下载地址](https://steampp.net/)\n\n- 主题安装步骤\n  \n  - 1）使用git 下载到本地，下载路径是blog2的themes文件内，git克隆时一定要关闭加速器。\n    \n    `git clone https://github.com/jerryc127/hexo-theme-butterfly.git`\n    \n    ![](https://cdn.staticaly.com/gh/chauity/images@master/20221104134631.jpg)\n  \n  - 2）下载完成之后，修改配置文件的主题配置，配置文件是blog2目录下\n    \n       ![](https://cdn.staticaly.com/gh/chauity/images@master/20221104134834.jpg)\n    \n    修改内容如下：编辑器(建议大家不使用记事本)打开，第一百行的`theme: landscape`，将修改为`hexo-theme-butterfly`，当然你git下来可以重命名，用你新的名字也行的，修改后保存。\n    \n    注意yml配置文件有层级关系的<mark>: 和后面的内容之间也必须有一个空格</mark>\n    \n    ![](https://cdn.staticaly.com/gh/chauity/images@master/20221104135634.jpg)\n  \n  - 3） 执行以下命令\n    \n    ```npm\n    npm install --save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive\n    ```\n  \n  - 4）重启Hexo项目 `hexo clean && hexo g && hexo s`，访问`localhost:4000`\n\n    ![](https://cdn.staticaly.com/gh/chauity/images@master/20221104140901.jpg)\n\n![](https://cdn.staticaly.com/gh/chauity/images@master/20221104140956.jpg)\n\n其他的美化、魔改就在butterfly主题包的`_config.yml`文件修改内容下，这篇Blog不再赘述。\n\n## 部署到GitHub服务器上\n\n这一部分以我已经搭好的blog为例子\n\n### 1）注册账号\n\n首先注册GitHub账号，进不去的下载`steam++`加速器加速。使用QQ邮箱注册就行了。\n\n### 2）创建新的仓库\n\n![](https://cdn.staticaly.com/gh/chauity/images@master/20221104143154.jpg)\n\n![](https://cdn.staticaly.com/gh/chauity/images@master/20221104142921.jpg)\n\n### 3）设置本地电脑公钥\n\n- 1）检测下自己之前有没有配置\n  \n  ```git\n  git config –global user.name `xxxxx` \n  git config –global user.email `xxx@xx.xxx`\n  ```\n\n- 2）生成秘钥\n  \n  ```git\n  ssh-keygen -t rsa\n  ```\n  \n  ![](https://cdn.staticaly.com/gh/chauity/images@master/20221104144343.jpg)\n\n- 3）生成之后，会在你的用户目录生成.ssh目录，该目录里面的公钥文件内容拷贝到GitHub上\n\n![](https://cdn.staticaly.com/gh/chauity/images@master/20221104144702.jpg)\n\n![](https://cdn.staticaly.com/gh/chauity/images@master/20221104144945.jpg)\n\n![](https://cdn.staticaly.com/gh/chauity/images@master/20221104145053.jpg)\n\n![](https://cdn.staticaly.com/gh/chauity/images@master/20221104145142.jpg)\n\n之后就在新建一个公钥联系上你的本地电脑就好了。\n\n### 4）部署发布到GitHub上\n\n- 1）修改`_congfig.yml`文件，注意不是主题的`_congfig.yml`文件，而是你根目录的该文件\n  \n  ```yml\n  deploy:\n    type: git\n    repository: # 你的github仓库地址 -> git@xxx/chauity.github.io.git\n    branch: # 分支名 ->master\n  ```\n  \n  ![](https://cdn.staticaly.com/gh/chauity/images@master/20221104145902.jpg)\n\n- 2）部署上传\n  \n  <mark>上传一定要关闭加速器！！！</mark>\n  \n  - 1）安装部署插件：\n  \n  - 1）执行部署安装上传\n    \n    ```hexo\n    hexo clean && hexo g && hexo d\n    ```\n    \n    d是deploy的缩写\n  \n  - 致此，就大功告成了哈哈哈。\n    \n    完结撒花~~~~。\n\n## 这是我的效果图~，你们的呢\n\n![](https://cdn.staticaly.com/gh/chauity/images@master/20221104150448.jpg)\n\n\n","source":"_posts/建站历程.md","raw":"---\ntitle: 建站历程\ndate: 2022-11-04 10:38:53\ntags:\n---\n\n## 缘由\n\n博主是一个新入行的编程小白，目前从事的是C++游戏开发学徒。我在大学期间也走了很多的弯路，自己学习过的东西，希望从今天开始学到的东西记录到本网站上。希望搭建博客来展示自己，奈何自己技术不行，在网上也学过一些 Java语言的SpringBoot框架 +Vue 的前后端开发的博客的教程。\n\n说一下，为什么不选择前后端，其一是我的技术不过关，写出来的东西不仅花时间，可能自己都不想看。其二Hexo和GitHub搭建静态网站已经很成熟了，而且不使用后端数据库，笔记全在自己的电脑上，不用去花钱买远程服务器。为什么使用GitHub，当然是我舍不得花钱啊，能白嫖坚决不会花钱，哈哈哈哈。\n\n在搭建之前，笔者希望读者已经学会了MarkDown文档编写自己的笔记。\n\n## 搭建工具\n\n我相信在你有搭建自己博客网站的想法之后，肯定已经学过这两个工具了。我就简单说一下吧，Git就是提交代码的工具，目前世界上最大的Git仓库就是GitHub，国内的码云（Gitee）也日渐成熟。我们学习写的代码就可以提交到GitHub上，方便存储，在GitHub上也有数不清的大佬教学Code。\n\n- [Git](https://git-scm.com/downloads)\n\nNode则是前端开发，必须使用的工具。我也不太懂前端，反正现在前端的Vue框架实现了前后端的分离，前端人员只用编写页面，数据也可以使用Json自己造假数据。加速前后端开发效率。\n\n- [Node.js](https://nodejs.org/zh-cn/)\n\n反正大家不用管下载下来就完事了。我来教你们怎么用。\n\n## 本地搭建过程\n\n### 1）node换源\n\n下载安装完成之后，打开任务命令行 `win + R`\n\n输入`node -v 和 git -v` 查看自己的安装状态\n\n![](https://cdn.staticaly.com/gh/chauity/images@master/20221104111425.jpg)\n\n看安装状态，没什么问题就可以进行node的换源了。有问题的话大概就可能是环境变量安装时候没选，系统找不到他们。读者自行解决（百度~~）。\n\n- 1）执行换源命令：`npm config set registry https://registry.npm.taobao.org`\n\n- 2）执行查看源命令：`npm config get registry`\n\n![](https://cdn.staticaly.com/gh/chauity/images@master/20221104112415.jpg)\n\n### 2）安装Hexo\n\n自己找一个空白文件夹，进入`Command`终端命令窗口。\n\n![](https://cdn.staticaly.com/gh/chauity/images@master/20221104113323.jpg)\n\n- 1）执行node安装hexo：`npm install hexo-cli g`\n\n- 2）初始化脚手架：`hexo init blog2`（名字随意起，我这里是blog2）\n\n![](https://cdn.staticaly.com/gh/chauity/images@master/20221104114010.jpg)\n\n### 3）访问本地网站\n\n- 执行命令：`hexo clean && hexo g && hexo s`\n  \n  <mark>注意看路径：blog2目录下面执行</mark>\n  \n  解释一下：这是三条命令的集合，大概意思就是重新部署一下，并运行起来\n  \n  - `hexo clean`  ：clean的意思\n  \n  - `hexo g` ： g是generate的缩写\n  \n  - `hexo s` :    s是server的缩写\n  \n  ![](https://cdn.staticaly.com/gh/chauity/images@master/20221104115235.jpg)\n\n- 访问`localhost:4000`,可以看到一个**很丑**的网站，就长下面这样，这种做Blog，大多数人肯定都接受不了\n\n![](https://cdn.staticaly.com/gh/chauity/images@master/20221104115349.jpg)\n\n### 4）美化\n\n这里使用的是名为`landscape`的主题，这里我使用的是butterfly的主题\n\n[Hexo 主题仓库](https://hexo.io/themes/)\n\nbutterfly主题GitHub仓库地址：([🦋 A Hexo Theme: Butterfly](https://github.com/jerryc127/hexo-theme-butterfly))\n\n如果不能访问GitHub，可以下载一个加速器，我用的是`Steam++`，现在改名叫`Watt Toolkit`了。\n\n下载的时候选择[码云下载](https://gitee.com/rmbgame/SteamTools/releases/tag/2.8.4)就好了\n\n[Steam++下载地址](https://steampp.net/)\n\n- 主题安装步骤\n  \n  - 1）使用git 下载到本地，下载路径是blog2的themes文件内，git克隆时一定要关闭加速器。\n    \n    `git clone https://github.com/jerryc127/hexo-theme-butterfly.git`\n    \n    ![](https://cdn.staticaly.com/gh/chauity/images@master/20221104134631.jpg)\n  \n  - 2）下载完成之后，修改配置文件的主题配置，配置文件是blog2目录下\n    \n       ![](https://cdn.staticaly.com/gh/chauity/images@master/20221104134834.jpg)\n    \n    修改内容如下：编辑器(建议大家不使用记事本)打开，第一百行的`theme: landscape`，将修改为`hexo-theme-butterfly`，当然你git下来可以重命名，用你新的名字也行的，修改后保存。\n    \n    注意yml配置文件有层级关系的<mark>: 和后面的内容之间也必须有一个空格</mark>\n    \n    ![](https://cdn.staticaly.com/gh/chauity/images@master/20221104135634.jpg)\n  \n  - 3） 执行以下命令\n    \n    ```npm\n    npm install --save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive\n    ```\n  \n  - 4）重启Hexo项目 `hexo clean && hexo g && hexo s`，访问`localhost:4000`\n\n    ![](https://cdn.staticaly.com/gh/chauity/images@master/20221104140901.jpg)\n\n![](https://cdn.staticaly.com/gh/chauity/images@master/20221104140956.jpg)\n\n其他的美化、魔改就在butterfly主题包的`_config.yml`文件修改内容下，这篇Blog不再赘述。\n\n## 部署到GitHub服务器上\n\n这一部分以我已经搭好的blog为例子\n\n### 1）注册账号\n\n首先注册GitHub账号，进不去的下载`steam++`加速器加速。使用QQ邮箱注册就行了。\n\n### 2）创建新的仓库\n\n![](https://cdn.staticaly.com/gh/chauity/images@master/20221104143154.jpg)\n\n![](https://cdn.staticaly.com/gh/chauity/images@master/20221104142921.jpg)\n\n### 3）设置本地电脑公钥\n\n- 1）检测下自己之前有没有配置\n  \n  ```git\n  git config –global user.name `xxxxx` \n  git config –global user.email `xxx@xx.xxx`\n  ```\n\n- 2）生成秘钥\n  \n  ```git\n  ssh-keygen -t rsa\n  ```\n  \n  ![](https://cdn.staticaly.com/gh/chauity/images@master/20221104144343.jpg)\n\n- 3）生成之后，会在你的用户目录生成.ssh目录，该目录里面的公钥文件内容拷贝到GitHub上\n\n![](https://cdn.staticaly.com/gh/chauity/images@master/20221104144702.jpg)\n\n![](https://cdn.staticaly.com/gh/chauity/images@master/20221104144945.jpg)\n\n![](https://cdn.staticaly.com/gh/chauity/images@master/20221104145053.jpg)\n\n![](https://cdn.staticaly.com/gh/chauity/images@master/20221104145142.jpg)\n\n之后就在新建一个公钥联系上你的本地电脑就好了。\n\n### 4）部署发布到GitHub上\n\n- 1）修改`_congfig.yml`文件，注意不是主题的`_congfig.yml`文件，而是你根目录的该文件\n  \n  ```yml\n  deploy:\n    type: git\n    repository: # 你的github仓库地址 -> git@xxx/chauity.github.io.git\n    branch: # 分支名 ->master\n  ```\n  \n  ![](https://cdn.staticaly.com/gh/chauity/images@master/20221104145902.jpg)\n\n- 2）部署上传\n  \n  <mark>上传一定要关闭加速器！！！</mark>\n  \n  - 1）安装部署插件：\n  \n  - 1）执行部署安装上传\n    \n    ```hexo\n    hexo clean && hexo g && hexo d\n    ```\n    \n    d是deploy的缩写\n  \n  - 致此，就大功告成了哈哈哈。\n    \n    完结撒花~~~~。\n\n## 这是我的效果图~，你们的呢\n\n![](https://cdn.staticaly.com/gh/chauity/images@master/20221104150448.jpg)\n\n\n","slug":"建站历程","published":1,"updated":"2022-11-07T07:22:46.717Z","_id":"cla6j4axw000130vshu7ccggt","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"缘由\"><a href=\"#缘由\" class=\"headerlink\" title=\"缘由\"></a>缘由</h2><p>博主是一个新入行的编程小白，目前从事的是C++游戏开发学徒。我在大学期间也走了很多的弯路，自己学习过的东西，希望从今天开始学到的东西记录到本网站上。希望搭建博客来展示自己，奈何自己技术不行，在网上也学过一些 Java语言的SpringBoot框架 +Vue 的前后端开发的博客的教程。</p>\n<p>说一下，为什么不选择前后端，其一是我的技术不过关，写出来的东西不仅花时间，可能自己都不想看。其二Hexo和GitHub搭建静态网站已经很成熟了，而且不使用后端数据库，笔记全在自己的电脑上，不用去花钱买远程服务器。为什么使用GitHub，当然是我舍不得花钱啊，能白嫖坚决不会花钱，哈哈哈哈。</p>\n<p>在搭建之前，笔者希望读者已经学会了MarkDown文档编写自己的笔记。</p>\n<h2 id=\"搭建工具\"><a href=\"#搭建工具\" class=\"headerlink\" title=\"搭建工具\"></a>搭建工具</h2><p>我相信在你有搭建自己博客网站的想法之后，肯定已经学过这两个工具了。我就简单说一下吧，Git就是提交代码的工具，目前世界上最大的Git仓库就是GitHub，国内的码云（Gitee）也日渐成熟。我们学习写的代码就可以提交到GitHub上，方便存储，在GitHub上也有数不清的大佬教学Code。</p>\n<ul>\n<li><a href=\"https://git-scm.com/downloads\">Git</a></li>\n</ul>\n<p>Node则是前端开发，必须使用的工具。我也不太懂前端，反正现在前端的Vue框架实现了前后端的分离，前端人员只用编写页面，数据也可以使用Json自己造假数据。加速前后端开发效率。</p>\n<ul>\n<li><a href=\"https://nodejs.org/zh-cn/\">Node.js</a></li>\n</ul>\n<p>反正大家不用管下载下来就完事了。我来教你们怎么用。</p>\n<h2 id=\"本地搭建过程\"><a href=\"#本地搭建过程\" class=\"headerlink\" title=\"本地搭建过程\"></a>本地搭建过程</h2><h3 id=\"1）node换源\"><a href=\"#1）node换源\" class=\"headerlink\" title=\"1）node换源\"></a>1）node换源</h3><p>下载安装完成之后，打开任务命令行 <code>win + R</code></p>\n<p>输入<code>node -v 和 git -v</code> 查看自己的安装状态</p>\n<p><img src=\"https://cdn.staticaly.com/gh/chauity/images@master/20221104111425.jpg\"></p>\n<p>看安装状态，没什么问题就可以进行node的换源了。有问题的话大概就可能是环境变量安装时候没选，系统找不到他们。读者自行解决（百度~~）。</p>\n<ul>\n<li><p>1）执行换源命令：<code>npm config set registry https://registry.npm.taobao.org</code></p>\n</li>\n<li><p>2）执行查看源命令：<code>npm config get registry</code></p>\n</li>\n</ul>\n<p><img src=\"https://cdn.staticaly.com/gh/chauity/images@master/20221104112415.jpg\"></p>\n<h3 id=\"2）安装Hexo\"><a href=\"#2）安装Hexo\" class=\"headerlink\" title=\"2）安装Hexo\"></a>2）安装Hexo</h3><p>自己找一个空白文件夹，进入<code>Command</code>终端命令窗口。</p>\n<p><img src=\"https://cdn.staticaly.com/gh/chauity/images@master/20221104113323.jpg\"></p>\n<ul>\n<li><p>1）执行node安装hexo：<code>npm install hexo-cli g</code></p>\n</li>\n<li><p>2）初始化脚手架：<code>hexo init blog2</code>（名字随意起，我这里是blog2）</p>\n</li>\n</ul>\n<p><img src=\"https://cdn.staticaly.com/gh/chauity/images@master/20221104114010.jpg\"></p>\n<h3 id=\"3）访问本地网站\"><a href=\"#3）访问本地网站\" class=\"headerlink\" title=\"3）访问本地网站\"></a>3）访问本地网站</h3><ul>\n<li><p>执行命令：<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</code></p>\n<p><mark>注意看路径：blog2目录下面执行</mark></p>\n<p>解释一下：这是三条命令的集合，大概意思就是重新部署一下，并运行起来</p>\n<ul>\n<li><p><code>hexo clean</code>  ：clean的意思</p>\n</li>\n<li><p><code>hexo g</code> ： g是generate的缩写</p>\n</li>\n<li><p><code>hexo s</code> :    s是server的缩写</p>\n</li>\n</ul>\n<p><img src=\"https://cdn.staticaly.com/gh/chauity/images@master/20221104115235.jpg\"></p>\n</li>\n<li><p>访问<code>localhost:4000</code>,可以看到一个<strong>很丑</strong>的网站，就长下面这样，这种做Blog，大多数人肯定都接受不了</p>\n</li>\n</ul>\n<p><img src=\"https://cdn.staticaly.com/gh/chauity/images@master/20221104115349.jpg\"></p>\n<h3 id=\"4）美化\"><a href=\"#4）美化\" class=\"headerlink\" title=\"4）美化\"></a>4）美化</h3><p>这里使用的是名为<code>landscape</code>的主题，这里我使用的是butterfly的主题</p>\n<p><a href=\"https://hexo.io/themes/\">Hexo 主题仓库</a></p>\n<p>butterfly主题GitHub仓库地址：(<a href=\"https://github.com/jerryc127/hexo-theme-butterfly\">🦋 A Hexo Theme: Butterfly</a>)</p>\n<p>如果不能访问GitHub，可以下载一个加速器，我用的是<code>Steam++</code>，现在改名叫<code>Watt Toolkit</code>了。</p>\n<p>下载的时候选择<a href=\"https://gitee.com/rmbgame/SteamTools/releases/tag/2.8.4\">码云下载</a>就好了</p>\n<p><a href=\"https://steampp.net/\">Steam++下载地址</a></p>\n<ul>\n<li>主题安装步骤<ul>\n<li><p>1）使用git 下载到本地，下载路径是blog2的themes文件内，git克隆时一定要关闭加速器。</p>\n<p><code>git clone https://github.com/jerryc127/hexo-theme-butterfly.git</code></p>\n<p><img src=\"https://cdn.staticaly.com/gh/chauity/images@master/20221104134631.jpg\"></p>\n</li>\n<li><p>2）下载完成之后，修改配置文件的主题配置，配置文件是blog2目录下</p>\n<p>   <img src=\"https://cdn.staticaly.com/gh/chauity/images@master/20221104134834.jpg\"></p>\n<p>修改内容如下：编辑器(建议大家不使用记事本)打开，第一百行的<code>theme: landscape</code>，将修改为<code>hexo-theme-butterfly</code>，当然你git下来可以重命名，用你新的名字也行的，修改后保存。</p>\n<p>注意yml配置文件有层级关系的<mark>: 和后面的内容之间也必须有一个空格</mark></p>\n<p><img src=\"https://cdn.staticaly.com/gh/chauity/images@master/20221104135634.jpg\"></p>\n</li>\n<li><p>3） 执行以下命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive</span><br></pre></td></tr></table></figure></li>\n<li><p>4）重启Hexo项目 <code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</code>，访问<code>localhost:4000</code></p>\n</li>\n</ul>\n</li>\n</ul>\n<p>    <img src=\"https://cdn.staticaly.com/gh/chauity/images@master/20221104140901.jpg\"></p>\n<p><img src=\"https://cdn.staticaly.com/gh/chauity/images@master/20221104140956.jpg\"></p>\n<p>其他的美化、魔改就在butterfly主题包的<code>_config.yml</code>文件修改内容下，这篇Blog不再赘述。</p>\n<h2 id=\"部署到GitHub服务器上\"><a href=\"#部署到GitHub服务器上\" class=\"headerlink\" title=\"部署到GitHub服务器上\"></a>部署到GitHub服务器上</h2><p>这一部分以我已经搭好的blog为例子</p>\n<h3 id=\"1）注册账号\"><a href=\"#1）注册账号\" class=\"headerlink\" title=\"1）注册账号\"></a>1）注册账号</h3><p>首先注册GitHub账号，进不去的下载<code>steam++</code>加速器加速。使用QQ邮箱注册就行了。</p>\n<h3 id=\"2）创建新的仓库\"><a href=\"#2）创建新的仓库\" class=\"headerlink\" title=\"2）创建新的仓库\"></a>2）创建新的仓库</h3><p><img src=\"https://cdn.staticaly.com/gh/chauity/images@master/20221104143154.jpg\"></p>\n<p><img src=\"https://cdn.staticaly.com/gh/chauity/images@master/20221104142921.jpg\"></p>\n<h3 id=\"3）设置本地电脑公钥\"><a href=\"#3）设置本地电脑公钥\" class=\"headerlink\" title=\"3）设置本地电脑公钥\"></a>3）设置本地电脑公钥</h3><ul>\n<li><p>1）检测下自己之前有没有配置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config –global user.name `xxxxx` </span><br><span class=\"line\">git config –global user.email `xxx@xx.xxx`</span><br></pre></td></tr></table></figure></li>\n<li><p>2）生成秘钥</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.staticaly.com/gh/chauity/images@master/20221104144343.jpg\"></p>\n</li>\n<li><p>3）生成之后，会在你的用户目录生成.ssh目录，该目录里面的公钥文件内容拷贝到GitHub上</p>\n</li>\n</ul>\n<p><img src=\"https://cdn.staticaly.com/gh/chauity/images@master/20221104144702.jpg\"></p>\n<p><img src=\"https://cdn.staticaly.com/gh/chauity/images@master/20221104144945.jpg\"></p>\n<p><img src=\"https://cdn.staticaly.com/gh/chauity/images@master/20221104145053.jpg\"></p>\n<p><img src=\"https://cdn.staticaly.com/gh/chauity/images@master/20221104145142.jpg\"></p>\n<p>之后就在新建一个公钥联系上你的本地电脑就好了。</p>\n<h3 id=\"4）部署发布到GitHub上\"><a href=\"#4）部署发布到GitHub上\" class=\"headerlink\" title=\"4）部署发布到GitHub上\"></a>4）部署发布到GitHub上</h3><ul>\n<li><p>1）修改<code>_congfig.yml</code>文件，注意不是主题的<code>_congfig.yml</code>文件，而是你根目录的该文件</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">git</span></span><br><span class=\"line\">  <span class=\"attr\">repository:</span> <span class=\"comment\"># 你的github仓库地址 -&gt; git@xxx/chauity.github.io.git</span></span><br><span class=\"line\">  <span class=\"attr\">branch:</span> <span class=\"comment\"># 分支名 -&gt;master</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.staticaly.com/gh/chauity/images@master/20221104145902.jpg\"></p>\n</li>\n<li><p>2）部署上传</p>\n<p><mark>上传一定要关闭加速器！！！</mark></p>\n<ul>\n<li><p>1）安装部署插件：</p>\n</li>\n<li><p>1）执行部署安装上传</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>\n\n<p>d是deploy的缩写</p>\n</li>\n<li><p>致此，就大功告成了哈哈哈。</p>\n<p>完结撒花~~~~。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"这是我的效果图-，你们的呢\"><a href=\"#这是我的效果图-，你们的呢\" class=\"headerlink\" title=\"这是我的效果图~，你们的呢\"></a>这是我的效果图~，你们的呢</h2><p><img src=\"https://cdn.staticaly.com/gh/chauity/images@master/20221104150448.jpg\"></p>\n","site":{"data":{"link":{"YAMLclass":{"class_name":"友情链接","link_list":{"1":{"name":"小康博客","link":"https://www.antmoe.com","avatar":"https://img.antmoe.com/avatar.png","descr":"每天进步一点点"},"2":{"name":"test","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"test"}}},"class2":{"class_name":"链接无效","link_list":{"1":{"name":"test","link":"https://blog.xxx.com","avatar":"https://img.antmoe.com/avatar.png","descr":"test"},"2":{"name":"test","link":"https://www.axxxx.cn/","avatar":"https://img.antmoe.com/avatar.png","descr":"test"}}}}}},"cover":"https://cdn.staticaly.com/gh/chauity/images@master/347e24821bcd4fc5b513a53cbcaa0b3a (1).jpg","excerpt":"","more":"<h2 id=\"缘由\"><a href=\"#缘由\" class=\"headerlink\" title=\"缘由\"></a>缘由</h2><p>博主是一个新入行的编程小白，目前从事的是C++游戏开发学徒。我在大学期间也走了很多的弯路，自己学习过的东西，希望从今天开始学到的东西记录到本网站上。希望搭建博客来展示自己，奈何自己技术不行，在网上也学过一些 Java语言的SpringBoot框架 +Vue 的前后端开发的博客的教程。</p>\n<p>说一下，为什么不选择前后端，其一是我的技术不过关，写出来的东西不仅花时间，可能自己都不想看。其二Hexo和GitHub搭建静态网站已经很成熟了，而且不使用后端数据库，笔记全在自己的电脑上，不用去花钱买远程服务器。为什么使用GitHub，当然是我舍不得花钱啊，能白嫖坚决不会花钱，哈哈哈哈。</p>\n<p>在搭建之前，笔者希望读者已经学会了MarkDown文档编写自己的笔记。</p>\n<h2 id=\"搭建工具\"><a href=\"#搭建工具\" class=\"headerlink\" title=\"搭建工具\"></a>搭建工具</h2><p>我相信在你有搭建自己博客网站的想法之后，肯定已经学过这两个工具了。我就简单说一下吧，Git就是提交代码的工具，目前世界上最大的Git仓库就是GitHub，国内的码云（Gitee）也日渐成熟。我们学习写的代码就可以提交到GitHub上，方便存储，在GitHub上也有数不清的大佬教学Code。</p>\n<ul>\n<li><a href=\"https://git-scm.com/downloads\">Git</a></li>\n</ul>\n<p>Node则是前端开发，必须使用的工具。我也不太懂前端，反正现在前端的Vue框架实现了前后端的分离，前端人员只用编写页面，数据也可以使用Json自己造假数据。加速前后端开发效率。</p>\n<ul>\n<li><a href=\"https://nodejs.org/zh-cn/\">Node.js</a></li>\n</ul>\n<p>反正大家不用管下载下来就完事了。我来教你们怎么用。</p>\n<h2 id=\"本地搭建过程\"><a href=\"#本地搭建过程\" class=\"headerlink\" title=\"本地搭建过程\"></a>本地搭建过程</h2><h3 id=\"1）node换源\"><a href=\"#1）node换源\" class=\"headerlink\" title=\"1）node换源\"></a>1）node换源</h3><p>下载安装完成之后，打开任务命令行 <code>win + R</code></p>\n<p>输入<code>node -v 和 git -v</code> 查看自己的安装状态</p>\n<p><img src=\"https://cdn.staticaly.com/gh/chauity/images@master/20221104111425.jpg\"></p>\n<p>看安装状态，没什么问题就可以进行node的换源了。有问题的话大概就可能是环境变量安装时候没选，系统找不到他们。读者自行解决（百度~~）。</p>\n<ul>\n<li><p>1）执行换源命令：<code>npm config set registry https://registry.npm.taobao.org</code></p>\n</li>\n<li><p>2）执行查看源命令：<code>npm config get registry</code></p>\n</li>\n</ul>\n<p><img src=\"https://cdn.staticaly.com/gh/chauity/images@master/20221104112415.jpg\"></p>\n<h3 id=\"2）安装Hexo\"><a href=\"#2）安装Hexo\" class=\"headerlink\" title=\"2）安装Hexo\"></a>2）安装Hexo</h3><p>自己找一个空白文件夹，进入<code>Command</code>终端命令窗口。</p>\n<p><img src=\"https://cdn.staticaly.com/gh/chauity/images@master/20221104113323.jpg\"></p>\n<ul>\n<li><p>1）执行node安装hexo：<code>npm install hexo-cli g</code></p>\n</li>\n<li><p>2）初始化脚手架：<code>hexo init blog2</code>（名字随意起，我这里是blog2）</p>\n</li>\n</ul>\n<p><img src=\"https://cdn.staticaly.com/gh/chauity/images@master/20221104114010.jpg\"></p>\n<h3 id=\"3）访问本地网站\"><a href=\"#3）访问本地网站\" class=\"headerlink\" title=\"3）访问本地网站\"></a>3）访问本地网站</h3><ul>\n<li><p>执行命令：<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</code></p>\n<p><mark>注意看路径：blog2目录下面执行</mark></p>\n<p>解释一下：这是三条命令的集合，大概意思就是重新部署一下，并运行起来</p>\n<ul>\n<li><p><code>hexo clean</code>  ：clean的意思</p>\n</li>\n<li><p><code>hexo g</code> ： g是generate的缩写</p>\n</li>\n<li><p><code>hexo s</code> :    s是server的缩写</p>\n</li>\n</ul>\n<p><img src=\"https://cdn.staticaly.com/gh/chauity/images@master/20221104115235.jpg\"></p>\n</li>\n<li><p>访问<code>localhost:4000</code>,可以看到一个<strong>很丑</strong>的网站，就长下面这样，这种做Blog，大多数人肯定都接受不了</p>\n</li>\n</ul>\n<p><img src=\"https://cdn.staticaly.com/gh/chauity/images@master/20221104115349.jpg\"></p>\n<h3 id=\"4）美化\"><a href=\"#4）美化\" class=\"headerlink\" title=\"4）美化\"></a>4）美化</h3><p>这里使用的是名为<code>landscape</code>的主题，这里我使用的是butterfly的主题</p>\n<p><a href=\"https://hexo.io/themes/\">Hexo 主题仓库</a></p>\n<p>butterfly主题GitHub仓库地址：(<a href=\"https://github.com/jerryc127/hexo-theme-butterfly\">🦋 A Hexo Theme: Butterfly</a>)</p>\n<p>如果不能访问GitHub，可以下载一个加速器，我用的是<code>Steam++</code>，现在改名叫<code>Watt Toolkit</code>了。</p>\n<p>下载的时候选择<a href=\"https://gitee.com/rmbgame/SteamTools/releases/tag/2.8.4\">码云下载</a>就好了</p>\n<p><a href=\"https://steampp.net/\">Steam++下载地址</a></p>\n<ul>\n<li>主题安装步骤<ul>\n<li><p>1）使用git 下载到本地，下载路径是blog2的themes文件内，git克隆时一定要关闭加速器。</p>\n<p><code>git clone https://github.com/jerryc127/hexo-theme-butterfly.git</code></p>\n<p><img src=\"https://cdn.staticaly.com/gh/chauity/images@master/20221104134631.jpg\"></p>\n</li>\n<li><p>2）下载完成之后，修改配置文件的主题配置，配置文件是blog2目录下</p>\n<p>   <img src=\"https://cdn.staticaly.com/gh/chauity/images@master/20221104134834.jpg\"></p>\n<p>修改内容如下：编辑器(建议大家不使用记事本)打开，第一百行的<code>theme: landscape</code>，将修改为<code>hexo-theme-butterfly</code>，当然你git下来可以重命名，用你新的名字也行的，修改后保存。</p>\n<p>注意yml配置文件有层级关系的<mark>: 和后面的内容之间也必须有一个空格</mark></p>\n<p><img src=\"https://cdn.staticaly.com/gh/chauity/images@master/20221104135634.jpg\"></p>\n</li>\n<li><p>3） 执行以下命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive</span><br></pre></td></tr></table></figure></li>\n<li><p>4）重启Hexo项目 <code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</code>，访问<code>localhost:4000</code></p>\n</li>\n</ul>\n</li>\n</ul>\n<p>    <img src=\"https://cdn.staticaly.com/gh/chauity/images@master/20221104140901.jpg\"></p>\n<p><img src=\"https://cdn.staticaly.com/gh/chauity/images@master/20221104140956.jpg\"></p>\n<p>其他的美化、魔改就在butterfly主题包的<code>_config.yml</code>文件修改内容下，这篇Blog不再赘述。</p>\n<h2 id=\"部署到GitHub服务器上\"><a href=\"#部署到GitHub服务器上\" class=\"headerlink\" title=\"部署到GitHub服务器上\"></a>部署到GitHub服务器上</h2><p>这一部分以我已经搭好的blog为例子</p>\n<h3 id=\"1）注册账号\"><a href=\"#1）注册账号\" class=\"headerlink\" title=\"1）注册账号\"></a>1）注册账号</h3><p>首先注册GitHub账号，进不去的下载<code>steam++</code>加速器加速。使用QQ邮箱注册就行了。</p>\n<h3 id=\"2）创建新的仓库\"><a href=\"#2）创建新的仓库\" class=\"headerlink\" title=\"2）创建新的仓库\"></a>2）创建新的仓库</h3><p><img src=\"https://cdn.staticaly.com/gh/chauity/images@master/20221104143154.jpg\"></p>\n<p><img src=\"https://cdn.staticaly.com/gh/chauity/images@master/20221104142921.jpg\"></p>\n<h3 id=\"3）设置本地电脑公钥\"><a href=\"#3）设置本地电脑公钥\" class=\"headerlink\" title=\"3）设置本地电脑公钥\"></a>3）设置本地电脑公钥</h3><ul>\n<li><p>1）检测下自己之前有没有配置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config –global user.name `xxxxx` </span><br><span class=\"line\">git config –global user.email `xxx@xx.xxx`</span><br></pre></td></tr></table></figure></li>\n<li><p>2）生成秘钥</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.staticaly.com/gh/chauity/images@master/20221104144343.jpg\"></p>\n</li>\n<li><p>3）生成之后，会在你的用户目录生成.ssh目录，该目录里面的公钥文件内容拷贝到GitHub上</p>\n</li>\n</ul>\n<p><img src=\"https://cdn.staticaly.com/gh/chauity/images@master/20221104144702.jpg\"></p>\n<p><img src=\"https://cdn.staticaly.com/gh/chauity/images@master/20221104144945.jpg\"></p>\n<p><img src=\"https://cdn.staticaly.com/gh/chauity/images@master/20221104145053.jpg\"></p>\n<p><img src=\"https://cdn.staticaly.com/gh/chauity/images@master/20221104145142.jpg\"></p>\n<p>之后就在新建一个公钥联系上你的本地电脑就好了。</p>\n<h3 id=\"4）部署发布到GitHub上\"><a href=\"#4）部署发布到GitHub上\" class=\"headerlink\" title=\"4）部署发布到GitHub上\"></a>4）部署发布到GitHub上</h3><ul>\n<li><p>1）修改<code>_congfig.yml</code>文件，注意不是主题的<code>_congfig.yml</code>文件，而是你根目录的该文件</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">git</span></span><br><span class=\"line\">  <span class=\"attr\">repository:</span> <span class=\"comment\"># 你的github仓库地址 -&gt; git@xxx/chauity.github.io.git</span></span><br><span class=\"line\">  <span class=\"attr\">branch:</span> <span class=\"comment\"># 分支名 -&gt;master</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.staticaly.com/gh/chauity/images@master/20221104145902.jpg\"></p>\n</li>\n<li><p>2）部署上传</p>\n<p><mark>上传一定要关闭加速器！！！</mark></p>\n<ul>\n<li><p>1）安装部署插件：</p>\n</li>\n<li><p>1）执行部署安装上传</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>\n\n<p>d是deploy的缩写</p>\n</li>\n<li><p>致此，就大功告成了哈哈哈。</p>\n<p>完结撒花~~~~。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"这是我的效果图-，你们的呢\"><a href=\"#这是我的效果图-，你们的呢\" class=\"headerlink\" title=\"这是我的效果图~，你们的呢\"></a>这是我的效果图~，你们的呢</h2><p><img src=\"https://cdn.staticaly.com/gh/chauity/images@master/20221104150448.jpg\"></p>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2022-11-03T02:33:38.663Z","updated":"2022-11-07T02:43:08.721Z","_id":"cla6j4axx000230vs4sl5axu9","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{"link":{"YAMLclass":{"class_name":"友情链接","link_list":{"1":{"name":"小康博客","link":"https://www.antmoe.com","avatar":"https://img.antmoe.com/avatar.png","descr":"每天进步一点点"},"2":{"name":"test","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"test"}}},"class2":{"class_name":"链接无效","link_list":{"1":{"name":"test","link":"https://blog.xxx.com","avatar":"https://img.antmoe.com/avatar.png","descr":"test"},"2":{"name":"test","link":"https://www.axxxx.cn/","avatar":"https://img.antmoe.com/avatar.png","descr":"test"}}}}}},"cover":"https://cdn.staticaly.com/gh/chauity/images@master/347e24821bcd4fc5b513a53cbcaa0b3a (1).jpg","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"指针详解1","date":"2022-11-03T04:24:18.000Z","_content":"## 指针的基本概念\n\n### 1）变量的地址\n\n变量是内存变量的简称，在C++中，系统会给变量分配一块内存，内存是有地址的。\n\n| 0x00000001 |\n| :--------: |\n| 0x00000002 |\n| 0x00000003 |\n| 0x00000004 |\n| 0x00000005 |\n| 0x00000006 |\n| 0x00000007 |\n| 0x00000008 |\n| 0x00000009 |\n| 0x00000010 |\n| 0x0000000A |\n| 0x0000000B |\n|   ......   |\n| 0xFFFFFFFF |\n\nC++用运算符&获取变量在内存中的起始地址。\n\n语法：`&变量名`\n\n### 2)指针变量\n\n指针变量简称指针，他是一种特殊的变量，专用于存放变量在内存中的**起始地址**。\n\n语法：`数据类型 *变量名;`\n\n数据类型必须是合法的C++数据类型（int、char、double或其他自定义数据类型）。\n\n星号*与乘法中的星号是相同的，但是，在这个场景中，星号用于表示这个变量是指针。\n\n### 3）对指针赋值\n\n不管是整型、浮点型、字符型，还是其他数据类型的变量，它的地址都是一个十六进制数。我们用整型指针存放整型变量的地址，用字符型指针存放字符型变量的地址，用浮点型指针存放浮点型变量的地址，用自定义数据类型指针存放自定义数据类型变量的地址。\n\n语法：`指针=&变量名;`\n\n### 4)指针占用的内存\n\n指针也是变量，是变量就要占用内存空间。\n\n在64位操作系统中，不管什么类型的指针，占用内存都是8字节。\n\n在C++中，指针是复合数据类型，复合数据类型是指基于其他类型而定义的数据类型，在程序中，int是整型变量，int *是整型指针类型，int *可以用于sizeof运算符，可以用于数据类型的强制转换，总的来说，把int *当成一种数据类型就对了。\n\n## 使用指针\n\n声明变量后，在没有赋值之前，里面是乱七八糟的值，这时候不能使用指针。\n\n指针存放变量的地址，因此，指针名表示的是地址（就像变量名可以表示变量的值一样）。\n\n*运算符被称为**间接值**或**解除引用（解引用）**，将它用于指针，可以的得到该地址的内存中存储的值，*也是乘法符号，C++根据上下文来确定所指的是乘法还是解引用。\n\n变量和指向变量的指针就像同一枚硬币的两面。\n\n`int no = 38;`\n\n`int *ptr = &no;`\n\n![](https://cdn.jsdelivr.net/gh/ZZQPHPGIT/images/20221025104337.png)\n\n程序在存储数据的时候，必须跟踪三种基本属性：\n\n- 程序存储在哪里；\n- 数据是什么类型；\n- 数据的值是多少。\n\n用两种策略可以达到以上目的；\n\n声明一个普通变量，声明时指出数据类型和变量名（符号名），系统在内部跟踪该内存单元。\n\n声明一个指针变量，存储的值是地址，而不是值本身，程序直接访问该内存单元。\n\n## 指针用于函数的参数\n\n如果把函数的形参声明为指针，调用的时候把实参地址传进去，形参中存放的是实参的地址，在函数中\n\n通过解引用的方法直接操作内存中的数据，可以修改实数的值，这种方法被通俗的称为**地址传递**或**传地址**。\n\n**值传递**：函数的形参是普通变量。\n\n传地址的意义如下：\n\n- 可以在函数中修改实参的值。\n- 减少内存拷贝，提升性能。\n\n## 使用常量\n\n常量是程序中固定不变的数据。\n\n### 1）宏常量\n\n一般在 main 函数的上面声明，用大写命名。\n\n语法：`#define 常量名 值`\n\n### 2）const修饰的变量\n\n在程序的任何地方都可以声明。\n\n语法：`const 数据类型 常量名 = 值`\n\n### 3)常量的特点\n\n程序中不允许改变常量的值，否则编译的时候会报错。\n\n### 4）示例\n\n```cpp\n#include <iostream>    //包含头文件\n\n#define MONTHS 12           //一年中的月份数\n#define PI     3.14159      //圆周率\n\nusing namespace std;        //指定缺省的命名空间\n\n//main函数u，程序从这里开始执行，每个程序只能有一个 main 函数。\nint main()\n{\n    const days = 7;        //一星期的天数\n\n    cout << \"一年有\" << MONTHS << \"个月\" << endl;\n\n}  \n```\n\n## 用const修饰指针\n\n### 1）常量指针\n\n语法：`const 数据类型 *变量名;`\n\n不能通过解引用的方法修改内存地址中的值（用原始的变量名是可以修改的）。\n\n注意：\n\n- 指向的变量（对象）可以改变（之前是指向变量a的，后来可以改为指向变量b）。\n- 一般用于修饰函数的形参，表示不希望在函数里修改内存地址中的值。\n- 如果用于形参、虽然指向的对象可以改变，但那么做没有任何意义。\n- 如果形参的值不需要改变，建议加上const修饰，程序可读性更好。\n\n```cpp\n    int a = 3, b = 8;\n    const int* p = &a;\n    //不能通过解引用赋值修改值，编译会报错 错误  C3892\n    //*p = 13;\n    //只能通过变量修改值\n    a = 13;\n    cout << \"a=\" << a << \",*p=\" << *p << endl;\n    p = &b;\n    cout << \"b=\" << b << \",*p=\" << *p << endl;\n```\n\n```cpp\nvoid func(const int* no,const string *str)\n{\n    //参数加上const，解引用赋值,编译时 同样会报错\n    //*no = 8;\n    //*str = \"我有一只小小鸟.\";\n    cout << \"亲爱的\" << *no << \"号\" << *str << endl;\n}\n```\n\n### 2)指针常量\n\n语法：`数据类型 *const 变量名;`\n\n指向的变量（对象）不可改变。\n\n注意：\n\n- 在定义的同时必须初始化，否则没有意义。\n- 可以通过解引用的方法修改内存地址中的值。\n- C++编译器把指针常量做了一些特别的处理，改投换面之后，有了一个新的名字，叫做引用。\n\n### 3）常指针常量\n\n语法：`const 数据类型 *const 变量名;`\n\n指向的变量（对象）不可改变，不能通过解引用的方法修改内存地址中的值。\n\n```cpp\n    //常指针常量\n    int a = 3,b = 8;\n    const int* const pa = &a;\n    //既不能改变指针指向，也不能解引用改变值，下列两种写法都是错误的\n    //*pa = 13;\n    //pa = &b;\n```\n\n常量指针：指针指向可以改，指针指向的值不可以改。\n\n指针常量：指针指向不可以改，指针的指向的值可以更改。\n\n常指针常量：指针指向不可以改，指针指向的值不可以更改。\n\n## void 关键字\n\n在C++中，void表示为**无类型**，主要有三个用途：\n\n- 函数的返回值使用 `void` ，表示函数没有返回值。\n\n  ```cpp\n  void func (int a,int b)\n  {\n       //函数体代码\n       return;   \n  }\n  ```\n- 函数的参数填 `void` ，表示函数不需要参数（或者让参数列表空着）。\n\n  ```cpp\n  int func( void )\n  {\n      //函数体代码\n      return 0;\n  }\n  ```\n- 函数的形参用 `void *`，表示接受任意数据类型的指针。\n\n  注意：\n\n  - 不能用 `void`声明变量，它不能代表一个真实的变量。\n  - 不能对 `void *`指针直接解引用（需要转化为其他类型的指针）。\n  - 把其他类型的指针赋值给 `void *`指针不需要转换。\n  - 把 `void *`指针赋值给其他类型的指针需要转换。\n\n## 动态分配内存new和delete\n\nC++内存空间\n\n![](https://cdn.jsdelivr.net/gh/ZZQPHPGIT/images/20221025192803.png)\n\n使用堆区内存有四个步骤：\n\n1）声明一个指针；\n\n2）用new运算符向系统申请一块内存，让指针指向这块内存；\n\n3）通过对指针的解引用的方法，像使用变量一样使用这块内存；\n\n4）如果这块内存不用了，用delete运算符释放它；\n\n申请内存的语法：`new 数据类型(初始值);` //C++11支持 {}\n\n如果申请成功，返回一个地址；如果申请失败，返回一个空地址（暂时不考虑失败的情况）\n\n是否内存的语法：`delete 地址;`\n\n注意：\n\n- 动态分配出来的内存没有变量名，只能通过指向它的指针来操作内存中的数据。\n- 如果动态分配的内存用不了，必须使用 `delete`释放它，否则可能用尽系统的内存。\n- 动态分配的内存的生命周期与程序相同，程序退出时，如果没有是否，系统将自动回收。\n- 就算指针的作用域已失效，所指向的内存也不会释放。\n- 用指针跟踪已分配的内存时，不能跟丢。\n\n## 二级指针\n\n**指针**是**指针变量**的简称，也是**变量**。是**变量**就有**地址**。\n\n**指针**用于存放**普通变量**的**地址**。\n\n**二级指针**用于存放**指针变量**的**地址**。\n\n声明**二级指针**的语法：`数据类型** 指针名;`\n\n使用指针有两个目的：1）传递地址；2）存放动态分配的内存的地址。\n\n在函数中，如果传递普通变量的地址，形参用指针；**传递指针的地址，形参用二级指针**。\n\n## 空指针\n\n在C++和C中，用0或NULL都可以表示空指针。\n\n声明指针后，在赋值之前，让它指向空，表示没有任何地址。\n\n### 1）使用空指针的后果\n\n**如果对空指针解引用，程序会崩溃。**\n\n**如果对空指针使用delete运算符，系统忽略该操作，不会出现异常。所以内存释放后，也应该把指针指向空。**\n\n为什么空指针访问会出现异常？\n\nNULL指针分配的分区：其范围是从 `0x00000000`到 `0x0000FFFF`。这段代码是空闲的，对于空闲的空间而言，没有相对应的物理存储器，与之相对应，所以对这段代码来说，任何读写操作都会引起异常的。空指针是程序无论在核实都没有物理存储器与之相对应的地址。为了保障“无论何时”这个条件，需要人为划分一个空指针的区域，固有上面NULL指针分区。\n\n### 2）C++ 11的nullptr\n\n用0和NULL表示空指针会产生歧义，C++11建议用 `nullptr`表示空指针，也就是 `（void *）0`。\n\nNULL在C++中就是0，这是因为在C++中 `void *` 类型是不允许隐式转换成其他类型的，所以之前C++中用0来代表空指针，但是在重载整型的情况下，会出现上述的问题。所以C++11加入了nullptr，可以保证在任何情况下都代表空指针，而不会出现上述的情况，因此，建议用nullptr替代NULL，而NULL就当做0使用。\n\n**注意：在Linux平台下，如果使用nullptr，编译要加 `-std=c++11`参数**\n\n## 野指针\n\n野指针就是指针指向的不是一个有效（合法）的地址。\n\n在程序中，如果访问野指针，**可能**会造成程序的崩溃。\n\n出现野指针的情况主要有三种：\n\n- 1）指针在定义的时候，如果没有初始化，它的值是不确定的（乱指一气）。\n- 2）如果指针指向了动态分配的内存，内存被释放后，指针不会置空，但是，指向的指针已失效。\n- 3）指针指向的变量超越变量的作用域（变量的内存空间已被回收），作用域指的是是局部变量还是全局变量。\n\n规避方法：\n\n- 1）指针在定义的时候，如果没地方指，就初始化为nullptr。\n- 2）动态分配的内存释放后，将其置位nullptr。\n- 3）函数不要返回局部变量的地址。\n\n  注意：野指针的危害比空指针要大很多，如果访问野指针，**可能**会造成程序的崩溃。是可能，表示一定，程序的表现是**不稳定**，增加了调试的难度。\n\n## 一维数组与指针\n\n### 1) 指针的算术\n\n- 将一个整型变量加1后，其值将增加1。\n- 但是，将指针变量（地址的值）加1后，增加的量等于它指向的数据类型的字节数。\n\n### 2) 数组的地址\n\n- a) 数组在内存中占用的空间是连续的。\n- b) C++数组名解释为数组的第0个元素的地址。\n- c) 数组第0个元素的地址和数组首地址的取值是相同的。\n- d) 数组第n个元素的地址是：`数组首地址+n`\n- e) C++编译器把 `数组名[下标]`解释为 `*(数组首地址+下标)`\n\n### 3) 数组的本质\n\n- 数组是占用连续空间的一块内存，数组名被解释为数组第0个元素的地址。C++操作内存有两种方法：数组解释法和指针表示法，他们说等价的。\n\n### 4）数组名不一定会被解释为地址\n\n- 在多数情况下，C++将数组名解释成第0个元素的地址，但是，将sizeof运算符用于数组名，返回的是整个数组的内存空间的字节数。\n- 可以修改指针的值，但数组是常量，不可修改。\n\n## 一维数组用于函数的参数\n\n### 1）指针的数组表示\n\n- 在C++内部，用指针来处理数组。\n- C++编译器把 `数组名[下标]`解释为 `*(数组首地址+下标)`\n- C++编译器把 `地址[下标]`解释为 `*(地址+下标)`\n\n### 2）一维数组用于函数的参数\n\n- 一维数组用于函数的参数时，只能传数组的地址，并且必须把数组长度也传进去，除非数组中有最后一个元素的标志。\n- 书写的方法有两种：\n\n  `void func(int* arr,int len)`\n\n        `void func(int* arr[],int len)`\n\n- 注意：\n\n  在函数中，可以用数组表示法，也可以用指针表示法。\n\n  在函数中，不要对指针名用sizeof运算符，由于64位操作系统指针大小是永远是8，并不是数组占用内存的大小。\n\n## 用 new 动态创建一维数组\n\n普通数组在栈上分配内存，栈很小；如果需要存放更多的元素，必须在堆上分配内存。\n\n动态创建一维数组的语法：`数据类型 *指针=new 数据类型[数组长度]`；\n\n释放一维数组的语法：`delete []指针;`\n\n注意：\n\n- 动态创建的数组没有数组名，不能用 sizeof 运算符。\n- 可以用数组比色法和指针表示法两种方式使用动态创建的数组。\n- 必须使用`<mark>`delete[]`</mark>`来释放内存（不能只用 `delete`）。\n- 不用用`<mark>`delete[]`</mark>`来释放不是`<mark>`new[]`</mark>`分配的内存。\n- 不要用`<mark>`delete[]`</mark>`释放同一个内存块两次（否则等同于操作野指针）。\n- 对空指针用`<mark>`delete[]`</mark>`是安全的（释放内存后，应该把指针置空nullptr）。\n- 声明普通数组的时候，数组长度可以用变量，相当于在栈上动态创建数组，并且不需要释放。\n- 如果内存不足，调用`<mark>`new`</mark>`会产生异常，导致程序终止；如果在new关键字后面加（`<mark>`std::nothrow`</mark>`）选项，则返回`<mark>`nullptr`</mark>`，不会产生异常。\n- 为什么用`<mark>`delete[]`</mark>`释放数组的时候，不需要指定数组的大小？因为系统会自动跟踪分配的内存。\n\n## 二维数组用于函数的参数\n\n```cpp\nint* p;      //整型指针。\nint* p[3];   //一维整型指针数组，元素是3个整型指针（p[0]、p[1]、p[2]）。\nint* p();    //函数p的返回值类型是整型的地址。\nint (*p)(int, int);    //p是函数指针，指针指向的函数具有两个int型的形参。函数的返回值是整型。\n```\n\n### 1）行指针（数组指针）\n\n声明行指针的语法：`<mark>`数据类型 (*行指针名)[行的大小];   //行的大小即数组长度。`</mark>`\n\n```cpp\n//行指针的举例\nint(*p1)[3]; //p1是行指针，用于指向数组长度为3的int型数组。\nint(*p2)[5]; //p2是行指针，用于指向数组长度为5的int型数组。\ndouble(*p3)[5]; //p3是行指针，用于指向数组长度为5的double型数组。\n```\n\n![1667564963187](image/指针详解1/1667564963187.png)\n\n一维数组名被解释为数组的第0个元素地址。\n\n对一维数组名取地址得到的是数组的地址，是行地址。\n\n### 2）二维数组名是行地址\n\n``int bh[2][3] = {{11,12,13},{21,22,23}};``\n\nbh 是二维数组名，该数组有2元素，每一个元素又是一个`<mark>`数组长度为3的整型数组`</mark>`。\n\nbh被解释为`<mark>`数组长度为三的整型数组`</mark>`类型的地址。\n\n如果存放bh的值，要用`<mark>`数组长度为3的整型数组`</mark>`类型的指针。\n\nint (*p)[3] = bh\n\n### 3)把二维数组传递给函数\n\n如果要把bh传给函数，函数的声明如下：\n\nvoid func(int (*p)[3],int len);\n\nvoid func(int p[][3],int len);\n","source":"_posts/指针详解1.md","raw":"---\ntitle: 指针详解1\ndate: 2022-11-03 12:24:18\ntags:    关于指针的一些事儿\n---\n## 指针的基本概念\n\n### 1）变量的地址\n\n变量是内存变量的简称，在C++中，系统会给变量分配一块内存，内存是有地址的。\n\n| 0x00000001 |\n| :--------: |\n| 0x00000002 |\n| 0x00000003 |\n| 0x00000004 |\n| 0x00000005 |\n| 0x00000006 |\n| 0x00000007 |\n| 0x00000008 |\n| 0x00000009 |\n| 0x00000010 |\n| 0x0000000A |\n| 0x0000000B |\n|   ......   |\n| 0xFFFFFFFF |\n\nC++用运算符&获取变量在内存中的起始地址。\n\n语法：`&变量名`\n\n### 2)指针变量\n\n指针变量简称指针，他是一种特殊的变量，专用于存放变量在内存中的**起始地址**。\n\n语法：`数据类型 *变量名;`\n\n数据类型必须是合法的C++数据类型（int、char、double或其他自定义数据类型）。\n\n星号*与乘法中的星号是相同的，但是，在这个场景中，星号用于表示这个变量是指针。\n\n### 3）对指针赋值\n\n不管是整型、浮点型、字符型，还是其他数据类型的变量，它的地址都是一个十六进制数。我们用整型指针存放整型变量的地址，用字符型指针存放字符型变量的地址，用浮点型指针存放浮点型变量的地址，用自定义数据类型指针存放自定义数据类型变量的地址。\n\n语法：`指针=&变量名;`\n\n### 4)指针占用的内存\n\n指针也是变量，是变量就要占用内存空间。\n\n在64位操作系统中，不管什么类型的指针，占用内存都是8字节。\n\n在C++中，指针是复合数据类型，复合数据类型是指基于其他类型而定义的数据类型，在程序中，int是整型变量，int *是整型指针类型，int *可以用于sizeof运算符，可以用于数据类型的强制转换，总的来说，把int *当成一种数据类型就对了。\n\n## 使用指针\n\n声明变量后，在没有赋值之前，里面是乱七八糟的值，这时候不能使用指针。\n\n指针存放变量的地址，因此，指针名表示的是地址（就像变量名可以表示变量的值一样）。\n\n*运算符被称为**间接值**或**解除引用（解引用）**，将它用于指针，可以的得到该地址的内存中存储的值，*也是乘法符号，C++根据上下文来确定所指的是乘法还是解引用。\n\n变量和指向变量的指针就像同一枚硬币的两面。\n\n`int no = 38;`\n\n`int *ptr = &no;`\n\n![](https://cdn.jsdelivr.net/gh/ZZQPHPGIT/images/20221025104337.png)\n\n程序在存储数据的时候，必须跟踪三种基本属性：\n\n- 程序存储在哪里；\n- 数据是什么类型；\n- 数据的值是多少。\n\n用两种策略可以达到以上目的；\n\n声明一个普通变量，声明时指出数据类型和变量名（符号名），系统在内部跟踪该内存单元。\n\n声明一个指针变量，存储的值是地址，而不是值本身，程序直接访问该内存单元。\n\n## 指针用于函数的参数\n\n如果把函数的形参声明为指针，调用的时候把实参地址传进去，形参中存放的是实参的地址，在函数中\n\n通过解引用的方法直接操作内存中的数据，可以修改实数的值，这种方法被通俗的称为**地址传递**或**传地址**。\n\n**值传递**：函数的形参是普通变量。\n\n传地址的意义如下：\n\n- 可以在函数中修改实参的值。\n- 减少内存拷贝，提升性能。\n\n## 使用常量\n\n常量是程序中固定不变的数据。\n\n### 1）宏常量\n\n一般在 main 函数的上面声明，用大写命名。\n\n语法：`#define 常量名 值`\n\n### 2）const修饰的变量\n\n在程序的任何地方都可以声明。\n\n语法：`const 数据类型 常量名 = 值`\n\n### 3)常量的特点\n\n程序中不允许改变常量的值，否则编译的时候会报错。\n\n### 4）示例\n\n```cpp\n#include <iostream>    //包含头文件\n\n#define MONTHS 12           //一年中的月份数\n#define PI     3.14159      //圆周率\n\nusing namespace std;        //指定缺省的命名空间\n\n//main函数u，程序从这里开始执行，每个程序只能有一个 main 函数。\nint main()\n{\n    const days = 7;        //一星期的天数\n\n    cout << \"一年有\" << MONTHS << \"个月\" << endl;\n\n}  \n```\n\n## 用const修饰指针\n\n### 1）常量指针\n\n语法：`const 数据类型 *变量名;`\n\n不能通过解引用的方法修改内存地址中的值（用原始的变量名是可以修改的）。\n\n注意：\n\n- 指向的变量（对象）可以改变（之前是指向变量a的，后来可以改为指向变量b）。\n- 一般用于修饰函数的形参，表示不希望在函数里修改内存地址中的值。\n- 如果用于形参、虽然指向的对象可以改变，但那么做没有任何意义。\n- 如果形参的值不需要改变，建议加上const修饰，程序可读性更好。\n\n```cpp\n    int a = 3, b = 8;\n    const int* p = &a;\n    //不能通过解引用赋值修改值，编译会报错 错误  C3892\n    //*p = 13;\n    //只能通过变量修改值\n    a = 13;\n    cout << \"a=\" << a << \",*p=\" << *p << endl;\n    p = &b;\n    cout << \"b=\" << b << \",*p=\" << *p << endl;\n```\n\n```cpp\nvoid func(const int* no,const string *str)\n{\n    //参数加上const，解引用赋值,编译时 同样会报错\n    //*no = 8;\n    //*str = \"我有一只小小鸟.\";\n    cout << \"亲爱的\" << *no << \"号\" << *str << endl;\n}\n```\n\n### 2)指针常量\n\n语法：`数据类型 *const 变量名;`\n\n指向的变量（对象）不可改变。\n\n注意：\n\n- 在定义的同时必须初始化，否则没有意义。\n- 可以通过解引用的方法修改内存地址中的值。\n- C++编译器把指针常量做了一些特别的处理，改投换面之后，有了一个新的名字，叫做引用。\n\n### 3）常指针常量\n\n语法：`const 数据类型 *const 变量名;`\n\n指向的变量（对象）不可改变，不能通过解引用的方法修改内存地址中的值。\n\n```cpp\n    //常指针常量\n    int a = 3,b = 8;\n    const int* const pa = &a;\n    //既不能改变指针指向，也不能解引用改变值，下列两种写法都是错误的\n    //*pa = 13;\n    //pa = &b;\n```\n\n常量指针：指针指向可以改，指针指向的值不可以改。\n\n指针常量：指针指向不可以改，指针的指向的值可以更改。\n\n常指针常量：指针指向不可以改，指针指向的值不可以更改。\n\n## void 关键字\n\n在C++中，void表示为**无类型**，主要有三个用途：\n\n- 函数的返回值使用 `void` ，表示函数没有返回值。\n\n  ```cpp\n  void func (int a,int b)\n  {\n       //函数体代码\n       return;   \n  }\n  ```\n- 函数的参数填 `void` ，表示函数不需要参数（或者让参数列表空着）。\n\n  ```cpp\n  int func( void )\n  {\n      //函数体代码\n      return 0;\n  }\n  ```\n- 函数的形参用 `void *`，表示接受任意数据类型的指针。\n\n  注意：\n\n  - 不能用 `void`声明变量，它不能代表一个真实的变量。\n  - 不能对 `void *`指针直接解引用（需要转化为其他类型的指针）。\n  - 把其他类型的指针赋值给 `void *`指针不需要转换。\n  - 把 `void *`指针赋值给其他类型的指针需要转换。\n\n## 动态分配内存new和delete\n\nC++内存空间\n\n![](https://cdn.jsdelivr.net/gh/ZZQPHPGIT/images/20221025192803.png)\n\n使用堆区内存有四个步骤：\n\n1）声明一个指针；\n\n2）用new运算符向系统申请一块内存，让指针指向这块内存；\n\n3）通过对指针的解引用的方法，像使用变量一样使用这块内存；\n\n4）如果这块内存不用了，用delete运算符释放它；\n\n申请内存的语法：`new 数据类型(初始值);` //C++11支持 {}\n\n如果申请成功，返回一个地址；如果申请失败，返回一个空地址（暂时不考虑失败的情况）\n\n是否内存的语法：`delete 地址;`\n\n注意：\n\n- 动态分配出来的内存没有变量名，只能通过指向它的指针来操作内存中的数据。\n- 如果动态分配的内存用不了，必须使用 `delete`释放它，否则可能用尽系统的内存。\n- 动态分配的内存的生命周期与程序相同，程序退出时，如果没有是否，系统将自动回收。\n- 就算指针的作用域已失效，所指向的内存也不会释放。\n- 用指针跟踪已分配的内存时，不能跟丢。\n\n## 二级指针\n\n**指针**是**指针变量**的简称，也是**变量**。是**变量**就有**地址**。\n\n**指针**用于存放**普通变量**的**地址**。\n\n**二级指针**用于存放**指针变量**的**地址**。\n\n声明**二级指针**的语法：`数据类型** 指针名;`\n\n使用指针有两个目的：1）传递地址；2）存放动态分配的内存的地址。\n\n在函数中，如果传递普通变量的地址，形参用指针；**传递指针的地址，形参用二级指针**。\n\n## 空指针\n\n在C++和C中，用0或NULL都可以表示空指针。\n\n声明指针后，在赋值之前，让它指向空，表示没有任何地址。\n\n### 1）使用空指针的后果\n\n**如果对空指针解引用，程序会崩溃。**\n\n**如果对空指针使用delete运算符，系统忽略该操作，不会出现异常。所以内存释放后，也应该把指针指向空。**\n\n为什么空指针访问会出现异常？\n\nNULL指针分配的分区：其范围是从 `0x00000000`到 `0x0000FFFF`。这段代码是空闲的，对于空闲的空间而言，没有相对应的物理存储器，与之相对应，所以对这段代码来说，任何读写操作都会引起异常的。空指针是程序无论在核实都没有物理存储器与之相对应的地址。为了保障“无论何时”这个条件，需要人为划分一个空指针的区域，固有上面NULL指针分区。\n\n### 2）C++ 11的nullptr\n\n用0和NULL表示空指针会产生歧义，C++11建议用 `nullptr`表示空指针，也就是 `（void *）0`。\n\nNULL在C++中就是0，这是因为在C++中 `void *` 类型是不允许隐式转换成其他类型的，所以之前C++中用0来代表空指针，但是在重载整型的情况下，会出现上述的问题。所以C++11加入了nullptr，可以保证在任何情况下都代表空指针，而不会出现上述的情况，因此，建议用nullptr替代NULL，而NULL就当做0使用。\n\n**注意：在Linux平台下，如果使用nullptr，编译要加 `-std=c++11`参数**\n\n## 野指针\n\n野指针就是指针指向的不是一个有效（合法）的地址。\n\n在程序中，如果访问野指针，**可能**会造成程序的崩溃。\n\n出现野指针的情况主要有三种：\n\n- 1）指针在定义的时候，如果没有初始化，它的值是不确定的（乱指一气）。\n- 2）如果指针指向了动态分配的内存，内存被释放后，指针不会置空，但是，指向的指针已失效。\n- 3）指针指向的变量超越变量的作用域（变量的内存空间已被回收），作用域指的是是局部变量还是全局变量。\n\n规避方法：\n\n- 1）指针在定义的时候，如果没地方指，就初始化为nullptr。\n- 2）动态分配的内存释放后，将其置位nullptr。\n- 3）函数不要返回局部变量的地址。\n\n  注意：野指针的危害比空指针要大很多，如果访问野指针，**可能**会造成程序的崩溃。是可能，表示一定，程序的表现是**不稳定**，增加了调试的难度。\n\n## 一维数组与指针\n\n### 1) 指针的算术\n\n- 将一个整型变量加1后，其值将增加1。\n- 但是，将指针变量（地址的值）加1后，增加的量等于它指向的数据类型的字节数。\n\n### 2) 数组的地址\n\n- a) 数组在内存中占用的空间是连续的。\n- b) C++数组名解释为数组的第0个元素的地址。\n- c) 数组第0个元素的地址和数组首地址的取值是相同的。\n- d) 数组第n个元素的地址是：`数组首地址+n`\n- e) C++编译器把 `数组名[下标]`解释为 `*(数组首地址+下标)`\n\n### 3) 数组的本质\n\n- 数组是占用连续空间的一块内存，数组名被解释为数组第0个元素的地址。C++操作内存有两种方法：数组解释法和指针表示法，他们说等价的。\n\n### 4）数组名不一定会被解释为地址\n\n- 在多数情况下，C++将数组名解释成第0个元素的地址，但是，将sizeof运算符用于数组名，返回的是整个数组的内存空间的字节数。\n- 可以修改指针的值，但数组是常量，不可修改。\n\n## 一维数组用于函数的参数\n\n### 1）指针的数组表示\n\n- 在C++内部，用指针来处理数组。\n- C++编译器把 `数组名[下标]`解释为 `*(数组首地址+下标)`\n- C++编译器把 `地址[下标]`解释为 `*(地址+下标)`\n\n### 2）一维数组用于函数的参数\n\n- 一维数组用于函数的参数时，只能传数组的地址，并且必须把数组长度也传进去，除非数组中有最后一个元素的标志。\n- 书写的方法有两种：\n\n  `void func(int* arr,int len)`\n\n        `void func(int* arr[],int len)`\n\n- 注意：\n\n  在函数中，可以用数组表示法，也可以用指针表示法。\n\n  在函数中，不要对指针名用sizeof运算符，由于64位操作系统指针大小是永远是8，并不是数组占用内存的大小。\n\n## 用 new 动态创建一维数组\n\n普通数组在栈上分配内存，栈很小；如果需要存放更多的元素，必须在堆上分配内存。\n\n动态创建一维数组的语法：`数据类型 *指针=new 数据类型[数组长度]`；\n\n释放一维数组的语法：`delete []指针;`\n\n注意：\n\n- 动态创建的数组没有数组名，不能用 sizeof 运算符。\n- 可以用数组比色法和指针表示法两种方式使用动态创建的数组。\n- 必须使用`<mark>`delete[]`</mark>`来释放内存（不能只用 `delete`）。\n- 不用用`<mark>`delete[]`</mark>`来释放不是`<mark>`new[]`</mark>`分配的内存。\n- 不要用`<mark>`delete[]`</mark>`释放同一个内存块两次（否则等同于操作野指针）。\n- 对空指针用`<mark>`delete[]`</mark>`是安全的（释放内存后，应该把指针置空nullptr）。\n- 声明普通数组的时候，数组长度可以用变量，相当于在栈上动态创建数组，并且不需要释放。\n- 如果内存不足，调用`<mark>`new`</mark>`会产生异常，导致程序终止；如果在new关键字后面加（`<mark>`std::nothrow`</mark>`）选项，则返回`<mark>`nullptr`</mark>`，不会产生异常。\n- 为什么用`<mark>`delete[]`</mark>`释放数组的时候，不需要指定数组的大小？因为系统会自动跟踪分配的内存。\n\n## 二维数组用于函数的参数\n\n```cpp\nint* p;      //整型指针。\nint* p[3];   //一维整型指针数组，元素是3个整型指针（p[0]、p[1]、p[2]）。\nint* p();    //函数p的返回值类型是整型的地址。\nint (*p)(int, int);    //p是函数指针，指针指向的函数具有两个int型的形参。函数的返回值是整型。\n```\n\n### 1）行指针（数组指针）\n\n声明行指针的语法：`<mark>`数据类型 (*行指针名)[行的大小];   //行的大小即数组长度。`</mark>`\n\n```cpp\n//行指针的举例\nint(*p1)[3]; //p1是行指针，用于指向数组长度为3的int型数组。\nint(*p2)[5]; //p2是行指针，用于指向数组长度为5的int型数组。\ndouble(*p3)[5]; //p3是行指针，用于指向数组长度为5的double型数组。\n```\n\n![1667564963187](image/指针详解1/1667564963187.png)\n\n一维数组名被解释为数组的第0个元素地址。\n\n对一维数组名取地址得到的是数组的地址，是行地址。\n\n### 2）二维数组名是行地址\n\n``int bh[2][3] = {{11,12,13},{21,22,23}};``\n\nbh 是二维数组名，该数组有2元素，每一个元素又是一个`<mark>`数组长度为3的整型数组`</mark>`。\n\nbh被解释为`<mark>`数组长度为三的整型数组`</mark>`类型的地址。\n\n如果存放bh的值，要用`<mark>`数组长度为3的整型数组`</mark>`类型的指针。\n\nint (*p)[3] = bh\n\n### 3)把二维数组传递给函数\n\n如果要把bh传给函数，函数的声明如下：\n\nvoid func(int (*p)[3],int len);\n\nvoid func(int p[][3],int len);\n","slug":"指针详解1","published":1,"updated":"2022-11-04T12:30:49.857Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cla6j4axz000330vs2ofheq4g","content":"<h2 id=\"指针的基本概念\"><a href=\"#指针的基本概念\" class=\"headerlink\" title=\"指针的基本概念\"></a>指针的基本概念</h2><h3 id=\"1）变量的地址\"><a href=\"#1）变量的地址\" class=\"headerlink\" title=\"1）变量的地址\"></a>1）变量的地址</h3><p>变量是内存变量的简称，在C++中，系统会给变量分配一块内存，内存是有地址的。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">0x00000001</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">0x00000002</td>\n</tr>\n<tr>\n<td align=\"center\">0x00000003</td>\n</tr>\n<tr>\n<td align=\"center\">0x00000004</td>\n</tr>\n<tr>\n<td align=\"center\">0x00000005</td>\n</tr>\n<tr>\n<td align=\"center\">0x00000006</td>\n</tr>\n<tr>\n<td align=\"center\">0x00000007</td>\n</tr>\n<tr>\n<td align=\"center\">0x00000008</td>\n</tr>\n<tr>\n<td align=\"center\">0x00000009</td>\n</tr>\n<tr>\n<td align=\"center\">0x00000010</td>\n</tr>\n<tr>\n<td align=\"center\">0x0000000A</td>\n</tr>\n<tr>\n<td align=\"center\">0x0000000B</td>\n</tr>\n<tr>\n<td align=\"center\">……</td>\n</tr>\n<tr>\n<td align=\"center\">0xFFFFFFFF</td>\n</tr>\n</tbody></table>\n<p>C++用运算符&amp;获取变量在内存中的起始地址。</p>\n<p>语法：<code>&amp;变量名</code></p>\n<h3 id=\"2-指针变量\"><a href=\"#2-指针变量\" class=\"headerlink\" title=\"2)指针变量\"></a>2)指针变量</h3><p>指针变量简称指针，他是一种特殊的变量，专用于存放变量在内存中的<strong>起始地址</strong>。</p>\n<p>语法：<code>数据类型 *变量名;</code></p>\n<p>数据类型必须是合法的C++数据类型（int、char、double或其他自定义数据类型）。</p>\n<p>星号*与乘法中的星号是相同的，但是，在这个场景中，星号用于表示这个变量是指针。</p>\n<h3 id=\"3）对指针赋值\"><a href=\"#3）对指针赋值\" class=\"headerlink\" title=\"3）对指针赋值\"></a>3）对指针赋值</h3><p>不管是整型、浮点型、字符型，还是其他数据类型的变量，它的地址都是一个十六进制数。我们用整型指针存放整型变量的地址，用字符型指针存放字符型变量的地址，用浮点型指针存放浮点型变量的地址，用自定义数据类型指针存放自定义数据类型变量的地址。</p>\n<p>语法：<code>指针=&amp;变量名;</code></p>\n<h3 id=\"4-指针占用的内存\"><a href=\"#4-指针占用的内存\" class=\"headerlink\" title=\"4)指针占用的内存\"></a>4)指针占用的内存</h3><p>指针也是变量，是变量就要占用内存空间。</p>\n<p>在64位操作系统中，不管什么类型的指针，占用内存都是8字节。</p>\n<p>在C++中，指针是复合数据类型，复合数据类型是指基于其他类型而定义的数据类型，在程序中，int是整型变量，int *是整型指针类型，int *可以用于sizeof运算符，可以用于数据类型的强制转换，总的来说，把int *当成一种数据类型就对了。</p>\n<h2 id=\"使用指针\"><a href=\"#使用指针\" class=\"headerlink\" title=\"使用指针\"></a>使用指针</h2><p>声明变量后，在没有赋值之前，里面是乱七八糟的值，这时候不能使用指针。</p>\n<p>指针存放变量的地址，因此，指针名表示的是地址（就像变量名可以表示变量的值一样）。</p>\n<p><em>运算符被称为<strong>间接值</strong>或<strong>解除引用（解引用）</strong>，将它用于指针，可以的得到该地址的内存中存储的值，</em>也是乘法符号，C++根据上下文来确定所指的是乘法还是解引用。</p>\n<p>变量和指向变量的指针就像同一枚硬币的两面。</p>\n<p><code>int no = 38;</code></p>\n<p><code>int *ptr = &amp;no;</code></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/ZZQPHPGIT/images/20221025104337.png\"></p>\n<p>程序在存储数据的时候，必须跟踪三种基本属性：</p>\n<ul>\n<li>程序存储在哪里；</li>\n<li>数据是什么类型；</li>\n<li>数据的值是多少。</li>\n</ul>\n<p>用两种策略可以达到以上目的；</p>\n<p>声明一个普通变量，声明时指出数据类型和变量名（符号名），系统在内部跟踪该内存单元。</p>\n<p>声明一个指针变量，存储的值是地址，而不是值本身，程序直接访问该内存单元。</p>\n<h2 id=\"指针用于函数的参数\"><a href=\"#指针用于函数的参数\" class=\"headerlink\" title=\"指针用于函数的参数\"></a>指针用于函数的参数</h2><p>如果把函数的形参声明为指针，调用的时候把实参地址传进去，形参中存放的是实参的地址，在函数中</p>\n<p>通过解引用的方法直接操作内存中的数据，可以修改实数的值，这种方法被通俗的称为<strong>地址传递</strong>或<strong>传地址</strong>。</p>\n<p><strong>值传递</strong>：函数的形参是普通变量。</p>\n<p>传地址的意义如下：</p>\n<ul>\n<li>可以在函数中修改实参的值。</li>\n<li>减少内存拷贝，提升性能。</li>\n</ul>\n<h2 id=\"使用常量\"><a href=\"#使用常量\" class=\"headerlink\" title=\"使用常量\"></a>使用常量</h2><p>常量是程序中固定不变的数据。</p>\n<h3 id=\"1）宏常量\"><a href=\"#1）宏常量\" class=\"headerlink\" title=\"1）宏常量\"></a>1）宏常量</h3><p>一般在 main 函数的上面声明，用大写命名。</p>\n<p>语法：<code>#define 常量名 值</code></p>\n<h3 id=\"2）const修饰的变量\"><a href=\"#2）const修饰的变量\" class=\"headerlink\" title=\"2）const修饰的变量\"></a>2）const修饰的变量</h3><p>在程序的任何地方都可以声明。</p>\n<p>语法：<code>const 数据类型 常量名 = 值</code></p>\n<h3 id=\"3-常量的特点\"><a href=\"#3-常量的特点\" class=\"headerlink\" title=\"3)常量的特点\"></a>3)常量的特点</h3><p>程序中不允许改变常量的值，否则编译的时候会报错。</p>\n<h3 id=\"4）示例\"><a href=\"#4）示例\" class=\"headerlink\" title=\"4）示例\"></a>4）示例</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span>    <span class=\"comment\">//包含头文件</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MONTHS 12           <span class=\"comment\">//一年中的月份数</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> PI     3.14159      <span class=\"comment\">//圆周率</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;        <span class=\"comment\">//指定缺省的命名空间</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//main函数u，程序从这里开始执行，每个程序只能有一个 main 函数。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">const</span> days = <span class=\"number\">7</span>;        <span class=\"comment\">//一星期的天数</span></span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;一年有&quot;</span> &lt;&lt; MONTHS &lt;&lt; <span class=\"string\">&quot;个月&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"用const修饰指针\"><a href=\"#用const修饰指针\" class=\"headerlink\" title=\"用const修饰指针\"></a>用const修饰指针</h2><h3 id=\"1）常量指针\"><a href=\"#1）常量指针\" class=\"headerlink\" title=\"1）常量指针\"></a>1）常量指针</h3><p>语法：<code>const 数据类型 *变量名;</code></p>\n<p>不能通过解引用的方法修改内存地址中的值（用原始的变量名是可以修改的）。</p>\n<p>注意：</p>\n<ul>\n<li>指向的变量（对象）可以改变（之前是指向变量a的，后来可以改为指向变量b）。</li>\n<li>一般用于修饰函数的形参，表示不希望在函数里修改内存地址中的值。</li>\n<li>如果用于形参、虽然指向的对象可以改变，但那么做没有任何意义。</li>\n<li>如果形参的值不需要改变，建议加上const修饰，程序可读性更好。</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> a = <span class=\"number\">3</span>, b = <span class=\"number\">8</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span>* p = &amp;a;</span><br><span class=\"line\"><span class=\"comment\">//不能通过解引用赋值修改值，编译会报错 错误  C3892</span></span><br><span class=\"line\"><span class=\"comment\">//*p = 13;</span></span><br><span class=\"line\"><span class=\"comment\">//只能通过变量修改值</span></span><br><span class=\"line\">a = <span class=\"number\">13</span>;</span><br><span class=\"line\">cout &lt;&lt; <span class=\"string\">&quot;a=&quot;</span> &lt;&lt; a &lt;&lt; <span class=\"string\">&quot;,*p=&quot;</span> &lt;&lt; *p &lt;&lt; endl;</span><br><span class=\"line\">p = &amp;b;</span><br><span class=\"line\">cout &lt;&lt; <span class=\"string\">&quot;b=&quot;</span> &lt;&lt; b &lt;&lt; <span class=\"string\">&quot;,*p=&quot;</span> &lt;&lt; *p &lt;&lt; endl;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">int</span>* no,<span class=\"type\">const</span> string *str)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//参数加上const，解引用赋值,编译时 同样会报错</span></span><br><span class=\"line\">    <span class=\"comment\">//*no = 8;</span></span><br><span class=\"line\">    <span class=\"comment\">//*str = &quot;我有一只小小鸟.&quot;;</span></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;亲爱的&quot;</span> &lt;&lt; *no &lt;&lt; <span class=\"string\">&quot;号&quot;</span> &lt;&lt; *str &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-指针常量\"><a href=\"#2-指针常量\" class=\"headerlink\" title=\"2)指针常量\"></a>2)指针常量</h3><p>语法：<code>数据类型 *const 变量名;</code></p>\n<p>指向的变量（对象）不可改变。</p>\n<p>注意：</p>\n<ul>\n<li>在定义的同时必须初始化，否则没有意义。</li>\n<li>可以通过解引用的方法修改内存地址中的值。</li>\n<li>C++编译器把指针常量做了一些特别的处理，改投换面之后，有了一个新的名字，叫做引用。</li>\n</ul>\n<h3 id=\"3）常指针常量\"><a href=\"#3）常指针常量\" class=\"headerlink\" title=\"3）常指针常量\"></a>3）常指针常量</h3><p>语法：<code>const 数据类型 *const 变量名;</code></p>\n<p>指向的变量（对象）不可改变，不能通过解引用的方法修改内存地址中的值。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//常指针常量</span></span><br><span class=\"line\"><span class=\"type\">int</span> a = <span class=\"number\">3</span>,b = <span class=\"number\">8</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span>* <span class=\"type\">const</span> pa = &amp;a;</span><br><span class=\"line\"><span class=\"comment\">//既不能改变指针指向，也不能解引用改变值，下列两种写法都是错误的</span></span><br><span class=\"line\"><span class=\"comment\">//*pa = 13;</span></span><br><span class=\"line\"><span class=\"comment\">//pa = &amp;b;</span></span><br></pre></td></tr></table></figure>\n\n<p>常量指针：指针指向可以改，指针指向的值不可以改。</p>\n<p>指针常量：指针指向不可以改，指针的指向的值可以更改。</p>\n<p>常指针常量：指针指向不可以改，指针指向的值不可以更改。</p>\n<h2 id=\"void-关键字\"><a href=\"#void-关键字\" class=\"headerlink\" title=\"void 关键字\"></a>void 关键字</h2><p>在C++中，void表示为<strong>无类型</strong>，主要有三个用途：</p>\n<ul>\n<li><p>函数的返回值使用 <code>void</code> ，表示函数没有返回值。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">func</span> <span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">     <span class=\"comment\">//函数体代码</span></span><br><span class=\"line\">     <span class=\"keyword\">return</span>;   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>函数的参数填 <code>void</code> ，表示函数不需要参数（或者让参数列表空着）。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">func</span><span class=\"params\">( <span class=\"type\">void</span> )</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//函数体代码</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>函数的形参用 <code>void *</code>，表示接受任意数据类型的指针。</p>\n<p>注意：</p>\n<ul>\n<li>不能用 <code>void</code>声明变量，它不能代表一个真实的变量。</li>\n<li>不能对 <code>void *</code>指针直接解引用（需要转化为其他类型的指针）。</li>\n<li>把其他类型的指针赋值给 <code>void *</code>指针不需要转换。</li>\n<li>把 <code>void *</code>指针赋值给其他类型的指针需要转换。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"动态分配内存new和delete\"><a href=\"#动态分配内存new和delete\" class=\"headerlink\" title=\"动态分配内存new和delete\"></a>动态分配内存new和delete</h2><p>C++内存空间</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/ZZQPHPGIT/images/20221025192803.png\"></p>\n<p>使用堆区内存有四个步骤：</p>\n<p>1）声明一个指针；</p>\n<p>2）用new运算符向系统申请一块内存，让指针指向这块内存；</p>\n<p>3）通过对指针的解引用的方法，像使用变量一样使用这块内存；</p>\n<p>4）如果这块内存不用了，用delete运算符释放它；</p>\n<p>申请内存的语法：<code>new 数据类型(初始值);</code> //C++11支持 {}</p>\n<p>如果申请成功，返回一个地址；如果申请失败，返回一个空地址（暂时不考虑失败的情况）</p>\n<p>是否内存的语法：<code>delete 地址;</code></p>\n<p>注意：</p>\n<ul>\n<li>动态分配出来的内存没有变量名，只能通过指向它的指针来操作内存中的数据。</li>\n<li>如果动态分配的内存用不了，必须使用 <code>delete</code>释放它，否则可能用尽系统的内存。</li>\n<li>动态分配的内存的生命周期与程序相同，程序退出时，如果没有是否，系统将自动回收。</li>\n<li>就算指针的作用域已失效，所指向的内存也不会释放。</li>\n<li>用指针跟踪已分配的内存时，不能跟丢。</li>\n</ul>\n<h2 id=\"二级指针\"><a href=\"#二级指针\" class=\"headerlink\" title=\"二级指针\"></a>二级指针</h2><p><strong>指针</strong>是<strong>指针变量</strong>的简称，也是<strong>变量</strong>。是<strong>变量</strong>就有<strong>地址</strong>。</p>\n<p><strong>指针</strong>用于存放<strong>普通变量</strong>的<strong>地址</strong>。</p>\n<p><strong>二级指针</strong>用于存放<strong>指针变量</strong>的<strong>地址</strong>。</p>\n<p>声明<strong>二级指针</strong>的语法：<code>数据类型** 指针名;</code></p>\n<p>使用指针有两个目的：1）传递地址；2）存放动态分配的内存的地址。</p>\n<p>在函数中，如果传递普通变量的地址，形参用指针；<strong>传递指针的地址，形参用二级指针</strong>。</p>\n<h2 id=\"空指针\"><a href=\"#空指针\" class=\"headerlink\" title=\"空指针\"></a>空指针</h2><p>在C++和C中，用0或NULL都可以表示空指针。</p>\n<p>声明指针后，在赋值之前，让它指向空，表示没有任何地址。</p>\n<h3 id=\"1）使用空指针的后果\"><a href=\"#1）使用空指针的后果\" class=\"headerlink\" title=\"1）使用空指针的后果\"></a>1）使用空指针的后果</h3><p><strong>如果对空指针解引用，程序会崩溃。</strong></p>\n<p><strong>如果对空指针使用delete运算符，系统忽略该操作，不会出现异常。所以内存释放后，也应该把指针指向空。</strong></p>\n<p>为什么空指针访问会出现异常？</p>\n<p>NULL指针分配的分区：其范围是从 <code>0x00000000</code>到 <code>0x0000FFFF</code>。这段代码是空闲的，对于空闲的空间而言，没有相对应的物理存储器，与之相对应，所以对这段代码来说，任何读写操作都会引起异常的。空指针是程序无论在核实都没有物理存储器与之相对应的地址。为了保障“无论何时”这个条件，需要人为划分一个空指针的区域，固有上面NULL指针分区。</p>\n<h3 id=\"2）C-11的nullptr\"><a href=\"#2）C-11的nullptr\" class=\"headerlink\" title=\"2）C++ 11的nullptr\"></a>2）C++ 11的nullptr</h3><p>用0和NULL表示空指针会产生歧义，C++11建议用 <code>nullptr</code>表示空指针，也就是 <code>（void *）0</code>。</p>\n<p>NULL在C++中就是0，这是因为在C++中 <code>void *</code> 类型是不允许隐式转换成其他类型的，所以之前C++中用0来代表空指针，但是在重载整型的情况下，会出现上述的问题。所以C++11加入了nullptr，可以保证在任何情况下都代表空指针，而不会出现上述的情况，因此，建议用nullptr替代NULL，而NULL就当做0使用。</p>\n<p><strong>注意：在Linux平台下，如果使用nullptr，编译要加 <code>-std=c++11</code>参数</strong></p>\n<h2 id=\"野指针\"><a href=\"#野指针\" class=\"headerlink\" title=\"野指针\"></a>野指针</h2><p>野指针就是指针指向的不是一个有效（合法）的地址。</p>\n<p>在程序中，如果访问野指针，<strong>可能</strong>会造成程序的崩溃。</p>\n<p>出现野指针的情况主要有三种：</p>\n<ul>\n<li>1）指针在定义的时候，如果没有初始化，它的值是不确定的（乱指一气）。</li>\n<li>2）如果指针指向了动态分配的内存，内存被释放后，指针不会置空，但是，指向的指针已失效。</li>\n<li>3）指针指向的变量超越变量的作用域（变量的内存空间已被回收），作用域指的是是局部变量还是全局变量。</li>\n</ul>\n<p>规避方法：</p>\n<ul>\n<li><p>1）指针在定义的时候，如果没地方指，就初始化为nullptr。</p>\n</li>\n<li><p>2）动态分配的内存释放后，将其置位nullptr。</p>\n</li>\n<li><p>3）函数不要返回局部变量的地址。</p>\n<p>注意：野指针的危害比空指针要大很多，如果访问野指针，<strong>可能</strong>会造成程序的崩溃。是可能，表示一定，程序的表现是<strong>不稳定</strong>，增加了调试的难度。</p>\n</li>\n</ul>\n<h2 id=\"一维数组与指针\"><a href=\"#一维数组与指针\" class=\"headerlink\" title=\"一维数组与指针\"></a>一维数组与指针</h2><h3 id=\"1-指针的算术\"><a href=\"#1-指针的算术\" class=\"headerlink\" title=\"1) 指针的算术\"></a>1) 指针的算术</h3><ul>\n<li>将一个整型变量加1后，其值将增加1。</li>\n<li>但是，将指针变量（地址的值）加1后，增加的量等于它指向的数据类型的字节数。</li>\n</ul>\n<h3 id=\"2-数组的地址\"><a href=\"#2-数组的地址\" class=\"headerlink\" title=\"2) 数组的地址\"></a>2) 数组的地址</h3><ul>\n<li>a) 数组在内存中占用的空间是连续的。</li>\n<li>b) C++数组名解释为数组的第0个元素的地址。</li>\n<li>c) 数组第0个元素的地址和数组首地址的取值是相同的。</li>\n<li>d) 数组第n个元素的地址是：<code>数组首地址+n</code></li>\n<li>e) C++编译器把 <code>数组名[下标]</code>解释为 <code>*(数组首地址+下标)</code></li>\n</ul>\n<h3 id=\"3-数组的本质\"><a href=\"#3-数组的本质\" class=\"headerlink\" title=\"3) 数组的本质\"></a>3) 数组的本质</h3><ul>\n<li>数组是占用连续空间的一块内存，数组名被解释为数组第0个元素的地址。C++操作内存有两种方法：数组解释法和指针表示法，他们说等价的。</li>\n</ul>\n<h3 id=\"4）数组名不一定会被解释为地址\"><a href=\"#4）数组名不一定会被解释为地址\" class=\"headerlink\" title=\"4）数组名不一定会被解释为地址\"></a>4）数组名不一定会被解释为地址</h3><ul>\n<li>在多数情况下，C++将数组名解释成第0个元素的地址，但是，将sizeof运算符用于数组名，返回的是整个数组的内存空间的字节数。</li>\n<li>可以修改指针的值，但数组是常量，不可修改。</li>\n</ul>\n<h2 id=\"一维数组用于函数的参数\"><a href=\"#一维数组用于函数的参数\" class=\"headerlink\" title=\"一维数组用于函数的参数\"></a>一维数组用于函数的参数</h2><h3 id=\"1）指针的数组表示\"><a href=\"#1）指针的数组表示\" class=\"headerlink\" title=\"1）指针的数组表示\"></a>1）指针的数组表示</h3><ul>\n<li>在C++内部，用指针来处理数组。</li>\n<li>C++编译器把 <code>数组名[下标]</code>解释为 <code>*(数组首地址+下标)</code></li>\n<li>C++编译器把 <code>地址[下标]</code>解释为 <code>*(地址+下标)</code></li>\n</ul>\n<h3 id=\"2）一维数组用于函数的参数\"><a href=\"#2）一维数组用于函数的参数\" class=\"headerlink\" title=\"2）一维数组用于函数的参数\"></a>2）一维数组用于函数的参数</h3><ul>\n<li><p>一维数组用于函数的参数时，只能传数组的地址，并且必须把数组长度也传进去，除非数组中有最后一个元素的标志。</p>\n</li>\n<li><p>书写的方法有两种：</p>\n<p><code>void func(int* arr,int len)</code></p>\n</li>\n</ul>\n<p>        <code>void func(int* arr[],int len)</code></p>\n<ul>\n<li><p>注意：</p>\n<p>在函数中，可以用数组表示法，也可以用指针表示法。</p>\n<p>在函数中，不要对指针名用sizeof运算符，由于64位操作系统指针大小是永远是8，并不是数组占用内存的大小。</p>\n</li>\n</ul>\n<h2 id=\"用-new-动态创建一维数组\"><a href=\"#用-new-动态创建一维数组\" class=\"headerlink\" title=\"用 new 动态创建一维数组\"></a>用 new 动态创建一维数组</h2><p>普通数组在栈上分配内存，栈很小；如果需要存放更多的元素，必须在堆上分配内存。</p>\n<p>动态创建一维数组的语法：<code>数据类型 *指针=new 数据类型[数组长度]</code>；</p>\n<p>释放一维数组的语法：<code>delete []指针;</code></p>\n<p>注意：</p>\n<ul>\n<li>动态创建的数组没有数组名，不能用 sizeof 运算符。</li>\n<li>可以用数组比色法和指针表示法两种方式使用动态创建的数组。</li>\n<li>必须使用<code>&lt;mark&gt;</code>delete[]<code>&lt;/mark&gt;</code>来释放内存（不能只用 <code>delete</code>）。</li>\n<li>不用用<code>&lt;mark&gt;</code>delete[]<code>&lt;/mark&gt;</code>来释放不是<code>&lt;mark&gt;</code>new[]<code>&lt;/mark&gt;</code>分配的内存。</li>\n<li>不要用<code>&lt;mark&gt;</code>delete[]<code>&lt;/mark&gt;</code>释放同一个内存块两次（否则等同于操作野指针）。</li>\n<li>对空指针用<code>&lt;mark&gt;</code>delete[]<code>&lt;/mark&gt;</code>是安全的（释放内存后，应该把指针置空nullptr）。</li>\n<li>声明普通数组的时候，数组长度可以用变量，相当于在栈上动态创建数组，并且不需要释放。</li>\n<li>如果内存不足，调用<code>&lt;mark&gt;</code>new<code>&lt;/mark&gt;</code>会产生异常，导致程序终止；如果在new关键字后面加（<code>&lt;mark&gt;</code>std::nothrow<code>&lt;/mark&gt;</code>）选项，则返回<code>&lt;mark&gt;</code>nullptr<code>&lt;/mark&gt;</code>，不会产生异常。</li>\n<li>为什么用<code>&lt;mark&gt;</code>delete[]<code>&lt;/mark&gt;</code>释放数组的时候，不需要指定数组的大小？因为系统会自动跟踪分配的内存。</li>\n</ul>\n<h2 id=\"二维数组用于函数的参数\"><a href=\"#二维数组用于函数的参数\" class=\"headerlink\" title=\"二维数组用于函数的参数\"></a>二维数组用于函数的参数</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span>* p;      <span class=\"comment\">//整型指针。</span></span><br><span class=\"line\"><span class=\"type\">int</span>* p[<span class=\"number\">3</span>];   <span class=\"comment\">//一维整型指针数组，元素是3个整型指针（p[0]、p[1]、p[2]）。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span>* <span class=\"title\">p</span><span class=\"params\">()</span></span>;    <span class=\"comment\">//函数p的返回值类型是整型的地址。</span></span><br><span class=\"line\"><span class=\"built_in\">int</span> (*p)(<span class=\"type\">int</span>, <span class=\"type\">int</span>);    <span class=\"comment\">//p是函数指针，指针指向的函数具有两个int型的形参。函数的返回值是整型。</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1）行指针（数组指针）\"><a href=\"#1）行指针（数组指针）\" class=\"headerlink\" title=\"1）行指针（数组指针）\"></a>1）行指针（数组指针）</h3><p>声明行指针的语法：<code>&lt;mark&gt;</code>数据类型 (*行指针名)[行的大小];   //行的大小即数组长度。<code>&lt;/mark&gt;</code></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//行指针的举例</span></span><br><span class=\"line\"><span class=\"built_in\">int</span>(*p1)[<span class=\"number\">3</span>]; <span class=\"comment\">//p1是行指针，用于指向数组长度为3的int型数组。</span></span><br><span class=\"line\"><span class=\"built_in\">int</span>(*p2)[<span class=\"number\">5</span>]; <span class=\"comment\">//p2是行指针，用于指向数组长度为5的int型数组。</span></span><br><span class=\"line\"><span class=\"built_in\">double</span>(*p3)[<span class=\"number\">5</span>]; <span class=\"comment\">//p3是行指针，用于指向数组长度为5的double型数组。</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"image/%E6%8C%87%E9%92%88%E8%AF%A6%E8%A7%A31/1667564963187.png\" alt=\"1667564963187\"></p>\n<p>一维数组名被解释为数组的第0个元素地址。</p>\n<p>对一维数组名取地址得到的是数组的地址，是行地址。</p>\n<h3 id=\"2）二维数组名是行地址\"><a href=\"#2）二维数组名是行地址\" class=\"headerlink\" title=\"2）二维数组名是行地址\"></a>2）二维数组名是行地址</h3><p><code>int bh[2][3] = &#123;&#123;11,12,13&#125;,&#123;21,22,23&#125;&#125;;</code></p>\n<p>bh 是二维数组名，该数组有2元素，每一个元素又是一个<code>&lt;mark&gt;</code>数组长度为3的整型数组<code>&lt;/mark&gt;</code>。</p>\n<p>bh被解释为<code>&lt;mark&gt;</code>数组长度为三的整型数组<code>&lt;/mark&gt;</code>类型的地址。</p>\n<p>如果存放bh的值，要用<code>&lt;mark&gt;</code>数组长度为3的整型数组<code>&lt;/mark&gt;</code>类型的指针。</p>\n<p>int (*p)[3] = bh</p>\n<h3 id=\"3-把二维数组传递给函数\"><a href=\"#3-把二维数组传递给函数\" class=\"headerlink\" title=\"3)把二维数组传递给函数\"></a>3)把二维数组传递给函数</h3><p>如果要把bh传给函数，函数的声明如下：</p>\n<p>void func(int (*p)[3],int len);</p>\n<p>void func(int p[][3],int len);</p>\n","site":{"data":{"link":{"YAMLclass":{"class_name":"友情链接","link_list":{"1":{"name":"小康博客","link":"https://www.antmoe.com","avatar":"https://img.antmoe.com/avatar.png","descr":"每天进步一点点"},"2":{"name":"test","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"test"}}},"class2":{"class_name":"链接无效","link_list":{"1":{"name":"test","link":"https://blog.xxx.com","avatar":"https://img.antmoe.com/avatar.png","descr":"test"},"2":{"name":"test","link":"https://www.axxxx.cn/","avatar":"https://img.antmoe.com/avatar.png","descr":"test"}}}}}},"cover":"https://cdn.staticaly.com/gh/chauity/images@master/347e24821bcd4fc5b513a53cbcaa0b3a (1).jpg","excerpt":"","more":"<h2 id=\"指针的基本概念\"><a href=\"#指针的基本概念\" class=\"headerlink\" title=\"指针的基本概念\"></a>指针的基本概念</h2><h3 id=\"1）变量的地址\"><a href=\"#1）变量的地址\" class=\"headerlink\" title=\"1）变量的地址\"></a>1）变量的地址</h3><p>变量是内存变量的简称，在C++中，系统会给变量分配一块内存，内存是有地址的。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">0x00000001</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">0x00000002</td>\n</tr>\n<tr>\n<td align=\"center\">0x00000003</td>\n</tr>\n<tr>\n<td align=\"center\">0x00000004</td>\n</tr>\n<tr>\n<td align=\"center\">0x00000005</td>\n</tr>\n<tr>\n<td align=\"center\">0x00000006</td>\n</tr>\n<tr>\n<td align=\"center\">0x00000007</td>\n</tr>\n<tr>\n<td align=\"center\">0x00000008</td>\n</tr>\n<tr>\n<td align=\"center\">0x00000009</td>\n</tr>\n<tr>\n<td align=\"center\">0x00000010</td>\n</tr>\n<tr>\n<td align=\"center\">0x0000000A</td>\n</tr>\n<tr>\n<td align=\"center\">0x0000000B</td>\n</tr>\n<tr>\n<td align=\"center\">……</td>\n</tr>\n<tr>\n<td align=\"center\">0xFFFFFFFF</td>\n</tr>\n</tbody></table>\n<p>C++用运算符&amp;获取变量在内存中的起始地址。</p>\n<p>语法：<code>&amp;变量名</code></p>\n<h3 id=\"2-指针变量\"><a href=\"#2-指针变量\" class=\"headerlink\" title=\"2)指针变量\"></a>2)指针变量</h3><p>指针变量简称指针，他是一种特殊的变量，专用于存放变量在内存中的<strong>起始地址</strong>。</p>\n<p>语法：<code>数据类型 *变量名;</code></p>\n<p>数据类型必须是合法的C++数据类型（int、char、double或其他自定义数据类型）。</p>\n<p>星号*与乘法中的星号是相同的，但是，在这个场景中，星号用于表示这个变量是指针。</p>\n<h3 id=\"3）对指针赋值\"><a href=\"#3）对指针赋值\" class=\"headerlink\" title=\"3）对指针赋值\"></a>3）对指针赋值</h3><p>不管是整型、浮点型、字符型，还是其他数据类型的变量，它的地址都是一个十六进制数。我们用整型指针存放整型变量的地址，用字符型指针存放字符型变量的地址，用浮点型指针存放浮点型变量的地址，用自定义数据类型指针存放自定义数据类型变量的地址。</p>\n<p>语法：<code>指针=&amp;变量名;</code></p>\n<h3 id=\"4-指针占用的内存\"><a href=\"#4-指针占用的内存\" class=\"headerlink\" title=\"4)指针占用的内存\"></a>4)指针占用的内存</h3><p>指针也是变量，是变量就要占用内存空间。</p>\n<p>在64位操作系统中，不管什么类型的指针，占用内存都是8字节。</p>\n<p>在C++中，指针是复合数据类型，复合数据类型是指基于其他类型而定义的数据类型，在程序中，int是整型变量，int *是整型指针类型，int *可以用于sizeof运算符，可以用于数据类型的强制转换，总的来说，把int *当成一种数据类型就对了。</p>\n<h2 id=\"使用指针\"><a href=\"#使用指针\" class=\"headerlink\" title=\"使用指针\"></a>使用指针</h2><p>声明变量后，在没有赋值之前，里面是乱七八糟的值，这时候不能使用指针。</p>\n<p>指针存放变量的地址，因此，指针名表示的是地址（就像变量名可以表示变量的值一样）。</p>\n<p><em>运算符被称为<strong>间接值</strong>或<strong>解除引用（解引用）</strong>，将它用于指针，可以的得到该地址的内存中存储的值，</em>也是乘法符号，C++根据上下文来确定所指的是乘法还是解引用。</p>\n<p>变量和指向变量的指针就像同一枚硬币的两面。</p>\n<p><code>int no = 38;</code></p>\n<p><code>int *ptr = &amp;no;</code></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/ZZQPHPGIT/images/20221025104337.png\"></p>\n<p>程序在存储数据的时候，必须跟踪三种基本属性：</p>\n<ul>\n<li>程序存储在哪里；</li>\n<li>数据是什么类型；</li>\n<li>数据的值是多少。</li>\n</ul>\n<p>用两种策略可以达到以上目的；</p>\n<p>声明一个普通变量，声明时指出数据类型和变量名（符号名），系统在内部跟踪该内存单元。</p>\n<p>声明一个指针变量，存储的值是地址，而不是值本身，程序直接访问该内存单元。</p>\n<h2 id=\"指针用于函数的参数\"><a href=\"#指针用于函数的参数\" class=\"headerlink\" title=\"指针用于函数的参数\"></a>指针用于函数的参数</h2><p>如果把函数的形参声明为指针，调用的时候把实参地址传进去，形参中存放的是实参的地址，在函数中</p>\n<p>通过解引用的方法直接操作内存中的数据，可以修改实数的值，这种方法被通俗的称为<strong>地址传递</strong>或<strong>传地址</strong>。</p>\n<p><strong>值传递</strong>：函数的形参是普通变量。</p>\n<p>传地址的意义如下：</p>\n<ul>\n<li>可以在函数中修改实参的值。</li>\n<li>减少内存拷贝，提升性能。</li>\n</ul>\n<h2 id=\"使用常量\"><a href=\"#使用常量\" class=\"headerlink\" title=\"使用常量\"></a>使用常量</h2><p>常量是程序中固定不变的数据。</p>\n<h3 id=\"1）宏常量\"><a href=\"#1）宏常量\" class=\"headerlink\" title=\"1）宏常量\"></a>1）宏常量</h3><p>一般在 main 函数的上面声明，用大写命名。</p>\n<p>语法：<code>#define 常量名 值</code></p>\n<h3 id=\"2）const修饰的变量\"><a href=\"#2）const修饰的变量\" class=\"headerlink\" title=\"2）const修饰的变量\"></a>2）const修饰的变量</h3><p>在程序的任何地方都可以声明。</p>\n<p>语法：<code>const 数据类型 常量名 = 值</code></p>\n<h3 id=\"3-常量的特点\"><a href=\"#3-常量的特点\" class=\"headerlink\" title=\"3)常量的特点\"></a>3)常量的特点</h3><p>程序中不允许改变常量的值，否则编译的时候会报错。</p>\n<h3 id=\"4）示例\"><a href=\"#4）示例\" class=\"headerlink\" title=\"4）示例\"></a>4）示例</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span>    <span class=\"comment\">//包含头文件</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MONTHS 12           <span class=\"comment\">//一年中的月份数</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> PI     3.14159      <span class=\"comment\">//圆周率</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;        <span class=\"comment\">//指定缺省的命名空间</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//main函数u，程序从这里开始执行，每个程序只能有一个 main 函数。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">const</span> days = <span class=\"number\">7</span>;        <span class=\"comment\">//一星期的天数</span></span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;一年有&quot;</span> &lt;&lt; MONTHS &lt;&lt; <span class=\"string\">&quot;个月&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"用const修饰指针\"><a href=\"#用const修饰指针\" class=\"headerlink\" title=\"用const修饰指针\"></a>用const修饰指针</h2><h3 id=\"1）常量指针\"><a href=\"#1）常量指针\" class=\"headerlink\" title=\"1）常量指针\"></a>1）常量指针</h3><p>语法：<code>const 数据类型 *变量名;</code></p>\n<p>不能通过解引用的方法修改内存地址中的值（用原始的变量名是可以修改的）。</p>\n<p>注意：</p>\n<ul>\n<li>指向的变量（对象）可以改变（之前是指向变量a的，后来可以改为指向变量b）。</li>\n<li>一般用于修饰函数的形参，表示不希望在函数里修改内存地址中的值。</li>\n<li>如果用于形参、虽然指向的对象可以改变，但那么做没有任何意义。</li>\n<li>如果形参的值不需要改变，建议加上const修饰，程序可读性更好。</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> a = <span class=\"number\">3</span>, b = <span class=\"number\">8</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span>* p = &amp;a;</span><br><span class=\"line\"><span class=\"comment\">//不能通过解引用赋值修改值，编译会报错 错误  C3892</span></span><br><span class=\"line\"><span class=\"comment\">//*p = 13;</span></span><br><span class=\"line\"><span class=\"comment\">//只能通过变量修改值</span></span><br><span class=\"line\">a = <span class=\"number\">13</span>;</span><br><span class=\"line\">cout &lt;&lt; <span class=\"string\">&quot;a=&quot;</span> &lt;&lt; a &lt;&lt; <span class=\"string\">&quot;,*p=&quot;</span> &lt;&lt; *p &lt;&lt; endl;</span><br><span class=\"line\">p = &amp;b;</span><br><span class=\"line\">cout &lt;&lt; <span class=\"string\">&quot;b=&quot;</span> &lt;&lt; b &lt;&lt; <span class=\"string\">&quot;,*p=&quot;</span> &lt;&lt; *p &lt;&lt; endl;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">int</span>* no,<span class=\"type\">const</span> string *str)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//参数加上const，解引用赋值,编译时 同样会报错</span></span><br><span class=\"line\">    <span class=\"comment\">//*no = 8;</span></span><br><span class=\"line\">    <span class=\"comment\">//*str = &quot;我有一只小小鸟.&quot;;</span></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;亲爱的&quot;</span> &lt;&lt; *no &lt;&lt; <span class=\"string\">&quot;号&quot;</span> &lt;&lt; *str &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-指针常量\"><a href=\"#2-指针常量\" class=\"headerlink\" title=\"2)指针常量\"></a>2)指针常量</h3><p>语法：<code>数据类型 *const 变量名;</code></p>\n<p>指向的变量（对象）不可改变。</p>\n<p>注意：</p>\n<ul>\n<li>在定义的同时必须初始化，否则没有意义。</li>\n<li>可以通过解引用的方法修改内存地址中的值。</li>\n<li>C++编译器把指针常量做了一些特别的处理，改投换面之后，有了一个新的名字，叫做引用。</li>\n</ul>\n<h3 id=\"3）常指针常量\"><a href=\"#3）常指针常量\" class=\"headerlink\" title=\"3）常指针常量\"></a>3）常指针常量</h3><p>语法：<code>const 数据类型 *const 变量名;</code></p>\n<p>指向的变量（对象）不可改变，不能通过解引用的方法修改内存地址中的值。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//常指针常量</span></span><br><span class=\"line\"><span class=\"type\">int</span> a = <span class=\"number\">3</span>,b = <span class=\"number\">8</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span>* <span class=\"type\">const</span> pa = &amp;a;</span><br><span class=\"line\"><span class=\"comment\">//既不能改变指针指向，也不能解引用改变值，下列两种写法都是错误的</span></span><br><span class=\"line\"><span class=\"comment\">//*pa = 13;</span></span><br><span class=\"line\"><span class=\"comment\">//pa = &amp;b;</span></span><br></pre></td></tr></table></figure>\n\n<p>常量指针：指针指向可以改，指针指向的值不可以改。</p>\n<p>指针常量：指针指向不可以改，指针的指向的值可以更改。</p>\n<p>常指针常量：指针指向不可以改，指针指向的值不可以更改。</p>\n<h2 id=\"void-关键字\"><a href=\"#void-关键字\" class=\"headerlink\" title=\"void 关键字\"></a>void 关键字</h2><p>在C++中，void表示为<strong>无类型</strong>，主要有三个用途：</p>\n<ul>\n<li><p>函数的返回值使用 <code>void</code> ，表示函数没有返回值。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">func</span> <span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">     <span class=\"comment\">//函数体代码</span></span><br><span class=\"line\">     <span class=\"keyword\">return</span>;   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>函数的参数填 <code>void</code> ，表示函数不需要参数（或者让参数列表空着）。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">func</span><span class=\"params\">( <span class=\"type\">void</span> )</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//函数体代码</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>函数的形参用 <code>void *</code>，表示接受任意数据类型的指针。</p>\n<p>注意：</p>\n<ul>\n<li>不能用 <code>void</code>声明变量，它不能代表一个真实的变量。</li>\n<li>不能对 <code>void *</code>指针直接解引用（需要转化为其他类型的指针）。</li>\n<li>把其他类型的指针赋值给 <code>void *</code>指针不需要转换。</li>\n<li>把 <code>void *</code>指针赋值给其他类型的指针需要转换。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"动态分配内存new和delete\"><a href=\"#动态分配内存new和delete\" class=\"headerlink\" title=\"动态分配内存new和delete\"></a>动态分配内存new和delete</h2><p>C++内存空间</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/ZZQPHPGIT/images/20221025192803.png\"></p>\n<p>使用堆区内存有四个步骤：</p>\n<p>1）声明一个指针；</p>\n<p>2）用new运算符向系统申请一块内存，让指针指向这块内存；</p>\n<p>3）通过对指针的解引用的方法，像使用变量一样使用这块内存；</p>\n<p>4）如果这块内存不用了，用delete运算符释放它；</p>\n<p>申请内存的语法：<code>new 数据类型(初始值);</code> //C++11支持 {}</p>\n<p>如果申请成功，返回一个地址；如果申请失败，返回一个空地址（暂时不考虑失败的情况）</p>\n<p>是否内存的语法：<code>delete 地址;</code></p>\n<p>注意：</p>\n<ul>\n<li>动态分配出来的内存没有变量名，只能通过指向它的指针来操作内存中的数据。</li>\n<li>如果动态分配的内存用不了，必须使用 <code>delete</code>释放它，否则可能用尽系统的内存。</li>\n<li>动态分配的内存的生命周期与程序相同，程序退出时，如果没有是否，系统将自动回收。</li>\n<li>就算指针的作用域已失效，所指向的内存也不会释放。</li>\n<li>用指针跟踪已分配的内存时，不能跟丢。</li>\n</ul>\n<h2 id=\"二级指针\"><a href=\"#二级指针\" class=\"headerlink\" title=\"二级指针\"></a>二级指针</h2><p><strong>指针</strong>是<strong>指针变量</strong>的简称，也是<strong>变量</strong>。是<strong>变量</strong>就有<strong>地址</strong>。</p>\n<p><strong>指针</strong>用于存放<strong>普通变量</strong>的<strong>地址</strong>。</p>\n<p><strong>二级指针</strong>用于存放<strong>指针变量</strong>的<strong>地址</strong>。</p>\n<p>声明<strong>二级指针</strong>的语法：<code>数据类型** 指针名;</code></p>\n<p>使用指针有两个目的：1）传递地址；2）存放动态分配的内存的地址。</p>\n<p>在函数中，如果传递普通变量的地址，形参用指针；<strong>传递指针的地址，形参用二级指针</strong>。</p>\n<h2 id=\"空指针\"><a href=\"#空指针\" class=\"headerlink\" title=\"空指针\"></a>空指针</h2><p>在C++和C中，用0或NULL都可以表示空指针。</p>\n<p>声明指针后，在赋值之前，让它指向空，表示没有任何地址。</p>\n<h3 id=\"1）使用空指针的后果\"><a href=\"#1）使用空指针的后果\" class=\"headerlink\" title=\"1）使用空指针的后果\"></a>1）使用空指针的后果</h3><p><strong>如果对空指针解引用，程序会崩溃。</strong></p>\n<p><strong>如果对空指针使用delete运算符，系统忽略该操作，不会出现异常。所以内存释放后，也应该把指针指向空。</strong></p>\n<p>为什么空指针访问会出现异常？</p>\n<p>NULL指针分配的分区：其范围是从 <code>0x00000000</code>到 <code>0x0000FFFF</code>。这段代码是空闲的，对于空闲的空间而言，没有相对应的物理存储器，与之相对应，所以对这段代码来说，任何读写操作都会引起异常的。空指针是程序无论在核实都没有物理存储器与之相对应的地址。为了保障“无论何时”这个条件，需要人为划分一个空指针的区域，固有上面NULL指针分区。</p>\n<h3 id=\"2）C-11的nullptr\"><a href=\"#2）C-11的nullptr\" class=\"headerlink\" title=\"2）C++ 11的nullptr\"></a>2）C++ 11的nullptr</h3><p>用0和NULL表示空指针会产生歧义，C++11建议用 <code>nullptr</code>表示空指针，也就是 <code>（void *）0</code>。</p>\n<p>NULL在C++中就是0，这是因为在C++中 <code>void *</code> 类型是不允许隐式转换成其他类型的，所以之前C++中用0来代表空指针，但是在重载整型的情况下，会出现上述的问题。所以C++11加入了nullptr，可以保证在任何情况下都代表空指针，而不会出现上述的情况，因此，建议用nullptr替代NULL，而NULL就当做0使用。</p>\n<p><strong>注意：在Linux平台下，如果使用nullptr，编译要加 <code>-std=c++11</code>参数</strong></p>\n<h2 id=\"野指针\"><a href=\"#野指针\" class=\"headerlink\" title=\"野指针\"></a>野指针</h2><p>野指针就是指针指向的不是一个有效（合法）的地址。</p>\n<p>在程序中，如果访问野指针，<strong>可能</strong>会造成程序的崩溃。</p>\n<p>出现野指针的情况主要有三种：</p>\n<ul>\n<li>1）指针在定义的时候，如果没有初始化，它的值是不确定的（乱指一气）。</li>\n<li>2）如果指针指向了动态分配的内存，内存被释放后，指针不会置空，但是，指向的指针已失效。</li>\n<li>3）指针指向的变量超越变量的作用域（变量的内存空间已被回收），作用域指的是是局部变量还是全局变量。</li>\n</ul>\n<p>规避方法：</p>\n<ul>\n<li><p>1）指针在定义的时候，如果没地方指，就初始化为nullptr。</p>\n</li>\n<li><p>2）动态分配的内存释放后，将其置位nullptr。</p>\n</li>\n<li><p>3）函数不要返回局部变量的地址。</p>\n<p>注意：野指针的危害比空指针要大很多，如果访问野指针，<strong>可能</strong>会造成程序的崩溃。是可能，表示一定，程序的表现是<strong>不稳定</strong>，增加了调试的难度。</p>\n</li>\n</ul>\n<h2 id=\"一维数组与指针\"><a href=\"#一维数组与指针\" class=\"headerlink\" title=\"一维数组与指针\"></a>一维数组与指针</h2><h3 id=\"1-指针的算术\"><a href=\"#1-指针的算术\" class=\"headerlink\" title=\"1) 指针的算术\"></a>1) 指针的算术</h3><ul>\n<li>将一个整型变量加1后，其值将增加1。</li>\n<li>但是，将指针变量（地址的值）加1后，增加的量等于它指向的数据类型的字节数。</li>\n</ul>\n<h3 id=\"2-数组的地址\"><a href=\"#2-数组的地址\" class=\"headerlink\" title=\"2) 数组的地址\"></a>2) 数组的地址</h3><ul>\n<li>a) 数组在内存中占用的空间是连续的。</li>\n<li>b) C++数组名解释为数组的第0个元素的地址。</li>\n<li>c) 数组第0个元素的地址和数组首地址的取值是相同的。</li>\n<li>d) 数组第n个元素的地址是：<code>数组首地址+n</code></li>\n<li>e) C++编译器把 <code>数组名[下标]</code>解释为 <code>*(数组首地址+下标)</code></li>\n</ul>\n<h3 id=\"3-数组的本质\"><a href=\"#3-数组的本质\" class=\"headerlink\" title=\"3) 数组的本质\"></a>3) 数组的本质</h3><ul>\n<li>数组是占用连续空间的一块内存，数组名被解释为数组第0个元素的地址。C++操作内存有两种方法：数组解释法和指针表示法，他们说等价的。</li>\n</ul>\n<h3 id=\"4）数组名不一定会被解释为地址\"><a href=\"#4）数组名不一定会被解释为地址\" class=\"headerlink\" title=\"4）数组名不一定会被解释为地址\"></a>4）数组名不一定会被解释为地址</h3><ul>\n<li>在多数情况下，C++将数组名解释成第0个元素的地址，但是，将sizeof运算符用于数组名，返回的是整个数组的内存空间的字节数。</li>\n<li>可以修改指针的值，但数组是常量，不可修改。</li>\n</ul>\n<h2 id=\"一维数组用于函数的参数\"><a href=\"#一维数组用于函数的参数\" class=\"headerlink\" title=\"一维数组用于函数的参数\"></a>一维数组用于函数的参数</h2><h3 id=\"1）指针的数组表示\"><a href=\"#1）指针的数组表示\" class=\"headerlink\" title=\"1）指针的数组表示\"></a>1）指针的数组表示</h3><ul>\n<li>在C++内部，用指针来处理数组。</li>\n<li>C++编译器把 <code>数组名[下标]</code>解释为 <code>*(数组首地址+下标)</code></li>\n<li>C++编译器把 <code>地址[下标]</code>解释为 <code>*(地址+下标)</code></li>\n</ul>\n<h3 id=\"2）一维数组用于函数的参数\"><a href=\"#2）一维数组用于函数的参数\" class=\"headerlink\" title=\"2）一维数组用于函数的参数\"></a>2）一维数组用于函数的参数</h3><ul>\n<li><p>一维数组用于函数的参数时，只能传数组的地址，并且必须把数组长度也传进去，除非数组中有最后一个元素的标志。</p>\n</li>\n<li><p>书写的方法有两种：</p>\n<p><code>void func(int* arr,int len)</code></p>\n</li>\n</ul>\n<p>        <code>void func(int* arr[],int len)</code></p>\n<ul>\n<li><p>注意：</p>\n<p>在函数中，可以用数组表示法，也可以用指针表示法。</p>\n<p>在函数中，不要对指针名用sizeof运算符，由于64位操作系统指针大小是永远是8，并不是数组占用内存的大小。</p>\n</li>\n</ul>\n<h2 id=\"用-new-动态创建一维数组\"><a href=\"#用-new-动态创建一维数组\" class=\"headerlink\" title=\"用 new 动态创建一维数组\"></a>用 new 动态创建一维数组</h2><p>普通数组在栈上分配内存，栈很小；如果需要存放更多的元素，必须在堆上分配内存。</p>\n<p>动态创建一维数组的语法：<code>数据类型 *指针=new 数据类型[数组长度]</code>；</p>\n<p>释放一维数组的语法：<code>delete []指针;</code></p>\n<p>注意：</p>\n<ul>\n<li>动态创建的数组没有数组名，不能用 sizeof 运算符。</li>\n<li>可以用数组比色法和指针表示法两种方式使用动态创建的数组。</li>\n<li>必须使用<code>&lt;mark&gt;</code>delete[]<code>&lt;/mark&gt;</code>来释放内存（不能只用 <code>delete</code>）。</li>\n<li>不用用<code>&lt;mark&gt;</code>delete[]<code>&lt;/mark&gt;</code>来释放不是<code>&lt;mark&gt;</code>new[]<code>&lt;/mark&gt;</code>分配的内存。</li>\n<li>不要用<code>&lt;mark&gt;</code>delete[]<code>&lt;/mark&gt;</code>释放同一个内存块两次（否则等同于操作野指针）。</li>\n<li>对空指针用<code>&lt;mark&gt;</code>delete[]<code>&lt;/mark&gt;</code>是安全的（释放内存后，应该把指针置空nullptr）。</li>\n<li>声明普通数组的时候，数组长度可以用变量，相当于在栈上动态创建数组，并且不需要释放。</li>\n<li>如果内存不足，调用<code>&lt;mark&gt;</code>new<code>&lt;/mark&gt;</code>会产生异常，导致程序终止；如果在new关键字后面加（<code>&lt;mark&gt;</code>std::nothrow<code>&lt;/mark&gt;</code>）选项，则返回<code>&lt;mark&gt;</code>nullptr<code>&lt;/mark&gt;</code>，不会产生异常。</li>\n<li>为什么用<code>&lt;mark&gt;</code>delete[]<code>&lt;/mark&gt;</code>释放数组的时候，不需要指定数组的大小？因为系统会自动跟踪分配的内存。</li>\n</ul>\n<h2 id=\"二维数组用于函数的参数\"><a href=\"#二维数组用于函数的参数\" class=\"headerlink\" title=\"二维数组用于函数的参数\"></a>二维数组用于函数的参数</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span>* p;      <span class=\"comment\">//整型指针。</span></span><br><span class=\"line\"><span class=\"type\">int</span>* p[<span class=\"number\">3</span>];   <span class=\"comment\">//一维整型指针数组，元素是3个整型指针（p[0]、p[1]、p[2]）。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span>* <span class=\"title\">p</span><span class=\"params\">()</span></span>;    <span class=\"comment\">//函数p的返回值类型是整型的地址。</span></span><br><span class=\"line\"><span class=\"built_in\">int</span> (*p)(<span class=\"type\">int</span>, <span class=\"type\">int</span>);    <span class=\"comment\">//p是函数指针，指针指向的函数具有两个int型的形参。函数的返回值是整型。</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1）行指针（数组指针）\"><a href=\"#1）行指针（数组指针）\" class=\"headerlink\" title=\"1）行指针（数组指针）\"></a>1）行指针（数组指针）</h3><p>声明行指针的语法：<code>&lt;mark&gt;</code>数据类型 (*行指针名)[行的大小];   //行的大小即数组长度。<code>&lt;/mark&gt;</code></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//行指针的举例</span></span><br><span class=\"line\"><span class=\"built_in\">int</span>(*p1)[<span class=\"number\">3</span>]; <span class=\"comment\">//p1是行指针，用于指向数组长度为3的int型数组。</span></span><br><span class=\"line\"><span class=\"built_in\">int</span>(*p2)[<span class=\"number\">5</span>]; <span class=\"comment\">//p2是行指针，用于指向数组长度为5的int型数组。</span></span><br><span class=\"line\"><span class=\"built_in\">double</span>(*p3)[<span class=\"number\">5</span>]; <span class=\"comment\">//p3是行指针，用于指向数组长度为5的double型数组。</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"image/%E6%8C%87%E9%92%88%E8%AF%A6%E8%A7%A31/1667564963187.png\" alt=\"1667564963187\"></p>\n<p>一维数组名被解释为数组的第0个元素地址。</p>\n<p>对一维数组名取地址得到的是数组的地址，是行地址。</p>\n<h3 id=\"2）二维数组名是行地址\"><a href=\"#2）二维数组名是行地址\" class=\"headerlink\" title=\"2）二维数组名是行地址\"></a>2）二维数组名是行地址</h3><p><code>int bh[2][3] = &#123;&#123;11,12,13&#125;,&#123;21,22,23&#125;&#125;;</code></p>\n<p>bh 是二维数组名，该数组有2元素，每一个元素又是一个<code>&lt;mark&gt;</code>数组长度为3的整型数组<code>&lt;/mark&gt;</code>。</p>\n<p>bh被解释为<code>&lt;mark&gt;</code>数组长度为三的整型数组<code>&lt;/mark&gt;</code>类型的地址。</p>\n<p>如果存放bh的值，要用<code>&lt;mark&gt;</code>数组长度为3的整型数组<code>&lt;/mark&gt;</code>类型的指针。</p>\n<p>int (*p)[3] = bh</p>\n<h3 id=\"3-把二维数组传递给函数\"><a href=\"#3-把二维数组传递给函数\" class=\"headerlink\" title=\"3)把二维数组传递给函数\"></a>3)把二维数组传递给函数</h3><p>如果要把bh传给函数，函数的声明如下：</p>\n<p>void func(int (*p)[3],int len);</p>\n<p>void func(int p[][3],int len);</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cla6j4axz000330vs2ofheq4g","tag_id":"cla25rvax0006o8vsgo0u8ksr","_id":"cla6j4ay0000430vsa2akeniu"}],"Tag":[{"name":"关于指针的一些事儿","_id":"cla25rvax0006o8vsgo0u8ksr"}]}}