{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","path":"js/jquery-3.6.4.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/matery/source/css/bb.css","path":"css/bb.css","modified":0,"renderable":1},{"_id":"themes/matery/source/css/matery.css","path":"css/matery.css","modified":0,"renderable":1},{"_id":"themes/matery/source/css/gitment.css","path":"css/gitment.css","modified":0,"renderable":1},{"_id":"themes/matery/source/css/my.css","path":"css/my.css","modified":0,"renderable":1},{"_id":"themes/matery/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":0,"renderable":1},{"_id":"themes/matery/source/js/matery.js","path":"js/matery.js","modified":0,"renderable":1},{"_id":"themes/matery/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/background/canvas-nest.js","path":"libs/background/canvas-nest.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/background/ribbon-refresh.min.js","path":"libs/background/ribbon-refresh.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/background/ribbon.min.js","path":"libs/background/ribbon.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/background/ribbon-dynamic.js","path":"libs/background/ribbon-dynamic.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/codeBlock/codeBlockFuction.js","path":"libs/codeBlock/codeBlockFuction.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/codeBlock/codeCopy.js","path":"libs/codeBlock/codeCopy.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/codeBlock/codeLang.js","path":"libs/codeBlock/codeLang.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/codeBlock/codeShrink.js","path":"libs/codeBlock/codeShrink.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/jquery/jquery.min.js","path":"libs/jquery/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/instantpage/instantpage.js","path":"libs/instantpage/instantpage.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/materialize/materialize.min.css","path":"libs/materialize/materialize.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/materialize/materialize.min.js","path":"libs/materialize/materialize.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/minivaline/MiniValine.js","path":"libs/minivaline/MiniValine.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prism/prism.css","path":"libs/prism/prism.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/reward/alipay.jpg","path":"medias/reward/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/reward/wechat.png","path":"medias/reward/wechat.png","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/css/all.css","path":"libs/awesome/css/all.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-brands-400.eot","path":"libs/awesome/webfonts/fa-brands-400.eot","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-brands-400.ttf","path":"libs/awesome/webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-brands-400.svg","path":"libs/awesome/webfonts/fa-brands-400.svg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-brands-400.woff","path":"libs/awesome/webfonts/fa-brands-400.woff","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-brands-400.woff2","path":"libs/awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-regular-400.eot","path":"libs/awesome/webfonts/fa-regular-400.eot","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-regular-400.svg","path":"libs/awesome/webfonts/fa-regular-400.svg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-regular-400.woff2","path":"libs/awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-regular-400.ttf","path":"libs/awesome/webfonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-regular-400.woff","path":"libs/awesome/webfonts/fa-regular-400.woff","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-solid-900.eot","path":"libs/awesome/webfonts/fa-solid-900.eot","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-solid-900.svg","path":"libs/awesome/webfonts/fa-solid-900.svg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-solid-900.woff","path":"libs/awesome/webfonts/fa-solid-900.woff","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-solid-900.ttf","path":"libs/awesome/webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-solid-900.woff2","path":"libs/awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.eot","path":"libs/lightGallery/fonts/lg.eot","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/404.md","hash":"61b0c5512952267a03242c4ab1157934dfe56b4d","modified":1705458225873},{"_id":"source/CNAME","hash":"fc9c008929f09df288928633e0feec1bfc6c1f97","modified":1703817246836},{"_id":"source/_posts/Win11繁简体转化.md","hash":"f16713ba632b48c55a5fa31fc0dc8c0d39f921cf","modified":1704871351053},{"_id":"source/_posts/c++指针.md","hash":"10def5f0192e51ce0f262778fa8f5d0b2a7030c5","modified":1704871351059},{"_id":"source/_posts/cdn图床.md","hash":"ccbb64ec597b4232f3da2351a01e64c1171529a7","modified":1704679937026},{"_id":"source/_posts/冒泡排序.md","hash":"e425b9a45d062a83941ea706da7fb232d9c63d4c","modified":1704871351055},{"_id":"source/_posts/建站.md","hash":"ce29a47695d1351a190dd9fe0be30a53a57aebe7","modified":1705459892942},{"_id":"source/_posts/单链表.md","hash":"3422dbcdbad609dd30dd65e0a53656f8ebfdbe85","modified":1705459185614},{"_id":"source/_posts/网络编程.md","hash":"7dd32a6dcba46e7f4935e9aef0d9be68578c43e6","modified":1704871351055},{"_id":"source/_posts/网站加速.md","hash":"7aa7602a833765fdc80ccf18e6701ebd55ef68d1","modified":1705459832011},{"_id":"source/about/index.md","hash":"9e763b15c802fead2318fa1003f88aed5d8b2d55","modified":1704276069054},{"_id":"source/categories/index.md","hash":"9b8c6dc756a64ad87d9a70b99e896c69a27206a4","modified":1704276109731},{"_id":"source/contact/index.md","hash":"5d6712c8380c58c0182952d924051634324a9403","modified":1704276129861},{"_id":"source/_posts/部署域名丢失.md","hash":"7da97a2b732eab1cdae6c5bbd4cc69c60f4f3ab0","modified":1704871351055},{"_id":"source/_posts/封装函数.md","hash":"af4bf054e53e8dcd4913f470beb629357a524d27","modified":1704264432874},{"_id":"source/friends/index.md","hash":"161e81c46ce483813e9f11f859b7000c0790a383","modified":1704276150722},{"_id":"source/tags/index.md","hash":"7ffec1b84bbf016d6ed17deb3be5ca77467be1d1","modified":1704277753584},{"_id":"source/goodpagers/index.md","hash":"702b3ff2a028c5fc24fb6464e2f1e8daef04e749","modified":1704276178172},{"_id":"node_modules/hexo-theme-landscape/package.json","hash":"4bf95d52f77edf811f23f6d264a7493311a8d078","modified":1705458068556},{"_id":"node_modules/hexo-theme-landscape/languages/de-DE.yml","hash":"d29d1c4256b7ed9df42f511c2ff0a23ad5fd6c1f","modified":1705458068713},{"_id":"node_modules/hexo-theme-landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1705458067667},{"_id":"node_modules/hexo-theme-landscape/_config.yml","hash":"b608c1f1322760dce9805285a602a95832730a2e","modified":1705458068708},{"_id":"node_modules/hexo-theme-landscape/README.md","hash":"1a9b279e6dd29fd19245f913f0c4a316ffaa62db","modified":1705458068564},{"_id":"node_modules/hexo-theme-landscape/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1705458068723},{"_id":"node_modules/hexo-theme-landscape/languages/en-GB.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1705458068727},{"_id":"node_modules/hexo-theme-landscape/languages/en-US.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1705458068731},{"_id":"node_modules/hexo-theme-landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1705458068718},{"_id":"node_modules/hexo-theme-landscape/languages/es-ES.yml","hash":"7008a8fc91f18d2a735864817b8ebda30c7a2c66","modified":1705458068744},{"_id":"node_modules/hexo-theme-landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1705458068749},{"_id":"node_modules/hexo-theme-landscape/languages/en.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1705458068736},{"_id":"node_modules/hexo-theme-landscape/languages/fr-FR.yml","hash":"8d09dbdab00a30a2870b56f7c0a7ca7deafa7b88","modified":1705458068753},{"_id":"node_modules/hexo-theme-landscape/languages/hu-HU.yml","hash":"712d18664898fa21ba38d4973e90ef41a324ea25","modified":1705458068769},{"_id":"node_modules/hexo-theme-landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1705458068763},{"_id":"node_modules/hexo-theme-landscape/languages/hu.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":1705458068773},{"_id":"node_modules/hexo-theme-landscape/languages/it-IT.yml","hash":"2cb6dc2fab9bd2dbe1c8bb869a9e8bf85a564fdd","modified":1705458068775},{"_id":"node_modules/hexo-theme-landscape/languages/ja-JP.yml","hash":"08481267e0c112e1f6855620f2837ec4c4a98bbd","modified":1705458068781},{"_id":"node_modules/hexo-theme-landscape/languages/it.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":1705458068778},{"_id":"node_modules/hexo-theme-landscape/languages/ko-KR.yml","hash":"19209ad8f9d4057e8df808937f950eb265e1db69","modified":1705458068788},{"_id":"node_modules/hexo-theme-landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1705458068785},{"_id":"node_modules/hexo-theme-landscape/languages/mn-MN.yml","hash":"b9e5f3e7c0c2f779cf2cfded6db847b5941637ca","modified":1705458068796},{"_id":"node_modules/hexo-theme-landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1705458068791},{"_id":"node_modules/hexo-theme-landscape/languages/mn.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":1705458068798},{"_id":"node_modules/hexo-theme-landscape/languages/nl-NL.yml","hash":"5ebbc30021f05d99938f96dfff280392df7f91f0","modified":1705458068804},{"_id":"node_modules/hexo-theme-landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1705458068807},{"_id":"node_modules/hexo-theme-landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1705458068810},{"_id":"node_modules/hexo-theme-landscape/languages/pt-PT.yml","hash":"0f852b6b228e6ea59aa3540574bb89b233f2a098","modified":1705458068813},{"_id":"node_modules/hexo-theme-landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1705458068816},{"_id":"node_modules/hexo-theme-landscape/languages/ru-RU.yml","hash":"360d11a28bb768afb1dd15f63fa7fd3a8cc547ee","modified":1705458068819},{"_id":"node_modules/hexo-theme-landscape/languages/th-TH.yml","hash":"ebfdba9bc4842c829473c1e6e4544344f182724d","modified":1705458068826},{"_id":"node_modules/hexo-theme-landscape/languages/th.yml","hash":"84a55b00aa01f03982be294e43c33a20e6d32862","modified":1705458068829},{"_id":"node_modules/hexo-theme-landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1705458068823},{"_id":"node_modules/hexo-theme-landscape/languages/tr.yml","hash":"a1cdbfa17682d7a971de8ab8588bf57c74224b5b","modified":1705458068833},{"_id":"node_modules/hexo-theme-landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1705458068838},{"_id":"node_modules/hexo-theme-landscape/languages/zh-CN.yml","hash":"1efd95774f401c80193eac6ee3f1794bfe93dc5a","modified":1705458068836},{"_id":"node_modules/hexo-theme-landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1705458068115},{"_id":"node_modules/hexo-theme-landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1705458068210},{"_id":"node_modules/hexo-theme-landscape/scripts/fancybox.js","hash":"c857d7a5e4a5d71c743a009c5932bf84229db428","modified":1705458068497},{"_id":"node_modules/hexo-theme-landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1705458068321},{"_id":"node_modules/hexo-theme-landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1705458068363},{"_id":"node_modules/hexo-theme-landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1705458068370},{"_id":"node_modules/hexo-theme-landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1705458068410},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1705458067951},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/footer.ejs","hash":"3656eb692254346671abc03cb3ba1459829e0dce","modified":1705458068242},{"_id":"node_modules/hexo-theme-landscape/layout/layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":1705458068333},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/after-footer.ejs","hash":"377d257d5d16e0158a4405c72401517b074fd7ff","modified":1705458067890},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":1705458068275},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive.ejs","hash":"7cb70a7a54f8c7ae49b10d1f37c0a9b74eab8826","modified":1705458068006},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/article.ejs","hash":"56597e951203dd662a6d2c817c7c4f1c920d4a25","modified":1705458068143},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":1705458068287},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1705458068343},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/header.ejs","hash":"6a5033d189554c9a6d42e2ef7952ae5c9742648e","modified":1705458068312},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/head.ejs","hash":"f05bced793b0314d4f2ef0c993b3a51d0b7d203a","modified":1705458068300},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1705458068385},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1705458068068},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1705458068193},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1705458068418},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/recent_posts.ejs","hash":"60c4b012dcc656438ff59997e60367e5a21ab746","modified":1705458068378},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1705458068403},{"_id":"node_modules/hexo-theme-landscape/source/css/_variables.styl","hash":"ca28281423ae57d76b6c1eb91cd845fd4e518bd6","modified":1705458068583},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","hash":"e55a1d92954ed20f6887f92dc727bb995a010a43","modified":1705458068699},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1705458067761},{"_id":"node_modules/hexo-theme-landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1705458068575},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1705458068173},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1705458068547},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/date.ejs","hash":"f1458584b679545830b75bef2526e2f3eb931045","modified":1705458068227},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1705458068352},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1705458068258},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/title.ejs","hash":"4d7e62574ddf46de9b41605fe3140d77b5ddb26d","modified":1705458068426},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1705458068595},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1705458068395},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/article.styl","hash":"2d1f6f79ebf9cb55ebdb3865a2474437eb2b37c6","modified":1705458068604},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1705458068619},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1705458068611},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/header.styl","hash":"268d2989acb06e2ddd06cc36a6918c6cd865476b","modified":1705458068631},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1705458068650},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/highlight.styl","hash":"9cc3b2927d814f2f6e8e188f9d3657b94f4c6ef3","modified":1705458068637},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1705458068654},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1705458068678},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1705458068669},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1705458068537},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1705458068521},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1705458068626},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1705458068644},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1705458068487},{"_id":"public/contact/index.html","hash":"592d7a3af6236ebdf9361b3c8edac9138198becc","modified":1705460093383},{"_id":"public/404.html","hash":"6b38cfb195e0a5d8a21945da5f865f8a8e9af743","modified":1705460336335},{"_id":"public/about/index.html","hash":"e79421ffa188658822eaab024fd890d1809de3b2","modified":1705460093383},{"_id":"public/categories/index.html","hash":"b3edd35a00ed26147e1dc67edece3f2bb109959f","modified":1705460093383},{"_id":"public/friends/index.html","hash":"a317799dae3c94a43feabe6c14b43579bc21b876","modified":1705460093383},{"_id":"public/tags/index.html","hash":"35885d547ee7518bd7eaf6ae54e5f6047c1cf718","modified":1705460093383},{"_id":"public/goodpagers/index.html","hash":"dadd1960536f19a9b239eb7fe5048d244ce99448","modified":1705460336335},{"_id":"public/2024/01/05/cdn图床/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1705458338736},{"_id":"public/2023/12/29/部署域名丢失/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1705458338736},{"_id":"public/2022/11/03/网站加速/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1705458338736},{"_id":"public/2022/11/03/Win11繁简体转化/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1705458338736},{"_id":"public/archives/index.html","hash":"0bd50fd7a5452aa6af3f17e878cb1c07e256752f","modified":1705460093383},{"_id":"public/archives/2022/index.html","hash":"f967fde8e313233e60d57391d9c96de0970c59fe","modified":1705460093383},{"_id":"public/archives/2022/12/index.html","hash":"517f7a4728d44d22c263731bda78e87b96040a69","modified":1705460093383},{"_id":"public/archives/2022/11/index.html","hash":"4af79117457d6ceafb90daf4b81ab3853ac1839d","modified":1705460093383},{"_id":"public/archives/2023/index.html","hash":"911dbd5358d1a5de1bc40655d858dd35e29f25be","modified":1705460093383},{"_id":"public/archives/2023/12/index.html","hash":"3f15a8548908e4bd4fa43d82bc5643f57d2425d9","modified":1705460093383},{"_id":"public/archives/2024/index.html","hash":"281f7a2b3d2e8e82e59498eb6a5641a31ad92193","modified":1705460093383},{"_id":"public/archives/2024/01/index.html","hash":"f79e428a664ff2343337996f26b27932a122b476","modified":1705460093383},{"_id":"public/categories/win11-繁体输出/index.html","hash":"474d1ddf00ef3d589c87bf456eba7ccaf096cf49","modified":1705460093383},{"_id":"public/categories/jsDilivr-pic/index.html","hash":"dbf2eeb90bee9b80f2b90a2ca60e87ee0c83e6d6","modified":1705460093383},{"_id":"public/categories/网站加速/index.html","hash":"9f4320e6a5152e51cc487fe653eb34d73b59d506","modified":1705460093383},{"_id":"public/tags/繁体输出-win11/index.html","hash":"643114385ad54c5c9b56e09dcfa25dab9f6a25a2","modified":1705460093383},{"_id":"public/tags/C语言-指针/index.html","hash":"b4ab1fde933428eb4d881095838532a087e9d3b0","modified":1705460093383},{"_id":"public/tags/冒泡排序/index.html","hash":"c2f38b85e765671b2e06ad80c0462b65b0162819","modified":1705460093383},{"_id":"public/tags/build-the-net/index.html","hash":"bc538730eadde0a76047e2aeddd6b49da8fc3760","modified":1705460093383},{"_id":"public/tags/图床-cdn-picgo/index.html","hash":"3aef6c94899f5182ba2a1ab42f0df5796066c952","modified":1705460093383},{"_id":"public/tags/list-link-C语言/index.html","hash":"2dab21a70d0fd45e3d8184a5de062e5dc15f4f79","modified":1705460093383},{"_id":"public/tags/网站加速/index.html","hash":"4080eb0911e2c1bdc18f2a58c4792e8309c3a406","modified":1705460093383},{"_id":"public/tags/socket-c/index.html","hash":"ddd41cbab8a1b8d60c912c15cb391ef7e0da2e04","modified":1705460093383},{"_id":"public/tags/C语言-库函数/index.html","hash":"5849451f99ba944652d6e2da6527c2854bb1a5ee","modified":1705460093383},{"_id":"public/tags/DNS-LOSS/index.html","hash":"ed40966bc98f0c355b53a378d951ff72ed31cbef","modified":1705460093383},{"_id":"public/2024/01/17/网络编程/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1705458338736},{"_id":"public/2023/12/28/建站/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1705458338736},{"_id":"public/2022/12/26/单链表/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1705458338736},{"_id":"public/2022/12/22/封装函数/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1705458338736},{"_id":"public/2022/11/09/冒泡排序/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1705458338736},{"_id":"public/2022/11/03/c++指针/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1705458338736},{"_id":"public/index.html","hash":"aa4894b9981af7569f454858ecdb6d27ac81fb8e","modified":1705460093383},{"_id":"public/CNAME","hash":"fc9c008929f09df288928633e0feec1bfc6c1f97","modified":1705458281479},{"_id":"public/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1705458281479},{"_id":"public/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1705458281479},{"_id":"public/css/style.css","hash":"ddb3792605d744ab3d9f0a649c82b62e9b16daa6","modified":1705458281479},{"_id":"public/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1705458281479},{"_id":"public/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1705458281479},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1705458281479},{"_id":"themes/matery/.gitignore","hash":"727607929a51db7ea10968f547c26041eee9cfff","modified":1606456707000},{"_id":"themes/matery/CHANGELOG.md","hash":"084ec8b110a20170d08a0aa5fd8accf601051835","modified":1606456707000},{"_id":"themes/matery/_config.yml","hash":"0e982033d75d54768760ae2707db0e68171a1bdc","modified":1704876579843},{"_id":"themes/matery/LICENSE","hash":"7df059597099bb7dcf25d2a9aedfaf4465f72d8d","modified":1606456707000},{"_id":"themes/matery/README.md","hash":"0366f3d50b18d095b0581e7b5974e3283d693884","modified":1606456707000},{"_id":"themes/matery/languages/zh-CN.yml","hash":"a957b05f70265a86a87d922e18488571809d2472","modified":1606456707000},{"_id":"themes/matery/languages/default.yml","hash":"54ccc01b097c5bf6820f0edfcece1a87b78ab32d","modified":1606456707000},{"_id":"themes/matery/README_CN.md","hash":"089de96e2165ea2a8a3adf38ebda85b65e7f716e","modified":1606456707000},{"_id":"themes/matery/languages/zh-HK.yml","hash":"ae34ac0e175c3037675722e436637efbceea32f0","modified":1606456707000},{"_id":"themes/matery/layout/about.ejs","hash":"41849f9300b8dc47048333fcf4a897dd8a2a13ca","modified":1606456707000},{"_id":"themes/matery/layout/404.ejs","hash":"9c8ca67377211e5d60fdde272a975faa9a91a22a","modified":1606456707000},{"_id":"themes/matery/layout/bb.ejs","hash":"21959d702f17a3d98b716daf44c8b5eecd59c7c5","modified":1606456707000},{"_id":"themes/matery/layout/categories.ejs","hash":"8e54665cc25d7c333da7d9f312987190be6215da","modified":1606456707000},{"_id":"themes/matery/layout/archive.ejs","hash":"cdac701de8370f9f3794a0eed4165983993a1ca7","modified":1606456707000},{"_id":"themes/matery/layout/category.ejs","hash":"00019bca11fb46477f22017cb1f5ad8444da0580","modified":1606456707000},{"_id":"themes/matery/layout/friends.ejs","hash":"92892bab5578ccf758ce57e19fca08be80d0d5b9","modified":1606456707000},{"_id":"themes/matery/layout/post.ejs","hash":"90b5a4c1f70e4756db569c15a7c6cad0c77c4500","modified":1606456707000},{"_id":"themes/matery/layout/index.ejs","hash":"4dc6f08e7709cc04e886be72dbf0d06469f0effc","modified":1606456707000},{"_id":"themes/matery/layout/tags.ejs","hash":"cf9517aa6a0111355121f44615d6923e312283c7","modified":1606456707000},{"_id":"themes/matery/source/favicon.png","hash":"b7967b967bd70f696b184575d32387f101a42c4b","modified":1704333450334},{"_id":"themes/matery/layout/tag.ejs","hash":"85a4b05bd8a6ad0f17ff2e97dae56949b379c204","modified":1606456707000},{"_id":"themes/matery/layout/_partial/back-top.ejs","hash":"47ee36a042bb6d52bbe1d0f329637e8ffcf1d0aa","modified":1606456707000},{"_id":"themes/matery/layout/_partial/background.ejs","hash":"aef6edeeb11209831a11d8c7f5d59992e2573335","modified":1606456707000},{"_id":"themes/matery/layout/contact.ejs","hash":"19d62e521c4253496db559478db5164ddfd2480e","modified":1606456707000},{"_id":"themes/matery/layout/_partial/bg-cover.ejs","hash":"02191109712f61c0e487b8f0b8466597181a9004","modified":1606456707000},{"_id":"themes/matery/layout/_partial/baidu-push.ejs","hash":"2cebcc5ea3614d7f76ec36670e68050cbe611202","modified":1606456707000},{"_id":"themes/matery/layout/_partial/baidu-analytics.ejs","hash":"3bbcdb474ca1dcad514bdc4b7763e17c55df04fd","modified":1606456707000},{"_id":"themes/matery/layout/layout.ejs","hash":"323b8e3bdbc17c8465d3295bec88bfbbe673f535","modified":1704529537013},{"_id":"themes/matery/layout/_partial/changyan.ejs","hash":"cd919d31564e118c2ee8d5cbfb7d51ee6da15d82","modified":1606456707000},{"_id":"themes/matery/layout/_partial/disqus.ejs","hash":"b2dc2c8b5ed56815e55cc2ea54a6dc4eeba2375d","modified":1606456707000},{"_id":"themes/matery/layout/_partial/gitalk.ejs","hash":"2aa8fbb04b046fa7679092a48372d7e036835dff","modified":1606456707000},{"_id":"themes/matery/layout/_partial/bg-cover-content.ejs","hash":"b783e03ae121ac0a9f3f6217587fc9df72cc0261","modified":1704876705823},{"_id":"themes/matery/layout/_partial/github-link.ejs","hash":"3aeb581bd78ab8e15b858e4c44c03bcf92f20b9e","modified":1606456707000},{"_id":"themes/matery/layout/_partial/footer.ejs","hash":"3be24e4c370671eda53bdfd99fb748f4a22948ba","modified":1606456707000},{"_id":"themes/matery/layout/_partial/gitment.ejs","hash":"90f6218512ef2eab63ada7ad2fc766ae635a2297","modified":1606456707000},{"_id":"themes/matery/layout/_partial/google-analytics.ejs","hash":"5f4992205617da5f8cc5863c62b5ec46e414e2fb","modified":1606456707000},{"_id":"themes/matery/layout/_partial/livere.ejs","hash":"9c3401b42ea7f26410a5593bae93ada7e57b43be","modified":1606456707000},{"_id":"themes/matery/layout/_partial/header.ejs","hash":"59e38c70f3d8e7165e686e5e84a627835f4321b0","modified":1606456707000},{"_id":"themes/matery/layout/_partial/head.ejs","hash":"f8438ac80df005934a330b029de292d26f0b6ecb","modified":1606456707000},{"_id":"themes/matery/layout/_partial/loading.ejs","hash":"9b8b95c3bac91ace212d8b20cf32b6729b77be22","modified":1704532371438},{"_id":"themes/matery/layout/_partial/minivaline.ejs","hash":"5f09386aece8f9cf31f6059bbde79cd6c5171493","modified":1606456707000},{"_id":"themes/matery/layout/_partial/paging.ejs","hash":"e2df12cf92a82b1a7a7add2eac1db1d954bc5511","modified":1606456707000},{"_id":"themes/matery/layout/_partial/post-cover.ejs","hash":"d1c873c5de54498c722e155aadb8c0ec39485dfa","modified":1606456707000},{"_id":"themes/matery/layout/_partial/navigation.ejs","hash":"78b70ff24b3039c871331ebec114b936c1756cc8","modified":1606456707000},{"_id":"themes/matery/layout/_partial/post-detail-toc.ejs","hash":"fd39001567ebbd1f253bea3b6ee49f45154fe64a","modified":1704267105238},{"_id":"themes/matery/layout/_partial/index-cover.ejs","hash":"76b4a37e0364380b143fdf94bf1a5e6941564414","modified":1606456707000},{"_id":"themes/matery/layout/_partial/mobile-nav.ejs","hash":"cb0cb452be1cd1857ba600f04025b506f3b6fc79","modified":1606456707000},{"_id":"themes/matery/layout/_partial/post-statis.ejs","hash":"04889f9031743c6b081d02fa4027b0dbfcc45ecf","modified":1606456707000},{"_id":"themes/matery/layout/_partial/search.ejs","hash":"150529c9fb9aa8ddb42ec3e02645d301faa2503b","modified":1606456707000},{"_id":"themes/matery/layout/_partial/reward.ejs","hash":"ffc55bc7e73bc698bfc58d8e3780c336b83282cf","modified":1606456707000},{"_id":"themes/matery/layout/_partial/share.ejs","hash":"c941730a2471d6aab367cbb6e09ed08b56c83143","modified":1606456707000},{"_id":"themes/matery/layout/_partial/post-detail.ejs","hash":"880ebaf78a947631a38ad0b3d65201315845a264","modified":1606456707000},{"_id":"themes/matery/layout/_partial/reprint-statement.ejs","hash":"0ce3f9361f558b99cc2f059c5e50b0e2a152ae38","modified":1606456707000},{"_id":"themes/matery/layout/_partial/social-link.ejs","hash":"6f871bd3a70f720e4e451f1f4f625cbc6d8994a4","modified":1606456707000},{"_id":"themes/matery/layout/_partial/valine.ejs","hash":"0e4c0a6154aa34007849928ca88f05b6185b256e","modified":1606456707000},{"_id":"themes/matery/layout/_widget/artitalk.ejs","hash":"b14e486f12b9ac42a273b80e4d785fcb94cf04b2","modified":1606456707000},{"_id":"themes/matery/layout/_widget/dream.ejs","hash":"9a472ad5591100cdb65d0df9d01034163bd6dd9d","modified":1606456707000},{"_id":"themes/matery/layout/_widget/category-radar.ejs","hash":"1d8747fda89a0b2ca3c7008867cbfeecad0578a6","modified":1606456707000},{"_id":"themes/matery/layout/_widget/category-cloud.ejs","hash":"1b3df1009234c0112424b497b18b4ad8240b3bc7","modified":1606456707000},{"_id":"themes/matery/layout/_widget/my-projects.ejs","hash":"ef60b64021fa349b0048425d858dfcf6c906fede","modified":1606456707000},{"_id":"themes/matery/layout/_partial/prev-next.ejs","hash":"d7d6b759ca99984718917e65b468458b918c50f3","modified":1704277731955},{"_id":"themes/matery/layout/_widget/my-gallery.ejs","hash":"65a2d2f9722f84c7fd98f6bdf79087a14848ebd8","modified":1606456707000},{"_id":"themes/matery/layout/_widget/music.ejs","hash":"e9e3e327d5de9d7aeadbde32e1d558652d9e9195","modified":1606456707000},{"_id":"themes/matery/layout/_widget/post-calendar.ejs","hash":"48821e644bc73553d7c5c56d2e8ee111a70cd776","modified":1606456707000},{"_id":"themes/matery/layout/_widget/post-charts.ejs","hash":"ab5f986f428215941aeaa0c88aefd440c47d3bcf","modified":1606456707000},{"_id":"themes/matery/layout/_widget/my-skills.ejs","hash":"89a0092df72d23093128f2fbbdc8ca7f83ebcfd9","modified":1606456707000},{"_id":"themes/matery/layout/_widget/tag-cloud.ejs","hash":"fc42b72cddc231f7485cdc1fd6852b66be6add26","modified":1606456707000},{"_id":"themes/matery/layout/_widget/video.ejs","hash":"a0e002377af2a7f7e4da6d9a644de97adb035925","modified":1606456707000},{"_id":"themes/matery/source/css/bb.css","hash":"aa15633888c7cf9baea8bb48d796c68b57cf14bf","modified":1606456707000},{"_id":"themes/matery/source/css/matery.css","hash":"ca05e7055457e9ffe5ee54a99ce7752fa8f0b2fd","modified":1704794041107},{"_id":"themes/matery/layout/_widget/tag-wordcloud.ejs","hash":"487aacb2454d6bf0d21cdb07ddd1fd5ddbca9038","modified":1606456707000},{"_id":"themes/matery/source/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1606456707000},{"_id":"themes/matery/source/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1606456707000},{"_id":"themes/matery/source/css/my-gitalk.css","hash":"af18dd29e58642c18bab9b89541767b494c468dd","modified":1606456707000},{"_id":"themes/matery/source/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1606456707000},{"_id":"themes/matery/layout/_widget/recommend.ejs","hash":"8551137e94ca4e2e3b8b63d5626255884cb60cb5","modified":1606456707000},{"_id":"themes/matery/source/js/search.js","hash":"e1482406c58ea2a0eb178d7e4efb2c879cdddc80","modified":1606456707000},{"_id":"themes/matery/source/js/matery.js","hash":"b86de5fe3e9766b7ff80df12ea41c3a9e30825f7","modified":1606456707000},{"_id":"themes/matery/source/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1606456707000},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1606456707000},{"_id":"themes/matery/source/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1606456707000},{"_id":"themes/matery/source/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1606456707000},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1606456707000},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1606456707000},{"_id":"themes/matery/source/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1606456707000},{"_id":"themes/matery/source/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1606456707000},{"_id":"themes/matery/source/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1606456707000},{"_id":"themes/matery/source/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1606456707000},{"_id":"themes/matery/source/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1606456707000},{"_id":"themes/matery/source/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1606456707000},{"_id":"themes/matery/source/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1606456707000},{"_id":"themes/matery/source/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1606456707000},{"_id":"themes/matery/source/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1606456707000},{"_id":"themes/matery/source/libs/gitalk/gitalk.css","hash":"940ded3ea12c2fe1ab0820d2831ec405f3f1fe9f","modified":1606456707000},{"_id":"themes/matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1606456707000},{"_id":"themes/matery/source/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1606456707000},{"_id":"themes/matery/source/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1606456707000},{"_id":"themes/matery/source/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1606456707000},{"_id":"themes/matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1606456707000},{"_id":"themes/matery/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1606456707000},{"_id":"themes/matery/source/libs/prism/prism.css","hash":"62e5474893dece076534352f564ceabd6e088a5a","modified":1606456707000},{"_id":"themes/matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1606456707000},{"_id":"themes/matery/source/libs/tocbot/tocbot.css","hash":"9ab8ef576c9a57115194152e79cca79b0a41dd70","modified":1606456707000},{"_id":"themes/matery/source/libs/minivaline/MiniValine.js","hash":"fbb58c37e2c74f127ae0c566afa9b48889aab79f","modified":1606456707000},{"_id":"themes/matery/source/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1606456707000},{"_id":"themes/matery/source/medias/reward/alipay.jpg","hash":"4ebf53b80ea296447518a4f321490a22e784f956","modified":1704782175230},{"_id":"themes/matery/source/medias/reward/wechat.png","hash":"839b12ffc682f557f295d172e0eac1c0d9ce7da4","modified":1704782161604},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1606456707000},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f6f653b4ea8fc487bdb590d39d5a726258a55f40","modified":1606456707000},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-regular-400.ttf","hash":"0f4bd02942a54a6b3200d9078adff88c2812e751","modified":1606456707000},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1606456707000},{"_id":"themes/matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1606456707000},{"_id":"themes/matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1606456707000},{"_id":"themes/matery/source/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1606456707000},{"_id":"themes/matery/source/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1606456707000},{"_id":"themes/matery/source/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1606456707000},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1606456707000},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1606456707000},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.svg","hash":"9c6632aeec67d3e84a1434884aa801514ff8103b","modified":1606456707000},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1606456707000},{"_id":"themes/matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1606456707000},{"_id":"themes/matery/source/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1606456707000},{"_id":"themes/matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1606456707000},{"_id":"themes/matery/source/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1606456707000},{"_id":"themes/matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1606456707000},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1606456707000},{"_id":"themes/matery/source/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1606456707000},{"_id":"themes/matery/source/libs/jquery/jquery.min.js","hash":"2115753ca5fb7032aec498db7bb5dca624dbe6be","modified":1606456707000},{"_id":"themes/matery/source/libs/valine/Valine.min.js","hash":"6cbdbf91e1f046dd41267a5ff0691a1fccba99df","modified":1606456707000},{"_id":"themes/matery/source/libs/awesome/css/all.css","hash":"ecc41e32ad2696877a1656749841f3b5543bbe3d","modified":1606456707000},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1606456707000},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-brands-400.ttf","hash":"91cbeeaceb644a971241c08362898599d6d968ce","modified":1606456707000},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1606456707000},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-brands-400.woff2","hash":"a46bd47ff0a90b812aafafda587d095cdb844271","modified":1606456707000},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1606456707000},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-solid-900.woff2","hash":"9c081b88b106c6c04ecb895ba7ba7d3dcb3b55ac","modified":1606456707000},{"_id":"themes/matery/source/libs/gitalk/gitalk.min.js","hash":"8fefe38f28804f90116bdcb74a0875c9de9f3b7d","modified":1606456707000},{"_id":"themes/matery/source/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1606456707000},{"_id":"themes/matery/source/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1606456707000},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-regular-400.svg","hash":"3d3a49445343d80f3b553e3e3425b9a7bd49acaf","modified":1606456707000},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1606456707000},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-solid-900.ttf","hash":"9521ed12274c2cbc910cea77657116fcf6545da3","modified":1606456707000},{"_id":"themes/matery/source/libs/valine/av-min.js","hash":"541efb9edc1ce425cbe3897cfc25803211fe6a05","modified":1606456707000},{"_id":"themes/matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1606456707000},{"_id":"themes/matery/source/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1606456707000},{"_id":"themes/matery/source/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1606456707000},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-brands-400.svg","hash":"5e2d2a159294576bea69cc3360efb5ffe110ab2d","modified":1606456707000},{"_id":"themes/matery/source/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1606456707000},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-solid-900.svg","hash":"7da88b19e1486f8c968d3cf5ab3f194f01ea17fd","modified":1606456707000},{"_id":"public/favicon.png","hash":"b7967b967bd70f696b184575d32387f101a42c4b","modified":1705458338736},{"_id":"public/medias/reward/wechat.png","hash":"839b12ffc682f557f295d172e0eac1c0d9ce7da4","modified":1705458338736},{"_id":"public/medias/reward/alipay.jpg","hash":"4ebf53b80ea296447518a4f321490a22e784f956","modified":1705458338736},{"_id":"public/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1705458338736},{"_id":"public/libs/awesome/webfonts/fa-regular-400.ttf","hash":"0f4bd02942a54a6b3200d9078adff88c2812e751","modified":1705458338736},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1705458338736},{"_id":"public/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1705458338736},{"_id":"public/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1705458338736},{"_id":"public/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1705458338736},{"_id":"public/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1705458338736},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f6f653b4ea8fc487bdb590d39d5a726258a55f40","modified":1705458338736},{"_id":"public/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1705458338736},{"_id":"public/libs/lightGallery/fonts/lg.svg","hash":"9c6632aeec67d3e84a1434884aa801514ff8103b","modified":1705458338736},{"_id":"public/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1705458338736},{"_id":"public/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1705458338736},{"_id":"public/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1705458338736},{"_id":"public/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1705458338736},{"_id":"public/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1705458338736},{"_id":"public/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1705458338736},{"_id":"public/css/bb.css","hash":"aa15633888c7cf9baea8bb48d796c68b57cf14bf","modified":1705458338736},{"_id":"public/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1705458338736},{"_id":"public/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1705458338736},{"_id":"public/css/my-gitalk.css","hash":"af18dd29e58642c18bab9b89541767b494c468dd","modified":1705458338736},{"_id":"public/js/matery.js","hash":"b86de5fe3e9766b7ff80df12ea41c3a9e30825f7","modified":1705458338736},{"_id":"public/js/search.js","hash":"e1482406c58ea2a0eb178d7e4efb2c879cdddc80","modified":1705458338736},{"_id":"public/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1705458338736},{"_id":"public/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1705458338736},{"_id":"public/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1705458338736},{"_id":"public/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1705458338736},{"_id":"public/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1705458338736},{"_id":"public/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1705458338736},{"_id":"public/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1705458338736},{"_id":"public/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1705458338736},{"_id":"public/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1705458338736},{"_id":"public/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1705458338736},{"_id":"public/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1705458338736},{"_id":"public/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1705458338736},{"_id":"public/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1705458338736},{"_id":"public/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1705458338736},{"_id":"public/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1705458338736},{"_id":"public/libs/prism/prism.css","hash":"62e5474893dece076534352f564ceabd6e088a5a","modified":1705458338736},{"_id":"public/libs/tocbot/tocbot.css","hash":"9ab8ef576c9a57115194152e79cca79b0a41dd70","modified":1705458338736},{"_id":"public/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1705458338736},{"_id":"public/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1705458338736},{"_id":"public/css/matery.css","hash":"ca05e7055457e9ffe5ee54a99ce7752fa8f0b2fd","modified":1705458338736},{"_id":"public/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1705458338736},{"_id":"public/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1705458338736},{"_id":"public/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1705458338736},{"_id":"public/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1705458338736},{"_id":"public/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1705458338736},{"_id":"public/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1705458338736},{"_id":"public/libs/gitalk/gitalk.css","hash":"940ded3ea12c2fe1ab0820d2831ec405f3f1fe9f","modified":1705458338736},{"_id":"public/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1705458338736},{"_id":"public/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1705458338736},{"_id":"public/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1705458338736},{"_id":"public/libs/jquery/jquery.min.js","hash":"2115753ca5fb7032aec498db7bb5dca624dbe6be","modified":1705458338736},{"_id":"public/libs/gitalk/gitalk.min.js","hash":"8fefe38f28804f90116bdcb74a0875c9de9f3b7d","modified":1705458338736},{"_id":"public/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1705458338736},{"_id":"public/libs/minivaline/MiniValine.js","hash":"fbb58c37e2c74f127ae0c566afa9b48889aab79f","modified":1705458338736},{"_id":"public/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1705458338736},{"_id":"public/libs/valine/Valine.min.js","hash":"6cbdbf91e1f046dd41267a5ff0691a1fccba99df","modified":1705458338736},{"_id":"public/libs/valine/av-min.js","hash":"541efb9edc1ce425cbe3897cfc25803211fe6a05","modified":1705458338736},{"_id":"public/libs/awesome/webfonts/fa-brands-400.ttf","hash":"91cbeeaceb644a971241c08362898599d6d968ce","modified":1705458338736},{"_id":"public/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1705458338736},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1705458338736},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1705458338736},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff2","hash":"9c081b88b106c6c04ecb895ba7ba7d3dcb3b55ac","modified":1705458338736},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff2","hash":"a46bd47ff0a90b812aafafda587d095cdb844271","modified":1705458338736},{"_id":"public/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1705458338736},{"_id":"public/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1705458338736},{"_id":"public/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1705458338736},{"_id":"public/libs/awesome/css/all.css","hash":"ecc41e32ad2696877a1656749841f3b5543bbe3d","modified":1705458338736},{"_id":"public/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1705458338736},{"_id":"public/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1705458338736},{"_id":"public/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1705458338736},{"_id":"public/libs/awesome/webfonts/fa-regular-400.svg","hash":"3d3a49445343d80f3b553e3e3425b9a7bd49acaf","modified":1705458338736},{"_id":"public/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1705458338736},{"_id":"public/libs/awesome/webfonts/fa-solid-900.ttf","hash":"9521ed12274c2cbc910cea77657116fcf6545da3","modified":1705458338736},{"_id":"public/libs/awesome/webfonts/fa-brands-400.svg","hash":"5e2d2a159294576bea69cc3360efb5ffe110ab2d","modified":1705458338736},{"_id":"public/libs/awesome/webfonts/fa-solid-900.svg","hash":"7da88b19e1486f8c968d3cf5ab3f194f01ea17fd","modified":1705458338736},{"_id":"public/atom.xml","hash":"0b5b0899b707331d3563b279de20fbf61ca02cb6","modified":1705459914520},{"_id":"public/search.xml","hash":"49f3f1d15f3dd28843ed4dc22ead6789b81b8592","modified":1705459914520},{"_id":"public/2024/01/17/wang-luo-bian-cheng/index.html","hash":"a729766ea948ab05d1972ab173f11113f0769d9a","modified":1705458940099},{"_id":"public/2024/01/05/cdn-tu-chuang/index.html","hash":"61e2686174438329f88da84339df69678a980abf","modified":1705458940099},{"_id":"public/2023/12/29/bu-shu-yu-ming-diu-shi/index.html","hash":"fe9adaddddd6849ba1cad8f05e81544bba4b2978","modified":1705458940099},{"_id":"public/2023/12/28/jian-zhan/index.html","hash":"4baf5c4662cbf6c1183ccbc7ab10dc37fef7a138","modified":1705458940099},{"_id":"public/2022/12/26/dan-lian-biao/index.html","hash":"42e853fdfd8c4bb0f590cbd25adf864c8384757d","modified":1705458940099},{"_id":"public/2022/12/22/feng-zhuang-han-shu/index.html","hash":"0b4cf2c8410915c3f864bb031b13b59d06009e28","modified":1705458940099},{"_id":"public/2022/11/09/mou-pao-pai-xu/index.html","hash":"924e25d4b20c856f01c08dfffac100dc93824676","modified":1705458940099},{"_id":"public/2022/11/03/wang-zhan-jia-su/index.html","hash":"01d744f47fdddd725c28ffb6aee1e9950360c2a8","modified":1705458940099},{"_id":"public/2022/11/03/win11-fan-jian-ti-zhuan-hua/index.html","hash":"a57a9e5ccce95643efe4cfb37031a24e76aab504","modified":1705458940099},{"_id":"public/2022/11/03/c-zhi-zhen/index.html","hash":"bf4d8deefef0ba8d7b0952620bae963146402ca5","modified":1705458940099},{"_id":"public/20240117/wang-luo-bian-cheng/index.html","hash":"e08579dfb72dae4429f9dc18509c0067cc881ba8","modified":1705460336335},{"_id":"public/20240105/cdn-tu-chuang/index.html","hash":"e21a60a485506ca9a2d562d92b3d8b4af5c71faf","modified":1705460336335},{"_id":"public/20231229/bu-shu-yu-ming-diu-shi/index.html","hash":"ce4ae15fafb390792539d9a90984500e4d6d4d33","modified":1705460336335},{"_id":"public/20231228/jian-zhan/index.html","hash":"c929942d9d7ac0db3bb0ea646bac7bfa7b810c21","modified":1705460336335},{"_id":"public/20221226/dan-lian-biao/index.html","hash":"82eb4ae1f95e3312feab232ff0d8fe8483db8fe1","modified":1705460336335},{"_id":"public/20221222/feng-zhuang-han-shu/index.html","hash":"2ef6f881fb736418c62b9215dda42de398e541fd","modified":1705460336335},{"_id":"public/20221109/mou-pao-pai-xu/index.html","hash":"dc666cb560befe1cb4735b0e261d89840169bcbe","modified":1705460336335},{"_id":"public/20221103/wang-zhan-jia-su/index.html","hash":"ea289be1ffee440e83f52cf6d2392c5f5c095e24","modified":1705460336335},{"_id":"public/20221103/win11-fan-jian-ti-zhuan-hua/index.html","hash":"88721b855d7409bef04be6d9c4d23b7b442e65c2","modified":1705460336335},{"_id":"public/20221103/c-zhi-zhen/index.html","hash":"209d49aa4a5a87266f8451a4a12fa168b71aca6c","modified":1705460336335},{"_id":"public/archives/page/2/index.html","hash":"4786b4ac66da2c88850bf1f48f13a76245edd716","modified":1705460093383},{"_id":"public/page/2/index.html","hash":"6325e3a94e8d17f5e4dc751936890995a45922c6","modified":1705460093383}],"Category":[{"name":"win11, 繁体输出","_id":"clrh5tshh0007ccus6ssm0hon"},{"name":"jsDilivr, pic","_id":"clrh5tshp000hccus2ucaebk3"},{"name":"网站加速","_id":"clrh5tsht000occush5d37xk7"}],"Data":[],"Page":[{"layout":"source","title":"404","date":"2023-12-28T09:38:30.000Z","type":"404","description":"找不到您访问的页面 :(","_content":"\n","source":"404.md","raw":"---\nlayout: source\ntitle: 404\ndate: 2023-12-28 17:38:30\ntype: \"404\"\ndescription: \"找不到您访问的页面 :(\"\n---\n\n","updated":"2024-01-17T02:23:45.873Z","path":"404.html","comments":1,"_id":"clrh5tsh00000ccush67hcg7p","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"about","date":"2023-12-28T09:37:25.000Z","type":"about","layout":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2023-12-28 17:37:25\ntype: \"about\"\nlayout: \"about\"\n---\n","updated":"2024-01-03T10:01:09.054Z","path":"about/index.html","comments":1,"_id":"clrh5tsh50001ccus96w60c42","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2023-12-28T09:37:07.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2023-12-28 17:37:07\ntype: \"categories\"\nlayout: \"categories\"\n---","updated":"2024-01-03T10:01:49.731Z","path":"categories/index.html","comments":1,"_id":"clrh5tsh60002ccus77qc1l14","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"friends","date":"2023-12-28T09:37:36.000Z","types":"friends","layout":"friends","_content":"","source":"friends/index.md","raw":"---\ntitle: friends\ndate: 2023-12-28 17:37:36\ntypes: \"friends\"\nlayout: \"friends\"\n---\n","updated":"2024-01-03T10:02:30.722Z","path":"friends/index.html","comments":1,"_id":"clrh5tshc0003ccus3wve0myi","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"contact","date":"2023-12-28T09:37:32.000Z","tags":"contact","layout":"contact","_content":"","source":"contact/index.md","raw":"---\ntitle: contact\ndate: 2023-12-28 17:37:32\ntags: \"contact\"\nlayout: \"contact\"\n---\n","updated":"2024-01-03T10:02:09.861Z","path":"contact/index.html","comments":1,"_id":"clrh5tshf0005ccus3fb60cm5","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2023-12-28T09:37:12.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2023-12-28 17:37:12\ntype: \"tags\"\nlayout: \"tags\"\n---\n","updated":"2024-01-03T10:29:13.584Z","path":"tags/index.html","comments":1,"_id":"clrh5tshj0009ccusee22451t","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"goodpagers","date":"2023-12-28T09:53:39.000Z","type":"goodpagers","layout":"goodpagers","_content":"","source":"goodpagers/index.md","raw":"---\ntitle: goodpagers\ndate: 2023-12-28 17:53:39\ntype: \"goodpagers\"\nlayout: \"goodpagers\"\n---\n","updated":"2024-01-03T10:02:58.172Z","path":"goodpagers/index.html","comments":1,"_id":"clrh5tshk000bccus0bb745gb","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Win11繁简体转化","date":"2022-11-03T04:24:18.000Z","_content":"# Win11繁简体转化\n\n## 缘由\n\nwindows的繁简体默认转化快捷键是 ```ctrl + shift + f```,会与一些ide的全局搜索快捷键冲突。\n\n于是我就把快捷键给关了，现在想繁体输出，去网上百度了下，本文记录下win11如何开关快捷键。\n\n\n\n## 步骤\n\n#### 1.打开设置\n\n#### 2.点击时间和语言\n\n![image-20231221151748665](https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/image-202312211517486658.png)\n\n#### 3.点击语言和区域\n\n![image-20231221151852970](https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/image-202312211518529703.png)\n\n#### 4.点击中文(简体,中国)右边的三个点，弹出框点击语言选项\n\n![image-20231221152021012](https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/image-202312211520210127.png)\n\n#### 5.拉到最底，点击微软拼音右边三个点，弹出框点击键盘选项\n\n![image-20231221152313678](https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/image-202312211523136786.png)\n\n#### 6.点击按键\n\n![image-20231221152418898](https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/image-202312211524188985.png)\n\n#### 7.拉到最底，找到热键繁简体切换\n\n![image-20231221152500238](https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/image-202312211525002384.png)\n\n## 效果\n\n![image-20231221152622359](https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/image-202312211526223592.png)\n\n![image-20231221152649563](https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/image-202312211526495631.png)","source":"_posts/Win11繁简体转化.md","raw":"---\ntitle: Win11繁简体转化\ndate: 2022-11-03 12:24:18\ntags: 繁体输出, win11\ncategories: win11, 繁体输出\n---\n# Win11繁简体转化\n\n## 缘由\n\nwindows的繁简体默认转化快捷键是 ```ctrl + shift + f```,会与一些ide的全局搜索快捷键冲突。\n\n于是我就把快捷键给关了，现在想繁体输出，去网上百度了下，本文记录下win11如何开关快捷键。\n\n\n\n## 步骤\n\n#### 1.打开设置\n\n#### 2.点击时间和语言\n\n![image-20231221151748665](https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/image-202312211517486658.png)\n\n#### 3.点击语言和区域\n\n![image-20231221151852970](https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/image-202312211518529703.png)\n\n#### 4.点击中文(简体,中国)右边的三个点，弹出框点击语言选项\n\n![image-20231221152021012](https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/image-202312211520210127.png)\n\n#### 5.拉到最底，点击微软拼音右边三个点，弹出框点击键盘选项\n\n![image-20231221152313678](https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/image-202312211523136786.png)\n\n#### 6.点击按键\n\n![image-20231221152418898](https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/image-202312211524188985.png)\n\n#### 7.拉到最底，找到热键繁简体切换\n\n![image-20231221152500238](https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/image-202312211525002384.png)\n\n## 效果\n\n![image-20231221152622359](https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/image-202312211526223592.png)\n\n![image-20231221152649563](https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/image-202312211526495631.png)","slug":"Win11繁简体转化","published":1,"updated":"2024-01-10T07:22:31.053Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clrh5tshd0004ccus5t8c53mz","content":"<h1 id=\"Win11繁简体转化\"><a href=\"#Win11繁简体转化\" class=\"headerlink\" title=\"Win11繁简体转化\"></a>Win11繁简体转化</h1><h2 id=\"缘由\"><a href=\"#缘由\" class=\"headerlink\" title=\"缘由\"></a>缘由</h2><p>windows的繁简体默认转化快捷键是 <code>ctrl + shift + f</code>,会与一些ide的全局搜索快捷键冲突。</p>\n<p>于是我就把快捷键给关了，现在想繁体输出，去网上百度了下，本文记录下win11如何开关快捷键。</p>\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><h4 id=\"1-打开设置\"><a href=\"#1-打开设置\" class=\"headerlink\" title=\"1.打开设置\"></a>1.打开设置</h4><h4 id=\"2-点击时间和语言\"><a href=\"#2-点击时间和语言\" class=\"headerlink\" title=\"2.点击时间和语言\"></a>2.点击时间和语言</h4><p><img src=\"https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/image-202312211517486658.png\" alt=\"image-20231221151748665\"></p>\n<h4 id=\"3-点击语言和区域\"><a href=\"#3-点击语言和区域\" class=\"headerlink\" title=\"3.点击语言和区域\"></a>3.点击语言和区域</h4><p><img src=\"https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/image-202312211518529703.png\" alt=\"image-20231221151852970\"></p>\n<h4 id=\"4-点击中文-简体-中国-右边的三个点，弹出框点击语言选项\"><a href=\"#4-点击中文-简体-中国-右边的三个点，弹出框点击语言选项\" class=\"headerlink\" title=\"4.点击中文(简体,中国)右边的三个点，弹出框点击语言选项\"></a>4.点击中文(简体,中国)右边的三个点，弹出框点击语言选项</h4><p><img src=\"https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/image-202312211520210127.png\" alt=\"image-20231221152021012\"></p>\n<h4 id=\"5-拉到最底，点击微软拼音右边三个点，弹出框点击键盘选项\"><a href=\"#5-拉到最底，点击微软拼音右边三个点，弹出框点击键盘选项\" class=\"headerlink\" title=\"5.拉到最底，点击微软拼音右边三个点，弹出框点击键盘选项\"></a>5.拉到最底，点击微软拼音右边三个点，弹出框点击键盘选项</h4><p><img src=\"https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/image-202312211523136786.png\" alt=\"image-20231221152313678\"></p>\n<h4 id=\"6-点击按键\"><a href=\"#6-点击按键\" class=\"headerlink\" title=\"6.点击按键\"></a>6.点击按键</h4><p><img src=\"https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/image-202312211524188985.png\" alt=\"image-20231221152418898\"></p>\n<h4 id=\"7-拉到最底，找到热键繁简体切换\"><a href=\"#7-拉到最底，找到热键繁简体切换\" class=\"headerlink\" title=\"7.拉到最底，找到热键繁简体切换\"></a>7.拉到最底，找到热键繁简体切换</h4><p><img src=\"https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/image-202312211525002384.png\" alt=\"image-20231221152500238\"></p>\n<h2 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h2><p><img src=\"https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/image-202312211526223592.png\" alt=\"image-20231221152622359\"></p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/image-202312211526495631.png\" alt=\"image-20231221152649563\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Win11繁简体转化\"><a href=\"#Win11繁简体转化\" class=\"headerlink\" title=\"Win11繁简体转化\"></a>Win11繁简体转化</h1><h2 id=\"缘由\"><a href=\"#缘由\" class=\"headerlink\" title=\"缘由\"></a>缘由</h2><p>windows的繁简体默认转化快捷键是 <code>ctrl + shift + f</code>,会与一些ide的全局搜索快捷键冲突。</p>\n<p>于是我就把快捷键给关了，现在想繁体输出，去网上百度了下，本文记录下win11如何开关快捷键。</p>\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><h4 id=\"1-打开设置\"><a href=\"#1-打开设置\" class=\"headerlink\" title=\"1.打开设置\"></a>1.打开设置</h4><h4 id=\"2-点击时间和语言\"><a href=\"#2-点击时间和语言\" class=\"headerlink\" title=\"2.点击时间和语言\"></a>2.点击时间和语言</h4><p><img src=\"https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/image-202312211517486658.png\" alt=\"image-20231221151748665\"></p>\n<h4 id=\"3-点击语言和区域\"><a href=\"#3-点击语言和区域\" class=\"headerlink\" title=\"3.点击语言和区域\"></a>3.点击语言和区域</h4><p><img src=\"https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/image-202312211518529703.png\" alt=\"image-20231221151852970\"></p>\n<h4 id=\"4-点击中文-简体-中国-右边的三个点，弹出框点击语言选项\"><a href=\"#4-点击中文-简体-中国-右边的三个点，弹出框点击语言选项\" class=\"headerlink\" title=\"4.点击中文(简体,中国)右边的三个点，弹出框点击语言选项\"></a>4.点击中文(简体,中国)右边的三个点，弹出框点击语言选项</h4><p><img src=\"https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/image-202312211520210127.png\" alt=\"image-20231221152021012\"></p>\n<h4 id=\"5-拉到最底，点击微软拼音右边三个点，弹出框点击键盘选项\"><a href=\"#5-拉到最底，点击微软拼音右边三个点，弹出框点击键盘选项\" class=\"headerlink\" title=\"5.拉到最底，点击微软拼音右边三个点，弹出框点击键盘选项\"></a>5.拉到最底，点击微软拼音右边三个点，弹出框点击键盘选项</h4><p><img src=\"https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/image-202312211523136786.png\" alt=\"image-20231221152313678\"></p>\n<h4 id=\"6-点击按键\"><a href=\"#6-点击按键\" class=\"headerlink\" title=\"6.点击按键\"></a>6.点击按键</h4><p><img src=\"https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/image-202312211524188985.png\" alt=\"image-20231221152418898\"></p>\n<h4 id=\"7-拉到最底，找到热键繁简体切换\"><a href=\"#7-拉到最底，找到热键繁简体切换\" class=\"headerlink\" title=\"7.拉到最底，找到热键繁简体切换\"></a>7.拉到最底，找到热键繁简体切换</h4><p><img src=\"https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/image-202312211525002384.png\" alt=\"image-20231221152500238\"></p>\n<h2 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h2><p><img src=\"https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/image-202312211526223592.png\" alt=\"image-20231221152622359\"></p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/image-202312211526495631.png\" alt=\"image-20231221152649563\"></p>\n"},{"title":"关于指针的一些事儿","date":"2022-11-03T04:24:18.000Z","_content":"## 指针的基本概念\n\n### 1）变量的地址\n\n变量是内存变量的简称，在C++中，系统会给变量分配一块内存，内存是有地址的。\n\n| 0x00000001 |\n| :--------: |\n| 0x00000002 |\n| 0x00000003 |\n| 0x00000004 |\n| 0x00000005 |\n| 0x00000006 |\n| 0x00000007 |\n| 0x00000008 |\n| 0x00000009 |\n| 0x0000000A |\n| 0x0000000B |\n|   ......   |\n| 0xFFFFFFFF |\n\nC++用运算符&获取变量在内存中的起始地址。\n\n语法：`&变量名`\n\n### 2)指针变量\n\n指针变量简称指针，他是一种特殊的变量，专用于存放变量在内存中的**起始地址**。\n\n语法：`数据类型 *变量名;`\n\n数据类型必须是合法的C++数据类型（int、char、double或其他自定义数据类型）。\n\n星号*与乘法中的星号是相同的，但是，在这个场景中，星号用于表示这个变量是指针。\n\n### 3）对指针赋值\n\n不管是整型、浮点型、字符型，还是其他数据类型的变量，它的地址都是一个十六进制数。我们用整型指针存放整型变量的地址，用字符型指针存放字符型变量的地址，用浮点型指针存放浮点型变量的地址，用自定义数据类型指针存放自定义数据类型变量的地址。\n\n语法：`指针=&变量名;`\n\n### 4)指针占用的内存\n\n指针也是变量，是变量就要占用内存空间。\n\n在64位操作系统中，不管什么类型的指针，占用内存都是8字节。\n\n在C++中，指针是复合数据类型，复合数据类型是指基于其他类型而定义的数据类型，在程序中，int是整型变量，int *是整型指针类型，int *可以用于sizeof运算符，可以用于数据类型的强制转换，总的来说，把int *当成一种数据类型就对了。\n\n## 使用指针\n\n声明变量后，在没有赋值之前，里面是乱七八糟的值，这时候不能使用指针。\n\n指针存放变量的地址，因此，指针名表示的是地址（就像变量名可以表示变量的值一样）。\n\n*运算符被称为**间接值**或**解除引用（解引用）**，将它用于指针，可以的得到该地址的内存中存储的值，*也是乘法符号，C++根据上下文来确定所指的是乘法还是解引用。\n\n变量和指向变量的指针就像同一枚硬币的两面。\n\n`int no = 38;`\n\n`int *ptr = &no;`\n\n![](https://gcore.jsdelivr.net/gh/chauity/images/20221025104337.jpg)\n\n\n程序在存储数据的时候，必须跟踪三种基本属性：\n\n- 程序存储在哪里；\n- 数据是什么类型；\n- 数据的值是多少。\n\n用两种策略可以达到以上目的；\n\n声明一个普通变量，声明时指出数据类型和变量名（符号名），系统在内部跟踪该内存单元。\n\n声明一个指针变量，存储的值是地址，而不是值本身，程序直接访问该内存单元。\n\n## 指针用于函数的参数\n\n如果把函数的形参声明为指针，调用的时候把实参地址传进去，形参中存放的是实参的地址，在函数中\n\n通过解引用的方法直接操作内存中的数据，可以修改实数的值，这种方法被通俗的称为**地址传递**或**传地址**。\n\n**值传递**：函数的形参是普通变量。\n\n传地址的意义如下：\n\n- 可以在函数中修改实参的值。\n- 减少内存拷贝，提升性能。\n\n## 使用常量\n\n常量是程序中固定不变的数据。\n\n### 1）宏常量\n\n一般在 main 函数的上面声明，用大写命名。\n\n语法：`#define 常量名 值`\n\n### 2）const修饰的变量\n\n在程序的任何地方都可以声明。\n\n语法：`const 数据类型 常量名 = 值`\n\n### 3)常量的特点\n\n程序中不允许改变常量的值，否则编译的时候会报错。\n\n### 4）示例\n\n```cpp\n#include <iostream>    //包含头文件\n\n#define MONTHS 12           //一年中的月份数\n#define PI     3.14159      //圆周率\n\nusing namespace std;        //指定缺省的命名空间\n\n//main函数u，程序从这里开始执行，每个程序只能有一个 main 函数。\nint main()\n{\n    const days = 7;        //一星期的天数\n\n    cout << \"一年有\" << MONTHS << \"个月\" << endl;\n\n}  \n```\n\n## 用const修饰指针\n\n### 1）常量指针\n\n语法：`const 数据类型 *变量名;`\n\n不能通过解引用的方法修改内存地址中的值（用原始的变量名是可以修改的）。\n\n注意：\n\n- 指向的变量（对象）可以改变（之前是指向变量a的，后来可以改为指向变量b）。\n- 一般用于修饰函数的形参，表示不希望在函数里修改内存地址中的值。\n- 如果用于形参、虽然指向的对象可以改变，但那么做没有任何意义。\n- 如果形参的值不需要改变，建议加上const修饰，程序可读性更好。\n\n```cpp\n    int a = 3, b = 8;\n    const int* p = &a;\n    //不能通过解引用赋值修改值，编译会报错 错误  C3892\n    //*p = 13;\n    //只能通过变量修改值\n    a = 13;\n    cout << \"a=\" << a << \",*p=\" << *p << endl;\n    p = &b;\n    cout << \"b=\" << b << \",*p=\" << *p << endl;\n```\n\n```cpp\nvoid func(const int* no,const string *str)\n{\n    //参数加上const，解引用赋值,编译时 同样会报错\n    //*no = 8;\n    //*str = \"我有一只小小鸟.\";\n    cout << \"亲爱的\" << *no << \"号\" << *str << endl;\n}\n```\n\n### 2)指针常量\n\n语法：`数据类型 *const 变量名;`\n\n指向的变量（对象）不可改变。\n\n注意：\n\n- 在定义的同时必须初始化，否则没有意义。\n- 可以通过解引用的方法修改内存地址中的值。\n- C++编译器把指针常量做了一些特别的处理，改投换面之后，有了一个新的名字，叫做引用。\n\n### 3）常指针常量\n\n语法：`const 数据类型 *const 变量名;`\n\n指向的变量（对象）不可改变，不能通过解引用的方法修改内存地址中的值。\n\n```cpp\n    //常指针常量\n    int a = 3,b = 8;\n    const int* const pa = &a;\n    //既不能改变指针指向，也不能解引用改变值，下列两种写法都是错误的\n    //*pa = 13;\n    //pa = &b;\n```\n\n常量指针：指针指向可以改，指针指向的值不可以改。\n\n指针常量：指针指向不可以改，指针的指向的值可以更改。\n\n常指针常量：指针指向不可以改，指针指向的值不可以更改。\n\n## void 关键字\n\n在C++中，void表示为**无类型**，主要有三个用途：\n\n- 函数的返回值使用 `void` ，表示函数没有返回值。\n\n  ```cpp\n  void func (int a,int b)\n  {\n       //函数体代码\n       return;   \n  }\n  ```\n- 函数的参数填 `void` ，表示函数不需要参数（或者让参数列表空着）。\n\n  ```cpp\n  int func( void )\n  {\n      //函数体代码\n      return 0;\n  }\n  ```\n- 函数的形参用 `void *`，表示接受任意数据类型的指针。\n\n  注意：\n\n  - 不能用 `void`声明变量，它不能代表一个真实的变量。\n  - 不能对 `void *`指针直接解引用（需要转化为其他类型的指针）。\n  - 把其他类型的指针赋值给 `void *`指针不需要转换。\n  - 把 `void *`指针赋值给其他类型的指针需要转换。\n\n## 动态分配内存new和delete\n\nC++内存空间\n\n![](https://gcore.jsdelivr.net/gh/chauity/images/20221025192803.jpg)\n\n使用堆区内存有四个步骤：\n\n1）声明一个指针；\n\n2）用new运算符向系统申请一块内存，让指针指向这块内存；\n\n3）通过对指针的解引用的方法，像使用变量一样使用这块内存；\n\n4）如果这块内存不用了，用delete运算符释放它；\n\n申请内存的语法：`new 数据类型(初始值);` //C++11支持 {}\n\n如果申请成功，返回一个地址；如果申请失败，返回一个空地址（暂时不考虑失败的情况）\n\n是否内存的语法：`delete 地址;`\n\n注意：\n\n- 动态分配出来的内存没有变量名，只能通过指向它的指针来操作内存中的数据。\n- 如果动态分配的内存用不了，必须使用 `delete`释放它，否则可能用尽系统的内存。\n- 动态分配的内存的生命周期与程序相同，程序退出时，如果没有是否，系统将自动回收。\n- 就算指针的作用域已失效，所指向的内存也不会释放。\n- 用指针跟踪已分配的内存时，不能跟丢。\n\n## 二级指针\n\n**指针**是**指针变量**的简称，也是**变量**。是**变量**就有**地址**。\n\n**指针**用于存放**普通变量**的**地址**。\n\n**二级指针**用于存放**指针变量**的**地址**。\n\n声明**二级指针**的语法：`数据类型** 指针名;`\n\n使用指针有两个目的：1）传递地址；2）存放动态分配的内存的地址。\n\n在函数中，如果传递普通变量的地址，形参用指针；**传递指针的地址，形参用二级指针**。\n\n## 空指针\n\n在C++和C中，用0或NULL都可以表示空指针。\n\n声明指针后，在赋值之前，让它指向空，表示没有任何地址。\n\n### 1）使用空指针的后果\n\n**如果对空指针解引用，程序会崩溃。**\n\n**如果对空指针使用delete运算符，系统忽略该操作，不会出现异常。所以内存释放后，也应该把指针指向空。**\n\n为什么空指针访问会出现异常？\n\nNULL指针分配的分区：其范围是从 `0x00000000`到 `0x0000FFFF`。这段代码是空闲的，对于空闲的空间而言，没有相对应的物理存储器，与之相对应，所以对这段代码来说，任何读写操作都会引起异常的。空指针是程序无论在核实都没有物理存储器与之相对应的地址。为了保障“无论何时”这个条件，需要人为划分一个空指针的区域，固有上面NULL指针分区。\n\n### 2）C++ 11的nullptr\n\n用0和NULL表示空指针会产生歧义，C++11建议用 `nullptr`表示空指针，也就是 `（void *）0`。\n\nNULL在C++中就是0，这是因为在C++中 `void *` 类型是不允许隐式转换成其他类型的，所以之前C++中用0来代表空指针，但是在重载整型的情况下，会出现上述的问题。所以C++11加入了nullptr，可以保证在任何情况下都代表空指针，而不会出现上述的情况，因此，建议用nullptr替代NULL，而NULL就当做0使用。\n\n**注意：在Linux平台下，如果使用nullptr，编译要加 `-std=c++11`参数**\n\n## 野指针\n\n野指针就是指针指向的不是一个有效（合法）的地址。\n\n在程序中，如果访问野指针，**可能**会造成程序的崩溃。\n\n出现野指针的情况主要有三种：\n\n- 1）指针在定义的时候，如果没有初始化，它的值是不确定的（乱指一气）。\n- 2）如果指针指向了动态分配的内存，内存被释放后，指针不会置空，但是，指向的指针已失效。\n- 3）指针指向的变量超越变量的作用域（变量的内存空间已被回收），作用域指的是是局部变量还是全局变量。\n\n规避方法：\n\n- 1）指针在定义的时候，如果没地方指，就初始化为nullptr。\n- 2）动态分配的内存释放后，将其置位nullptr。\n- 3）函数不要返回局部变量的地址。\n\n  注意：野指针的危害比空指针要大很多，如果访问野指针，**可能**会造成程序的崩溃。是可能，表示一定，程序的表现是**不稳定**，增加了调试的难度。\n\n## 一维数组与指针\n\n### 1) 指针的算术\n\n- 将一个整型变量加1后，其值将增加1。\n- 但是，将指针变量（地址的值）加1后，增加的量等于它指向的数据类型的字节数。\n\n### 2) 数组的地址\n\n- a) 数组在内存中占用的空间是连续的。\n- b) C++数组名解释为数组的第0个元素的地址。\n- c) 数组第0个元素的地址和数组首地址的取值是相同的。\n- d) 数组第n个元素的地址是：`数组首地址+n`\n- e) C++编译器把 `数组名[下标]`解释为 `*(数组首地址+下标)`\n\n### 3) 数组的本质\n\n- 数组是占用连续空间的一块内存，数组名被解释为数组第0个元素的地址。C++操作内存有两种方法：数组解释法和指针表示法，他们说等价的。\n\n### 4）数组名不一定会被解释为地址\n\n- 在多数情况下，C++将数组名解释成第0个元素的地址，但是，将sizeof运算符用于数组名，返回的是整个数组的内存空间的字节数。\n- 可以修改指针的值，但数组是常量，不可修改。\n\n## 一维数组用于函数的参数\n\n### 1）指针的数组表示\n\n- 在C++内部，用指针来处理数组。\n- C++编译器把 `数组名[下标]`解释为 `*(数组首地址+下标)`\n- C++编译器把 `地址[下标]`解释为 `*(地址+下标)`\n\n### 2）一维数组用于函数的参数\n\n- 一维数组用于函数的参数时，只能传数组的地址，并且必须把数组长度也传进去，除非数组中有最后一个元素的标志。\n- 书写的方法有两种：\n\n  `void func(int* arr,int len)`\n\n        `void func(int* arr[],int len)`\n\n- 注意：\n\n  在函数中，可以用数组表示法，也可以用指针表示法。\n\n  在函数中，不要对指针名用sizeof运算符，由于64位操作系统指针大小是永远是8，并不是数组占用内存的大小。\n\n## 用 new 动态创建一维数组\n\n普通数组在栈上分配内存，栈很小；如果需要存放更多的元素，必须在堆上分配内存。\n\n动态创建一维数组的语法：`数据类型 *指针=new 数据类型[数组长度]`；\n\n释放一维数组的语法：`delete []指针;`\n\n注意：\n\n- 动态创建的数组没有数组名，不能用 sizeof 运算符。\n- 可以用数组比色法和指针表示法两种方式使用动态创建的数组。\n- 必须使用<mark>`delete[]`</mark>来释放内存（不能只用 `delete`）。\n- 不用用<mark>`delete[]`</mark>来释放不是<mark>`new[]`</mark>分配的内存。\n- 不要用<mark>`delete[]`</mark>释放同一个内存块两次（否则等同于操作野指针）。\n- 对空指针用<mark>`delete[]`</mark>是安全的（释放内存后，应该把指针置空nullptr）。\n- 声明普通数组的时候，数组长度可以用变量，相当于在栈上动态创建数组，并且不需要释放。\n- 如果内存不足，调用<mark>`new`</mark>会产生异常，导致程序终止；如果在new关键字后面加（<mark>`std::nothrow`</mark>）选项，则返回<mark>`nullptr`</mark>，不会产生异常。\n- 为什么用<mark>`delete[]`</mark>释放数组的时候，不需要指定数组的大小？因为系统会自动跟踪分配的内存。\n\n## 二维数组用于函数的参数\n\n```cpp\nint* p;      //整型指针。\nint* p[3];   //一维整型指针数组，元素是3个整型指针（p[0]、p[1]、p[2]）。\nint* p();    //函数p的返回值类型是整型的地址。\nint (*p)(int, int);    //p是函数指针，指针指向的函数具有两个int型的形参。函数的返回值是整型。\n```\n\n### 1）行指针（数组指针）\n\n声明行指针的语法：<mark>`数据类型 (*行指针名)[行的大小];   //行的大小即数组长度。`</mark>\n\n```cpp\n//行指针的举例\nint(*p1)[3]; //p1是行指针，用于指向数组长度为3的int型数组。\nint(*p2)[5]; //p2是行指针，用于指向数组长度为5的int型数组。\ndouble(*p3)[5]; //p3是行指针，用于指向数组长度为5的double型数组。\n```\n\n\n一维数组名被解释为数组的第0个元素地址。\n\n对一维数组名取地址得到的是数组的地址，是行地址。\n\n### 2）二维数组名是行地址\n\n``int bh[2][3] = {{11,12,13},{21,22,23}};``\n\nbh 是二维数组名，该数组有2元素，每一个元素又是一个<mark>`数组长度为3的整型数组`</mark>。\n\nbh被解释为<mark>`数组长度为三的整型数组`</mark>类型的地址。\n\n如果存放bh的值，要用<mark>`数组长度为3的整型数组`</mark>类型的指针。\n\nint (*p)[3] = bh\n\n### 3)把二维数组传递给函数\n\n如果要把bh传给函数，函数的声明如下：\n\nvoid func(int (*p)[3],int len);\n\nvoid func(int p[][3],int len);\n","source":"_posts/c++指针.md","raw":"---\ntitle: 关于指针的一些事儿\ndate: 2022-11-03 12:24:18\ntags: C语言, 指针\n---\n## 指针的基本概念\n\n### 1）变量的地址\n\n变量是内存变量的简称，在C++中，系统会给变量分配一块内存，内存是有地址的。\n\n| 0x00000001 |\n| :--------: |\n| 0x00000002 |\n| 0x00000003 |\n| 0x00000004 |\n| 0x00000005 |\n| 0x00000006 |\n| 0x00000007 |\n| 0x00000008 |\n| 0x00000009 |\n| 0x0000000A |\n| 0x0000000B |\n|   ......   |\n| 0xFFFFFFFF |\n\nC++用运算符&获取变量在内存中的起始地址。\n\n语法：`&变量名`\n\n### 2)指针变量\n\n指针变量简称指针，他是一种特殊的变量，专用于存放变量在内存中的**起始地址**。\n\n语法：`数据类型 *变量名;`\n\n数据类型必须是合法的C++数据类型（int、char、double或其他自定义数据类型）。\n\n星号*与乘法中的星号是相同的，但是，在这个场景中，星号用于表示这个变量是指针。\n\n### 3）对指针赋值\n\n不管是整型、浮点型、字符型，还是其他数据类型的变量，它的地址都是一个十六进制数。我们用整型指针存放整型变量的地址，用字符型指针存放字符型变量的地址，用浮点型指针存放浮点型变量的地址，用自定义数据类型指针存放自定义数据类型变量的地址。\n\n语法：`指针=&变量名;`\n\n### 4)指针占用的内存\n\n指针也是变量，是变量就要占用内存空间。\n\n在64位操作系统中，不管什么类型的指针，占用内存都是8字节。\n\n在C++中，指针是复合数据类型，复合数据类型是指基于其他类型而定义的数据类型，在程序中，int是整型变量，int *是整型指针类型，int *可以用于sizeof运算符，可以用于数据类型的强制转换，总的来说，把int *当成一种数据类型就对了。\n\n## 使用指针\n\n声明变量后，在没有赋值之前，里面是乱七八糟的值，这时候不能使用指针。\n\n指针存放变量的地址，因此，指针名表示的是地址（就像变量名可以表示变量的值一样）。\n\n*运算符被称为**间接值**或**解除引用（解引用）**，将它用于指针，可以的得到该地址的内存中存储的值，*也是乘法符号，C++根据上下文来确定所指的是乘法还是解引用。\n\n变量和指向变量的指针就像同一枚硬币的两面。\n\n`int no = 38;`\n\n`int *ptr = &no;`\n\n![](https://gcore.jsdelivr.net/gh/chauity/images/20221025104337.jpg)\n\n\n程序在存储数据的时候，必须跟踪三种基本属性：\n\n- 程序存储在哪里；\n- 数据是什么类型；\n- 数据的值是多少。\n\n用两种策略可以达到以上目的；\n\n声明一个普通变量，声明时指出数据类型和变量名（符号名），系统在内部跟踪该内存单元。\n\n声明一个指针变量，存储的值是地址，而不是值本身，程序直接访问该内存单元。\n\n## 指针用于函数的参数\n\n如果把函数的形参声明为指针，调用的时候把实参地址传进去，形参中存放的是实参的地址，在函数中\n\n通过解引用的方法直接操作内存中的数据，可以修改实数的值，这种方法被通俗的称为**地址传递**或**传地址**。\n\n**值传递**：函数的形参是普通变量。\n\n传地址的意义如下：\n\n- 可以在函数中修改实参的值。\n- 减少内存拷贝，提升性能。\n\n## 使用常量\n\n常量是程序中固定不变的数据。\n\n### 1）宏常量\n\n一般在 main 函数的上面声明，用大写命名。\n\n语法：`#define 常量名 值`\n\n### 2）const修饰的变量\n\n在程序的任何地方都可以声明。\n\n语法：`const 数据类型 常量名 = 值`\n\n### 3)常量的特点\n\n程序中不允许改变常量的值，否则编译的时候会报错。\n\n### 4）示例\n\n```cpp\n#include <iostream>    //包含头文件\n\n#define MONTHS 12           //一年中的月份数\n#define PI     3.14159      //圆周率\n\nusing namespace std;        //指定缺省的命名空间\n\n//main函数u，程序从这里开始执行，每个程序只能有一个 main 函数。\nint main()\n{\n    const days = 7;        //一星期的天数\n\n    cout << \"一年有\" << MONTHS << \"个月\" << endl;\n\n}  \n```\n\n## 用const修饰指针\n\n### 1）常量指针\n\n语法：`const 数据类型 *变量名;`\n\n不能通过解引用的方法修改内存地址中的值（用原始的变量名是可以修改的）。\n\n注意：\n\n- 指向的变量（对象）可以改变（之前是指向变量a的，后来可以改为指向变量b）。\n- 一般用于修饰函数的形参，表示不希望在函数里修改内存地址中的值。\n- 如果用于形参、虽然指向的对象可以改变，但那么做没有任何意义。\n- 如果形参的值不需要改变，建议加上const修饰，程序可读性更好。\n\n```cpp\n    int a = 3, b = 8;\n    const int* p = &a;\n    //不能通过解引用赋值修改值，编译会报错 错误  C3892\n    //*p = 13;\n    //只能通过变量修改值\n    a = 13;\n    cout << \"a=\" << a << \",*p=\" << *p << endl;\n    p = &b;\n    cout << \"b=\" << b << \",*p=\" << *p << endl;\n```\n\n```cpp\nvoid func(const int* no,const string *str)\n{\n    //参数加上const，解引用赋值,编译时 同样会报错\n    //*no = 8;\n    //*str = \"我有一只小小鸟.\";\n    cout << \"亲爱的\" << *no << \"号\" << *str << endl;\n}\n```\n\n### 2)指针常量\n\n语法：`数据类型 *const 变量名;`\n\n指向的变量（对象）不可改变。\n\n注意：\n\n- 在定义的同时必须初始化，否则没有意义。\n- 可以通过解引用的方法修改内存地址中的值。\n- C++编译器把指针常量做了一些特别的处理，改投换面之后，有了一个新的名字，叫做引用。\n\n### 3）常指针常量\n\n语法：`const 数据类型 *const 变量名;`\n\n指向的变量（对象）不可改变，不能通过解引用的方法修改内存地址中的值。\n\n```cpp\n    //常指针常量\n    int a = 3,b = 8;\n    const int* const pa = &a;\n    //既不能改变指针指向，也不能解引用改变值，下列两种写法都是错误的\n    //*pa = 13;\n    //pa = &b;\n```\n\n常量指针：指针指向可以改，指针指向的值不可以改。\n\n指针常量：指针指向不可以改，指针的指向的值可以更改。\n\n常指针常量：指针指向不可以改，指针指向的值不可以更改。\n\n## void 关键字\n\n在C++中，void表示为**无类型**，主要有三个用途：\n\n- 函数的返回值使用 `void` ，表示函数没有返回值。\n\n  ```cpp\n  void func (int a,int b)\n  {\n       //函数体代码\n       return;   \n  }\n  ```\n- 函数的参数填 `void` ，表示函数不需要参数（或者让参数列表空着）。\n\n  ```cpp\n  int func( void )\n  {\n      //函数体代码\n      return 0;\n  }\n  ```\n- 函数的形参用 `void *`，表示接受任意数据类型的指针。\n\n  注意：\n\n  - 不能用 `void`声明变量，它不能代表一个真实的变量。\n  - 不能对 `void *`指针直接解引用（需要转化为其他类型的指针）。\n  - 把其他类型的指针赋值给 `void *`指针不需要转换。\n  - 把 `void *`指针赋值给其他类型的指针需要转换。\n\n## 动态分配内存new和delete\n\nC++内存空间\n\n![](https://gcore.jsdelivr.net/gh/chauity/images/20221025192803.jpg)\n\n使用堆区内存有四个步骤：\n\n1）声明一个指针；\n\n2）用new运算符向系统申请一块内存，让指针指向这块内存；\n\n3）通过对指针的解引用的方法，像使用变量一样使用这块内存；\n\n4）如果这块内存不用了，用delete运算符释放它；\n\n申请内存的语法：`new 数据类型(初始值);` //C++11支持 {}\n\n如果申请成功，返回一个地址；如果申请失败，返回一个空地址（暂时不考虑失败的情况）\n\n是否内存的语法：`delete 地址;`\n\n注意：\n\n- 动态分配出来的内存没有变量名，只能通过指向它的指针来操作内存中的数据。\n- 如果动态分配的内存用不了，必须使用 `delete`释放它，否则可能用尽系统的内存。\n- 动态分配的内存的生命周期与程序相同，程序退出时，如果没有是否，系统将自动回收。\n- 就算指针的作用域已失效，所指向的内存也不会释放。\n- 用指针跟踪已分配的内存时，不能跟丢。\n\n## 二级指针\n\n**指针**是**指针变量**的简称，也是**变量**。是**变量**就有**地址**。\n\n**指针**用于存放**普通变量**的**地址**。\n\n**二级指针**用于存放**指针变量**的**地址**。\n\n声明**二级指针**的语法：`数据类型** 指针名;`\n\n使用指针有两个目的：1）传递地址；2）存放动态分配的内存的地址。\n\n在函数中，如果传递普通变量的地址，形参用指针；**传递指针的地址，形参用二级指针**。\n\n## 空指针\n\n在C++和C中，用0或NULL都可以表示空指针。\n\n声明指针后，在赋值之前，让它指向空，表示没有任何地址。\n\n### 1）使用空指针的后果\n\n**如果对空指针解引用，程序会崩溃。**\n\n**如果对空指针使用delete运算符，系统忽略该操作，不会出现异常。所以内存释放后，也应该把指针指向空。**\n\n为什么空指针访问会出现异常？\n\nNULL指针分配的分区：其范围是从 `0x00000000`到 `0x0000FFFF`。这段代码是空闲的，对于空闲的空间而言，没有相对应的物理存储器，与之相对应，所以对这段代码来说，任何读写操作都会引起异常的。空指针是程序无论在核实都没有物理存储器与之相对应的地址。为了保障“无论何时”这个条件，需要人为划分一个空指针的区域，固有上面NULL指针分区。\n\n### 2）C++ 11的nullptr\n\n用0和NULL表示空指针会产生歧义，C++11建议用 `nullptr`表示空指针，也就是 `（void *）0`。\n\nNULL在C++中就是0，这是因为在C++中 `void *` 类型是不允许隐式转换成其他类型的，所以之前C++中用0来代表空指针，但是在重载整型的情况下，会出现上述的问题。所以C++11加入了nullptr，可以保证在任何情况下都代表空指针，而不会出现上述的情况，因此，建议用nullptr替代NULL，而NULL就当做0使用。\n\n**注意：在Linux平台下，如果使用nullptr，编译要加 `-std=c++11`参数**\n\n## 野指针\n\n野指针就是指针指向的不是一个有效（合法）的地址。\n\n在程序中，如果访问野指针，**可能**会造成程序的崩溃。\n\n出现野指针的情况主要有三种：\n\n- 1）指针在定义的时候，如果没有初始化，它的值是不确定的（乱指一气）。\n- 2）如果指针指向了动态分配的内存，内存被释放后，指针不会置空，但是，指向的指针已失效。\n- 3）指针指向的变量超越变量的作用域（变量的内存空间已被回收），作用域指的是是局部变量还是全局变量。\n\n规避方法：\n\n- 1）指针在定义的时候，如果没地方指，就初始化为nullptr。\n- 2）动态分配的内存释放后，将其置位nullptr。\n- 3）函数不要返回局部变量的地址。\n\n  注意：野指针的危害比空指针要大很多，如果访问野指针，**可能**会造成程序的崩溃。是可能，表示一定，程序的表现是**不稳定**，增加了调试的难度。\n\n## 一维数组与指针\n\n### 1) 指针的算术\n\n- 将一个整型变量加1后，其值将增加1。\n- 但是，将指针变量（地址的值）加1后，增加的量等于它指向的数据类型的字节数。\n\n### 2) 数组的地址\n\n- a) 数组在内存中占用的空间是连续的。\n- b) C++数组名解释为数组的第0个元素的地址。\n- c) 数组第0个元素的地址和数组首地址的取值是相同的。\n- d) 数组第n个元素的地址是：`数组首地址+n`\n- e) C++编译器把 `数组名[下标]`解释为 `*(数组首地址+下标)`\n\n### 3) 数组的本质\n\n- 数组是占用连续空间的一块内存，数组名被解释为数组第0个元素的地址。C++操作内存有两种方法：数组解释法和指针表示法，他们说等价的。\n\n### 4）数组名不一定会被解释为地址\n\n- 在多数情况下，C++将数组名解释成第0个元素的地址，但是，将sizeof运算符用于数组名，返回的是整个数组的内存空间的字节数。\n- 可以修改指针的值，但数组是常量，不可修改。\n\n## 一维数组用于函数的参数\n\n### 1）指针的数组表示\n\n- 在C++内部，用指针来处理数组。\n- C++编译器把 `数组名[下标]`解释为 `*(数组首地址+下标)`\n- C++编译器把 `地址[下标]`解释为 `*(地址+下标)`\n\n### 2）一维数组用于函数的参数\n\n- 一维数组用于函数的参数时，只能传数组的地址，并且必须把数组长度也传进去，除非数组中有最后一个元素的标志。\n- 书写的方法有两种：\n\n  `void func(int* arr,int len)`\n\n        `void func(int* arr[],int len)`\n\n- 注意：\n\n  在函数中，可以用数组表示法，也可以用指针表示法。\n\n  在函数中，不要对指针名用sizeof运算符，由于64位操作系统指针大小是永远是8，并不是数组占用内存的大小。\n\n## 用 new 动态创建一维数组\n\n普通数组在栈上分配内存，栈很小；如果需要存放更多的元素，必须在堆上分配内存。\n\n动态创建一维数组的语法：`数据类型 *指针=new 数据类型[数组长度]`；\n\n释放一维数组的语法：`delete []指针;`\n\n注意：\n\n- 动态创建的数组没有数组名，不能用 sizeof 运算符。\n- 可以用数组比色法和指针表示法两种方式使用动态创建的数组。\n- 必须使用<mark>`delete[]`</mark>来释放内存（不能只用 `delete`）。\n- 不用用<mark>`delete[]`</mark>来释放不是<mark>`new[]`</mark>分配的内存。\n- 不要用<mark>`delete[]`</mark>释放同一个内存块两次（否则等同于操作野指针）。\n- 对空指针用<mark>`delete[]`</mark>是安全的（释放内存后，应该把指针置空nullptr）。\n- 声明普通数组的时候，数组长度可以用变量，相当于在栈上动态创建数组，并且不需要释放。\n- 如果内存不足，调用<mark>`new`</mark>会产生异常，导致程序终止；如果在new关键字后面加（<mark>`std::nothrow`</mark>）选项，则返回<mark>`nullptr`</mark>，不会产生异常。\n- 为什么用<mark>`delete[]`</mark>释放数组的时候，不需要指定数组的大小？因为系统会自动跟踪分配的内存。\n\n## 二维数组用于函数的参数\n\n```cpp\nint* p;      //整型指针。\nint* p[3];   //一维整型指针数组，元素是3个整型指针（p[0]、p[1]、p[2]）。\nint* p();    //函数p的返回值类型是整型的地址。\nint (*p)(int, int);    //p是函数指针，指针指向的函数具有两个int型的形参。函数的返回值是整型。\n```\n\n### 1）行指针（数组指针）\n\n声明行指针的语法：<mark>`数据类型 (*行指针名)[行的大小];   //行的大小即数组长度。`</mark>\n\n```cpp\n//行指针的举例\nint(*p1)[3]; //p1是行指针，用于指向数组长度为3的int型数组。\nint(*p2)[5]; //p2是行指针，用于指向数组长度为5的int型数组。\ndouble(*p3)[5]; //p3是行指针，用于指向数组长度为5的double型数组。\n```\n\n\n一维数组名被解释为数组的第0个元素地址。\n\n对一维数组名取地址得到的是数组的地址，是行地址。\n\n### 2）二维数组名是行地址\n\n``int bh[2][3] = {{11,12,13},{21,22,23}};``\n\nbh 是二维数组名，该数组有2元素，每一个元素又是一个<mark>`数组长度为3的整型数组`</mark>。\n\nbh被解释为<mark>`数组长度为三的整型数组`</mark>类型的地址。\n\n如果存放bh的值，要用<mark>`数组长度为3的整型数组`</mark>类型的指针。\n\nint (*p)[3] = bh\n\n### 3)把二维数组传递给函数\n\n如果要把bh传给函数，函数的声明如下：\n\nvoid func(int (*p)[3],int len);\n\nvoid func(int p[][3],int len);\n","slug":"c++指针","published":1,"updated":"2024-01-10T07:22:31.059Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clrh5tshg0006ccus9eccgk1o","content":"<h2 id=\"指针的基本概念\"><a href=\"#指针的基本概念\" class=\"headerlink\" title=\"指针的基本概念\"></a>指针的基本概念</h2><h3 id=\"1）变量的地址\"><a href=\"#1）变量的地址\" class=\"headerlink\" title=\"1）变量的地址\"></a>1）变量的地址</h3><p>变量是内存变量的简称，在C++中，系统会给变量分配一块内存，内存是有地址的。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">0x00000001</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">0x00000002</td>\n</tr>\n<tr>\n<td align=\"center\">0x00000003</td>\n</tr>\n<tr>\n<td align=\"center\">0x00000004</td>\n</tr>\n<tr>\n<td align=\"center\">0x00000005</td>\n</tr>\n<tr>\n<td align=\"center\">0x00000006</td>\n</tr>\n<tr>\n<td align=\"center\">0x00000007</td>\n</tr>\n<tr>\n<td align=\"center\">0x00000008</td>\n</tr>\n<tr>\n<td align=\"center\">0x00000009</td>\n</tr>\n<tr>\n<td align=\"center\">0x0000000A</td>\n</tr>\n<tr>\n<td align=\"center\">0x0000000B</td>\n</tr>\n<tr>\n<td align=\"center\">……</td>\n</tr>\n<tr>\n<td align=\"center\">0xFFFFFFFF</td>\n</tr>\n</tbody></table>\n<p>C++用运算符&amp;获取变量在内存中的起始地址。</p>\n<p>语法：<code>&amp;变量名</code></p>\n<h3 id=\"2-指针变量\"><a href=\"#2-指针变量\" class=\"headerlink\" title=\"2)指针变量\"></a>2)指针变量</h3><p>指针变量简称指针，他是一种特殊的变量，专用于存放变量在内存中的<strong>起始地址</strong>。</p>\n<p>语法：<code>数据类型 *变量名;</code></p>\n<p>数据类型必须是合法的C++数据类型（int、char、double或其他自定义数据类型）。</p>\n<p>星号*与乘法中的星号是相同的，但是，在这个场景中，星号用于表示这个变量是指针。</p>\n<h3 id=\"3）对指针赋值\"><a href=\"#3）对指针赋值\" class=\"headerlink\" title=\"3）对指针赋值\"></a>3）对指针赋值</h3><p>不管是整型、浮点型、字符型，还是其他数据类型的变量，它的地址都是一个十六进制数。我们用整型指针存放整型变量的地址，用字符型指针存放字符型变量的地址，用浮点型指针存放浮点型变量的地址，用自定义数据类型指针存放自定义数据类型变量的地址。</p>\n<p>语法：<code>指针=&amp;变量名;</code></p>\n<h3 id=\"4-指针占用的内存\"><a href=\"#4-指针占用的内存\" class=\"headerlink\" title=\"4)指针占用的内存\"></a>4)指针占用的内存</h3><p>指针也是变量，是变量就要占用内存空间。</p>\n<p>在64位操作系统中，不管什么类型的指针，占用内存都是8字节。</p>\n<p>在C++中，指针是复合数据类型，复合数据类型是指基于其他类型而定义的数据类型，在程序中，int是整型变量，int *是整型指针类型，int *可以用于sizeof运算符，可以用于数据类型的强制转换，总的来说，把int *当成一种数据类型就对了。</p>\n<h2 id=\"使用指针\"><a href=\"#使用指针\" class=\"headerlink\" title=\"使用指针\"></a>使用指针</h2><p>声明变量后，在没有赋值之前，里面是乱七八糟的值，这时候不能使用指针。</p>\n<p>指针存放变量的地址，因此，指针名表示的是地址（就像变量名可以表示变量的值一样）。</p>\n<p><em>运算符被称为<strong>间接值</strong>或<strong>解除引用（解引用）</strong>，将它用于指针，可以的得到该地址的内存中存储的值，</em>也是乘法符号，C++根据上下文来确定所指的是乘法还是解引用。</p>\n<p>变量和指向变量的指针就像同一枚硬币的两面。</p>\n<p><code>int no = 38;</code></p>\n<p><code>int *ptr = &amp;no;</code></p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/chauity/images/20221025104337.jpg\"></p>\n<p>程序在存储数据的时候，必须跟踪三种基本属性：</p>\n<ul>\n<li>程序存储在哪里；</li>\n<li>数据是什么类型；</li>\n<li>数据的值是多少。</li>\n</ul>\n<p>用两种策略可以达到以上目的；</p>\n<p>声明一个普通变量，声明时指出数据类型和变量名（符号名），系统在内部跟踪该内存单元。</p>\n<p>声明一个指针变量，存储的值是地址，而不是值本身，程序直接访问该内存单元。</p>\n<h2 id=\"指针用于函数的参数\"><a href=\"#指针用于函数的参数\" class=\"headerlink\" title=\"指针用于函数的参数\"></a>指针用于函数的参数</h2><p>如果把函数的形参声明为指针，调用的时候把实参地址传进去，形参中存放的是实参的地址，在函数中</p>\n<p>通过解引用的方法直接操作内存中的数据，可以修改实数的值，这种方法被通俗的称为<strong>地址传递</strong>或<strong>传地址</strong>。</p>\n<p><strong>值传递</strong>：函数的形参是普通变量。</p>\n<p>传地址的意义如下：</p>\n<ul>\n<li>可以在函数中修改实参的值。</li>\n<li>减少内存拷贝，提升性能。</li>\n</ul>\n<h2 id=\"使用常量\"><a href=\"#使用常量\" class=\"headerlink\" title=\"使用常量\"></a>使用常量</h2><p>常量是程序中固定不变的数据。</p>\n<h3 id=\"1）宏常量\"><a href=\"#1）宏常量\" class=\"headerlink\" title=\"1）宏常量\"></a>1）宏常量</h3><p>一般在 main 函数的上面声明，用大写命名。</p>\n<p>语法：<code>#define 常量名 值</code></p>\n<h3 id=\"2）const修饰的变量\"><a href=\"#2）const修饰的变量\" class=\"headerlink\" title=\"2）const修饰的变量\"></a>2）const修饰的变量</h3><p>在程序的任何地方都可以声明。</p>\n<p>语法：<code>const 数据类型 常量名 = 值</code></p>\n<h3 id=\"3-常量的特点\"><a href=\"#3-常量的特点\" class=\"headerlink\" title=\"3)常量的特点\"></a>3)常量的特点</h3><p>程序中不允许改变常量的值，否则编译的时候会报错。</p>\n<h3 id=\"4）示例\"><a href=\"#4）示例\" class=\"headerlink\" title=\"4）示例\"></a>4）示例</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span>    <span class=\"token comment\">//包含头文件</span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MONTHS</span> <span class=\"token expression\"><span class=\"token number\">12</span>           </span><span class=\"token comment\">//一年中的月份数</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">PI</span>     <span class=\"token expression\"><span class=\"token number\">3.14159</span>      </span><span class=\"token comment\">//圆周率</span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>        <span class=\"token comment\">//指定缺省的命名空间</span>\n\n<span class=\"token comment\">//main函数u，程序从这里开始执行，每个程序只能有一个 main 函数。</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> days <span class=\"token operator\">=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">//一星期的天数</span>\n\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"一年有\"</span> <span class=\"token operator\">&lt;&lt;</span> MONTHS <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"个月\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">&#125;</span>  <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"用const修饰指针\"><a href=\"#用const修饰指针\" class=\"headerlink\" title=\"用const修饰指针\"></a>用const修饰指针</h2><h3 id=\"1）常量指针\"><a href=\"#1）常量指针\" class=\"headerlink\" title=\"1）常量指针\"></a>1）常量指针</h3><p>语法：<code>const 数据类型 *变量名;</code></p>\n<p>不能通过解引用的方法修改内存地址中的值（用原始的变量名是可以修改的）。</p>\n<p>注意：</p>\n<ul>\n<li>指向的变量（对象）可以改变（之前是指向变量a的，后来可以改为指向变量b）。</li>\n<li>一般用于修饰函数的形参，表示不希望在函数里修改内存地址中的值。</li>\n<li>如果用于形参、虽然指向的对象可以改变，但那么做没有任何意义。</li>\n<li>如果形参的值不需要改变，建议加上const修饰，程序可读性更好。</li>\n</ul>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//不能通过解引用赋值修改值，编译会报错 错误  C3892</span>\n<span class=\"token comment\">//*p = 13;</span>\n<span class=\"token comment\">//只能通过变量修改值</span>\na <span class=\"token operator\">=</span> <span class=\"token number\">13</span><span class=\"token punctuation\">;</span>\ncout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a=\"</span> <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\",*p=\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\np <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">;</span>\ncout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"b=\"</span> <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\",*p=\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> no<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">*</span>str<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//参数加上const，解引用赋值,编译时 同样会报错</span>\n    <span class=\"token comment\">//*no = 8;</span>\n    <span class=\"token comment\">//*str = \"我有一只小小鸟.\";</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"亲爱的\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>no <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"号\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>str <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"2-指针常量\"><a href=\"#2-指针常量\" class=\"headerlink\" title=\"2)指针常量\"></a>2)指针常量</h3><p>语法：<code>数据类型 *const 变量名;</code></p>\n<p>指向的变量（对象）不可改变。</p>\n<p>注意：</p>\n<ul>\n<li>在定义的同时必须初始化，否则没有意义。</li>\n<li>可以通过解引用的方法修改内存地址中的值。</li>\n<li>C++编译器把指针常量做了一些特别的处理，改投换面之后，有了一个新的名字，叫做引用。</li>\n</ul>\n<h3 id=\"3）常指针常量\"><a href=\"#3）常指针常量\" class=\"headerlink\" title=\"3）常指针常量\"></a>3）常指针常量</h3><p>语法：<code>const 数据类型 *const 变量名;</code></p>\n<p>指向的变量（对象）不可改变，不能通过解引用的方法修改内存地址中的值。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//常指针常量</span>\n<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>b <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> <span class=\"token keyword\">const</span> pa <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//既不能改变指针指向，也不能解引用改变值，下列两种写法都是错误的</span>\n<span class=\"token comment\">//*pa = 13;</span>\n<span class=\"token comment\">//pa = &amp;b;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>常量指针：指针指向可以改，指针指向的值不可以改。</p>\n<p>指针常量：指针指向不可以改，指针的指向的值可以更改。</p>\n<p>常指针常量：指针指向不可以改，指针指向的值不可以更改。</p>\n<h2 id=\"void-关键字\"><a href=\"#void-关键字\" class=\"headerlink\" title=\"void 关键字\"></a>void 关键字</h2><p>在C++中，void表示为<strong>无类型</strong>，主要有三个用途：</p>\n<ul>\n<li><p>函数的返回值使用 <code>void</code> ，表示函数没有返回值。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">func</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n     <span class=\"token comment\">//函数体代码</span>\n     <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>   \n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>函数的参数填 <code>void</code> ，表示函数不需要参数（或者让参数列表空着）。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//函数体代码</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>函数的形参用 <code>void *</code>，表示接受任意数据类型的指针。</p>\n<p>注意：</p>\n<ul>\n<li>不能用 <code>void</code>声明变量，它不能代表一个真实的变量。</li>\n<li>不能对 <code>void *</code>指针直接解引用（需要转化为其他类型的指针）。</li>\n<li>把其他类型的指针赋值给 <code>void *</code>指针不需要转换。</li>\n<li>把 <code>void *</code>指针赋值给其他类型的指针需要转换。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"动态分配内存new和delete\"><a href=\"#动态分配内存new和delete\" class=\"headerlink\" title=\"动态分配内存new和delete\"></a>动态分配内存new和delete</h2><p>C++内存空间</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/chauity/images/20221025192803.jpg\"></p>\n<p>使用堆区内存有四个步骤：</p>\n<p>1）声明一个指针；</p>\n<p>2）用new运算符向系统申请一块内存，让指针指向这块内存；</p>\n<p>3）通过对指针的解引用的方法，像使用变量一样使用这块内存；</p>\n<p>4）如果这块内存不用了，用delete运算符释放它；</p>\n<p>申请内存的语法：<code>new 数据类型(初始值);</code> &#x2F;&#x2F;C++11支持 {}</p>\n<p>如果申请成功，返回一个地址；如果申请失败，返回一个空地址（暂时不考虑失败的情况）</p>\n<p>是否内存的语法：<code>delete 地址;</code></p>\n<p>注意：</p>\n<ul>\n<li>动态分配出来的内存没有变量名，只能通过指向它的指针来操作内存中的数据。</li>\n<li>如果动态分配的内存用不了，必须使用 <code>delete</code>释放它，否则可能用尽系统的内存。</li>\n<li>动态分配的内存的生命周期与程序相同，程序退出时，如果没有是否，系统将自动回收。</li>\n<li>就算指针的作用域已失效，所指向的内存也不会释放。</li>\n<li>用指针跟踪已分配的内存时，不能跟丢。</li>\n</ul>\n<h2 id=\"二级指针\"><a href=\"#二级指针\" class=\"headerlink\" title=\"二级指针\"></a>二级指针</h2><p><strong>指针</strong>是<strong>指针变量</strong>的简称，也是<strong>变量</strong>。是<strong>变量</strong>就有<strong>地址</strong>。</p>\n<p><strong>指针</strong>用于存放<strong>普通变量</strong>的<strong>地址</strong>。</p>\n<p><strong>二级指针</strong>用于存放<strong>指针变量</strong>的<strong>地址</strong>。</p>\n<p>声明<strong>二级指针</strong>的语法：<code>数据类型** 指针名;</code></p>\n<p>使用指针有两个目的：1）传递地址；2）存放动态分配的内存的地址。</p>\n<p>在函数中，如果传递普通变量的地址，形参用指针；<strong>传递指针的地址，形参用二级指针</strong>。</p>\n<h2 id=\"空指针\"><a href=\"#空指针\" class=\"headerlink\" title=\"空指针\"></a>空指针</h2><p>在C++和C中，用0或NULL都可以表示空指针。</p>\n<p>声明指针后，在赋值之前，让它指向空，表示没有任何地址。</p>\n<h3 id=\"1）使用空指针的后果\"><a href=\"#1）使用空指针的后果\" class=\"headerlink\" title=\"1）使用空指针的后果\"></a>1）使用空指针的后果</h3><p><strong>如果对空指针解引用，程序会崩溃。</strong></p>\n<p><strong>如果对空指针使用delete运算符，系统忽略该操作，不会出现异常。所以内存释放后，也应该把指针指向空。</strong></p>\n<p>为什么空指针访问会出现异常？</p>\n<p>NULL指针分配的分区：其范围是从 <code>0x00000000</code>到 <code>0x0000FFFF</code>。这段代码是空闲的，对于空闲的空间而言，没有相对应的物理存储器，与之相对应，所以对这段代码来说，任何读写操作都会引起异常的。空指针是程序无论在核实都没有物理存储器与之相对应的地址。为了保障“无论何时”这个条件，需要人为划分一个空指针的区域，固有上面NULL指针分区。</p>\n<h3 id=\"2）C-11的nullptr\"><a href=\"#2）C-11的nullptr\" class=\"headerlink\" title=\"2）C++ 11的nullptr\"></a>2）C++ 11的nullptr</h3><p>用0和NULL表示空指针会产生歧义，C++11建议用 <code>nullptr</code>表示空指针，也就是 <code>（void *）0</code>。</p>\n<p>NULL在C++中就是0，这是因为在C++中 <code>void *</code> 类型是不允许隐式转换成其他类型的，所以之前C++中用0来代表空指针，但是在重载整型的情况下，会出现上述的问题。所以C++11加入了nullptr，可以保证在任何情况下都代表空指针，而不会出现上述的情况，因此，建议用nullptr替代NULL，而NULL就当做0使用。</p>\n<p><strong>注意：在Linux平台下，如果使用nullptr，编译要加 <code>-std=c++11</code>参数</strong></p>\n<h2 id=\"野指针\"><a href=\"#野指针\" class=\"headerlink\" title=\"野指针\"></a>野指针</h2><p>野指针就是指针指向的不是一个有效（合法）的地址。</p>\n<p>在程序中，如果访问野指针，<strong>可能</strong>会造成程序的崩溃。</p>\n<p>出现野指针的情况主要有三种：</p>\n<ul>\n<li>1）指针在定义的时候，如果没有初始化，它的值是不确定的（乱指一气）。</li>\n<li>2）如果指针指向了动态分配的内存，内存被释放后，指针不会置空，但是，指向的指针已失效。</li>\n<li>3）指针指向的变量超越变量的作用域（变量的内存空间已被回收），作用域指的是是局部变量还是全局变量。</li>\n</ul>\n<p>规避方法：</p>\n<ul>\n<li><p>1）指针在定义的时候，如果没地方指，就初始化为nullptr。</p>\n</li>\n<li><p>2）动态分配的内存释放后，将其置位nullptr。</p>\n</li>\n<li><p>3）函数不要返回局部变量的地址。</p>\n<p>注意：野指针的危害比空指针要大很多，如果访问野指针，<strong>可能</strong>会造成程序的崩溃。是可能，表示一定，程序的表现是<strong>不稳定</strong>，增加了调试的难度。</p>\n</li>\n</ul>\n<h2 id=\"一维数组与指针\"><a href=\"#一维数组与指针\" class=\"headerlink\" title=\"一维数组与指针\"></a>一维数组与指针</h2><h3 id=\"1-指针的算术\"><a href=\"#1-指针的算术\" class=\"headerlink\" title=\"1) 指针的算术\"></a>1) 指针的算术</h3><ul>\n<li>将一个整型变量加1后，其值将增加1。</li>\n<li>但是，将指针变量（地址的值）加1后，增加的量等于它指向的数据类型的字节数。</li>\n</ul>\n<h3 id=\"2-数组的地址\"><a href=\"#2-数组的地址\" class=\"headerlink\" title=\"2) 数组的地址\"></a>2) 数组的地址</h3><ul>\n<li>a) 数组在内存中占用的空间是连续的。</li>\n<li>b) C++数组名解释为数组的第0个元素的地址。</li>\n<li>c) 数组第0个元素的地址和数组首地址的取值是相同的。</li>\n<li>d) 数组第n个元素的地址是：<code>数组首地址+n</code></li>\n<li>e) C++编译器把 <code>数组名[下标]</code>解释为 <code>*(数组首地址+下标)</code></li>\n</ul>\n<h3 id=\"3-数组的本质\"><a href=\"#3-数组的本质\" class=\"headerlink\" title=\"3) 数组的本质\"></a>3) 数组的本质</h3><ul>\n<li>数组是占用连续空间的一块内存，数组名被解释为数组第0个元素的地址。C++操作内存有两种方法：数组解释法和指针表示法，他们说等价的。</li>\n</ul>\n<h3 id=\"4）数组名不一定会被解释为地址\"><a href=\"#4）数组名不一定会被解释为地址\" class=\"headerlink\" title=\"4）数组名不一定会被解释为地址\"></a>4）数组名不一定会被解释为地址</h3><ul>\n<li>在多数情况下，C++将数组名解释成第0个元素的地址，但是，将sizeof运算符用于数组名，返回的是整个数组的内存空间的字节数。</li>\n<li>可以修改指针的值，但数组是常量，不可修改。</li>\n</ul>\n<h2 id=\"一维数组用于函数的参数\"><a href=\"#一维数组用于函数的参数\" class=\"headerlink\" title=\"一维数组用于函数的参数\"></a>一维数组用于函数的参数</h2><h3 id=\"1）指针的数组表示\"><a href=\"#1）指针的数组表示\" class=\"headerlink\" title=\"1）指针的数组表示\"></a>1）指针的数组表示</h3><ul>\n<li>在C++内部，用指针来处理数组。</li>\n<li>C++编译器把 <code>数组名[下标]</code>解释为 <code>*(数组首地址+下标)</code></li>\n<li>C++编译器把 <code>地址[下标]</code>解释为 <code>*(地址+下标)</code></li>\n</ul>\n<h3 id=\"2）一维数组用于函数的参数\"><a href=\"#2）一维数组用于函数的参数\" class=\"headerlink\" title=\"2）一维数组用于函数的参数\"></a>2）一维数组用于函数的参数</h3><ul>\n<li><p>一维数组用于函数的参数时，只能传数组的地址，并且必须把数组长度也传进去，除非数组中有最后一个元素的标志。</p>\n</li>\n<li><p>书写的方法有两种：</p>\n<p><code>void func(int* arr,int len)</code></p>\n</li>\n</ul>\n<p>        <code>void func(int* arr[],int len)</code></p>\n<ul>\n<li><p>注意：</p>\n<p>在函数中，可以用数组表示法，也可以用指针表示法。</p>\n<p>在函数中，不要对指针名用sizeof运算符，由于64位操作系统指针大小是永远是8，并不是数组占用内存的大小。</p>\n</li>\n</ul>\n<h2 id=\"用-new-动态创建一维数组\"><a href=\"#用-new-动态创建一维数组\" class=\"headerlink\" title=\"用 new 动态创建一维数组\"></a>用 new 动态创建一维数组</h2><p>普通数组在栈上分配内存，栈很小；如果需要存放更多的元素，必须在堆上分配内存。</p>\n<p>动态创建一维数组的语法：<code>数据类型 *指针=new 数据类型[数组长度]</code>；</p>\n<p>释放一维数组的语法：<code>delete []指针;</code></p>\n<p>注意：</p>\n<ul>\n<li>动态创建的数组没有数组名，不能用 sizeof 运算符。</li>\n<li>可以用数组比色法和指针表示法两种方式使用动态创建的数组。</li>\n<li>必须使用<mark><code>delete[]</code></mark>来释放内存（不能只用 <code>delete</code>）。</li>\n<li>不用用<mark><code>delete[]</code></mark>来释放不是<mark><code>new[]</code></mark>分配的内存。</li>\n<li>不要用<mark><code>delete[]</code></mark>释放同一个内存块两次（否则等同于操作野指针）。</li>\n<li>对空指针用<mark><code>delete[]</code></mark>是安全的（释放内存后，应该把指针置空nullptr）。</li>\n<li>声明普通数组的时候，数组长度可以用变量，相当于在栈上动态创建数组，并且不需要释放。</li>\n<li>如果内存不足，调用<mark><code>new</code></mark>会产生异常，导致程序终止；如果在new关键字后面加（<mark><code>std::nothrow</code></mark>）选项，则返回<mark><code>nullptr</code></mark>，不会产生异常。</li>\n<li>为什么用<mark><code>delete[]</code></mark>释放数组的时候，不需要指定数组的大小？因为系统会自动跟踪分配的内存。</li>\n</ul>\n<h2 id=\"二维数组用于函数的参数\"><a href=\"#二维数组用于函数的参数\" class=\"headerlink\" title=\"二维数组用于函数的参数\"></a>二维数组用于函数的参数</h2><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p<span class=\"token punctuation\">;</span>      <span class=\"token comment\">//整型指针。</span>\n<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//一维整型指针数组，元素是3个整型指针（p[0]、p[1]、p[2]）。</span>\n<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> <span class=\"token function\">p</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//函数p的返回值类型是整型的地址。</span>\n<span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//p是函数指针，指针指向的函数具有两个int型的形参。函数的返回值是整型。</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"1）行指针（数组指针）\"><a href=\"#1）行指针（数组指针）\" class=\"headerlink\" title=\"1）行指针（数组指针）\"></a>1）行指针（数组指针）</h3><p>声明行指针的语法：<mark><code>数据类型 (*行指针名)[行的大小];   //行的大小即数组长度。</code></mark></p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//行指针的举例</span>\n<span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//p1是行指针，用于指向数组长度为3的int型数组。</span>\n<span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//p2是行指针，用于指向数组长度为5的int型数组。</span>\n<span class=\"token keyword\">double</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//p3是行指针，用于指向数组长度为5的double型数组。</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<p>一维数组名被解释为数组的第0个元素地址。</p>\n<p>对一维数组名取地址得到的是数组的地址，是行地址。</p>\n<h3 id=\"2）二维数组名是行地址\"><a href=\"#2）二维数组名是行地址\" class=\"headerlink\" title=\"2）二维数组名是行地址\"></a>2）二维数组名是行地址</h3><p><code>int bh[2][3] = &#123;&#123;11,12,13&#125;,&#123;21,22,23&#125;&#125;;</code></p>\n<p>bh 是二维数组名，该数组有2元素，每一个元素又是一个<mark><code>数组长度为3的整型数组</code></mark>。</p>\n<p>bh被解释为<mark><code>数组长度为三的整型数组</code></mark>类型的地址。</p>\n<p>如果存放bh的值，要用<mark><code>数组长度为3的整型数组</code></mark>类型的指针。</p>\n<p>int (*p)[3] &#x3D; bh</p>\n<h3 id=\"3-把二维数组传递给函数\"><a href=\"#3-把二维数组传递给函数\" class=\"headerlink\" title=\"3)把二维数组传递给函数\"></a>3)把二维数组传递给函数</h3><p>如果要把bh传给函数，函数的声明如下：</p>\n<p>void func(int (*p)[3],int len);</p>\n<p>void func(int p[][3],int len);</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"指针的基本概念\"><a href=\"#指针的基本概念\" class=\"headerlink\" title=\"指针的基本概念\"></a>指针的基本概念</h2><h3 id=\"1）变量的地址\"><a href=\"#1）变量的地址\" class=\"headerlink\" title=\"1）变量的地址\"></a>1）变量的地址</h3><p>变量是内存变量的简称，在C++中，系统会给变量分配一块内存，内存是有地址的。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">0x00000001</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">0x00000002</td>\n</tr>\n<tr>\n<td align=\"center\">0x00000003</td>\n</tr>\n<tr>\n<td align=\"center\">0x00000004</td>\n</tr>\n<tr>\n<td align=\"center\">0x00000005</td>\n</tr>\n<tr>\n<td align=\"center\">0x00000006</td>\n</tr>\n<tr>\n<td align=\"center\">0x00000007</td>\n</tr>\n<tr>\n<td align=\"center\">0x00000008</td>\n</tr>\n<tr>\n<td align=\"center\">0x00000009</td>\n</tr>\n<tr>\n<td align=\"center\">0x0000000A</td>\n</tr>\n<tr>\n<td align=\"center\">0x0000000B</td>\n</tr>\n<tr>\n<td align=\"center\">……</td>\n</tr>\n<tr>\n<td align=\"center\">0xFFFFFFFF</td>\n</tr>\n</tbody></table>\n<p>C++用运算符&amp;获取变量在内存中的起始地址。</p>\n<p>语法：<code>&amp;变量名</code></p>\n<h3 id=\"2-指针变量\"><a href=\"#2-指针变量\" class=\"headerlink\" title=\"2)指针变量\"></a>2)指针变量</h3><p>指针变量简称指针，他是一种特殊的变量，专用于存放变量在内存中的<strong>起始地址</strong>。</p>\n<p>语法：<code>数据类型 *变量名;</code></p>\n<p>数据类型必须是合法的C++数据类型（int、char、double或其他自定义数据类型）。</p>\n<p>星号*与乘法中的星号是相同的，但是，在这个场景中，星号用于表示这个变量是指针。</p>\n<h3 id=\"3）对指针赋值\"><a href=\"#3）对指针赋值\" class=\"headerlink\" title=\"3）对指针赋值\"></a>3）对指针赋值</h3><p>不管是整型、浮点型、字符型，还是其他数据类型的变量，它的地址都是一个十六进制数。我们用整型指针存放整型变量的地址，用字符型指针存放字符型变量的地址，用浮点型指针存放浮点型变量的地址，用自定义数据类型指针存放自定义数据类型变量的地址。</p>\n<p>语法：<code>指针=&amp;变量名;</code></p>\n<h3 id=\"4-指针占用的内存\"><a href=\"#4-指针占用的内存\" class=\"headerlink\" title=\"4)指针占用的内存\"></a>4)指针占用的内存</h3><p>指针也是变量，是变量就要占用内存空间。</p>\n<p>在64位操作系统中，不管什么类型的指针，占用内存都是8字节。</p>\n<p>在C++中，指针是复合数据类型，复合数据类型是指基于其他类型而定义的数据类型，在程序中，int是整型变量，int *是整型指针类型，int *可以用于sizeof运算符，可以用于数据类型的强制转换，总的来说，把int *当成一种数据类型就对了。</p>\n<h2 id=\"使用指针\"><a href=\"#使用指针\" class=\"headerlink\" title=\"使用指针\"></a>使用指针</h2><p>声明变量后，在没有赋值之前，里面是乱七八糟的值，这时候不能使用指针。</p>\n<p>指针存放变量的地址，因此，指针名表示的是地址（就像变量名可以表示变量的值一样）。</p>\n<p><em>运算符被称为<strong>间接值</strong>或<strong>解除引用（解引用）</strong>，将它用于指针，可以的得到该地址的内存中存储的值，</em>也是乘法符号，C++根据上下文来确定所指的是乘法还是解引用。</p>\n<p>变量和指向变量的指针就像同一枚硬币的两面。</p>\n<p><code>int no = 38;</code></p>\n<p><code>int *ptr = &amp;no;</code></p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/chauity/images/20221025104337.jpg\"></p>\n<p>程序在存储数据的时候，必须跟踪三种基本属性：</p>\n<ul>\n<li>程序存储在哪里；</li>\n<li>数据是什么类型；</li>\n<li>数据的值是多少。</li>\n</ul>\n<p>用两种策略可以达到以上目的；</p>\n<p>声明一个普通变量，声明时指出数据类型和变量名（符号名），系统在内部跟踪该内存单元。</p>\n<p>声明一个指针变量，存储的值是地址，而不是值本身，程序直接访问该内存单元。</p>\n<h2 id=\"指针用于函数的参数\"><a href=\"#指针用于函数的参数\" class=\"headerlink\" title=\"指针用于函数的参数\"></a>指针用于函数的参数</h2><p>如果把函数的形参声明为指针，调用的时候把实参地址传进去，形参中存放的是实参的地址，在函数中</p>\n<p>通过解引用的方法直接操作内存中的数据，可以修改实数的值，这种方法被通俗的称为<strong>地址传递</strong>或<strong>传地址</strong>。</p>\n<p><strong>值传递</strong>：函数的形参是普通变量。</p>\n<p>传地址的意义如下：</p>\n<ul>\n<li>可以在函数中修改实参的值。</li>\n<li>减少内存拷贝，提升性能。</li>\n</ul>\n<h2 id=\"使用常量\"><a href=\"#使用常量\" class=\"headerlink\" title=\"使用常量\"></a>使用常量</h2><p>常量是程序中固定不变的数据。</p>\n<h3 id=\"1）宏常量\"><a href=\"#1）宏常量\" class=\"headerlink\" title=\"1）宏常量\"></a>1）宏常量</h3><p>一般在 main 函数的上面声明，用大写命名。</p>\n<p>语法：<code>#define 常量名 值</code></p>\n<h3 id=\"2）const修饰的变量\"><a href=\"#2）const修饰的变量\" class=\"headerlink\" title=\"2）const修饰的变量\"></a>2）const修饰的变量</h3><p>在程序的任何地方都可以声明。</p>\n<p>语法：<code>const 数据类型 常量名 = 值</code></p>\n<h3 id=\"3-常量的特点\"><a href=\"#3-常量的特点\" class=\"headerlink\" title=\"3)常量的特点\"></a>3)常量的特点</h3><p>程序中不允许改变常量的值，否则编译的时候会报错。</p>\n<h3 id=\"4）示例\"><a href=\"#4）示例\" class=\"headerlink\" title=\"4）示例\"></a>4）示例</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span>    <span class=\"token comment\">//包含头文件</span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MONTHS</span> <span class=\"token expression\"><span class=\"token number\">12</span>           </span><span class=\"token comment\">//一年中的月份数</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">PI</span>     <span class=\"token expression\"><span class=\"token number\">3.14159</span>      </span><span class=\"token comment\">//圆周率</span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>        <span class=\"token comment\">//指定缺省的命名空间</span>\n\n<span class=\"token comment\">//main函数u，程序从这里开始执行，每个程序只能有一个 main 函数。</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> days <span class=\"token operator\">=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">//一星期的天数</span>\n\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"一年有\"</span> <span class=\"token operator\">&lt;&lt;</span> MONTHS <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"个月\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">&#125;</span>  <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"用const修饰指针\"><a href=\"#用const修饰指针\" class=\"headerlink\" title=\"用const修饰指针\"></a>用const修饰指针</h2><h3 id=\"1）常量指针\"><a href=\"#1）常量指针\" class=\"headerlink\" title=\"1）常量指针\"></a>1）常量指针</h3><p>语法：<code>const 数据类型 *变量名;</code></p>\n<p>不能通过解引用的方法修改内存地址中的值（用原始的变量名是可以修改的）。</p>\n<p>注意：</p>\n<ul>\n<li>指向的变量（对象）可以改变（之前是指向变量a的，后来可以改为指向变量b）。</li>\n<li>一般用于修饰函数的形参，表示不希望在函数里修改内存地址中的值。</li>\n<li>如果用于形参、虽然指向的对象可以改变，但那么做没有任何意义。</li>\n<li>如果形参的值不需要改变，建议加上const修饰，程序可读性更好。</li>\n</ul>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//不能通过解引用赋值修改值，编译会报错 错误  C3892</span>\n<span class=\"token comment\">//*p = 13;</span>\n<span class=\"token comment\">//只能通过变量修改值</span>\na <span class=\"token operator\">=</span> <span class=\"token number\">13</span><span class=\"token punctuation\">;</span>\ncout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a=\"</span> <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\",*p=\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\np <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">;</span>\ncout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"b=\"</span> <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\",*p=\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> no<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">*</span>str<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//参数加上const，解引用赋值,编译时 同样会报错</span>\n    <span class=\"token comment\">//*no = 8;</span>\n    <span class=\"token comment\">//*str = \"我有一只小小鸟.\";</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"亲爱的\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>no <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"号\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>str <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"2-指针常量\"><a href=\"#2-指针常量\" class=\"headerlink\" title=\"2)指针常量\"></a>2)指针常量</h3><p>语法：<code>数据类型 *const 变量名;</code></p>\n<p>指向的变量（对象）不可改变。</p>\n<p>注意：</p>\n<ul>\n<li>在定义的同时必须初始化，否则没有意义。</li>\n<li>可以通过解引用的方法修改内存地址中的值。</li>\n<li>C++编译器把指针常量做了一些特别的处理，改投换面之后，有了一个新的名字，叫做引用。</li>\n</ul>\n<h3 id=\"3）常指针常量\"><a href=\"#3）常指针常量\" class=\"headerlink\" title=\"3）常指针常量\"></a>3）常指针常量</h3><p>语法：<code>const 数据类型 *const 变量名;</code></p>\n<p>指向的变量（对象）不可改变，不能通过解引用的方法修改内存地址中的值。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//常指针常量</span>\n<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>b <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> <span class=\"token keyword\">const</span> pa <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//既不能改变指针指向，也不能解引用改变值，下列两种写法都是错误的</span>\n<span class=\"token comment\">//*pa = 13;</span>\n<span class=\"token comment\">//pa = &amp;b;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>常量指针：指针指向可以改，指针指向的值不可以改。</p>\n<p>指针常量：指针指向不可以改，指针的指向的值可以更改。</p>\n<p>常指针常量：指针指向不可以改，指针指向的值不可以更改。</p>\n<h2 id=\"void-关键字\"><a href=\"#void-关键字\" class=\"headerlink\" title=\"void 关键字\"></a>void 关键字</h2><p>在C++中，void表示为<strong>无类型</strong>，主要有三个用途：</p>\n<ul>\n<li><p>函数的返回值使用 <code>void</code> ，表示函数没有返回值。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">func</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n     <span class=\"token comment\">//函数体代码</span>\n     <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>   \n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>函数的参数填 <code>void</code> ，表示函数不需要参数（或者让参数列表空着）。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//函数体代码</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>函数的形参用 <code>void *</code>，表示接受任意数据类型的指针。</p>\n<p>注意：</p>\n<ul>\n<li>不能用 <code>void</code>声明变量，它不能代表一个真实的变量。</li>\n<li>不能对 <code>void *</code>指针直接解引用（需要转化为其他类型的指针）。</li>\n<li>把其他类型的指针赋值给 <code>void *</code>指针不需要转换。</li>\n<li>把 <code>void *</code>指针赋值给其他类型的指针需要转换。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"动态分配内存new和delete\"><a href=\"#动态分配内存new和delete\" class=\"headerlink\" title=\"动态分配内存new和delete\"></a>动态分配内存new和delete</h2><p>C++内存空间</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/chauity/images/20221025192803.jpg\"></p>\n<p>使用堆区内存有四个步骤：</p>\n<p>1）声明一个指针；</p>\n<p>2）用new运算符向系统申请一块内存，让指针指向这块内存；</p>\n<p>3）通过对指针的解引用的方法，像使用变量一样使用这块内存；</p>\n<p>4）如果这块内存不用了，用delete运算符释放它；</p>\n<p>申请内存的语法：<code>new 数据类型(初始值);</code> &#x2F;&#x2F;C++11支持 {}</p>\n<p>如果申请成功，返回一个地址；如果申请失败，返回一个空地址（暂时不考虑失败的情况）</p>\n<p>是否内存的语法：<code>delete 地址;</code></p>\n<p>注意：</p>\n<ul>\n<li>动态分配出来的内存没有变量名，只能通过指向它的指针来操作内存中的数据。</li>\n<li>如果动态分配的内存用不了，必须使用 <code>delete</code>释放它，否则可能用尽系统的内存。</li>\n<li>动态分配的内存的生命周期与程序相同，程序退出时，如果没有是否，系统将自动回收。</li>\n<li>就算指针的作用域已失效，所指向的内存也不会释放。</li>\n<li>用指针跟踪已分配的内存时，不能跟丢。</li>\n</ul>\n<h2 id=\"二级指针\"><a href=\"#二级指针\" class=\"headerlink\" title=\"二级指针\"></a>二级指针</h2><p><strong>指针</strong>是<strong>指针变量</strong>的简称，也是<strong>变量</strong>。是<strong>变量</strong>就有<strong>地址</strong>。</p>\n<p><strong>指针</strong>用于存放<strong>普通变量</strong>的<strong>地址</strong>。</p>\n<p><strong>二级指针</strong>用于存放<strong>指针变量</strong>的<strong>地址</strong>。</p>\n<p>声明<strong>二级指针</strong>的语法：<code>数据类型** 指针名;</code></p>\n<p>使用指针有两个目的：1）传递地址；2）存放动态分配的内存的地址。</p>\n<p>在函数中，如果传递普通变量的地址，形参用指针；<strong>传递指针的地址，形参用二级指针</strong>。</p>\n<h2 id=\"空指针\"><a href=\"#空指针\" class=\"headerlink\" title=\"空指针\"></a>空指针</h2><p>在C++和C中，用0或NULL都可以表示空指针。</p>\n<p>声明指针后，在赋值之前，让它指向空，表示没有任何地址。</p>\n<h3 id=\"1）使用空指针的后果\"><a href=\"#1）使用空指针的后果\" class=\"headerlink\" title=\"1）使用空指针的后果\"></a>1）使用空指针的后果</h3><p><strong>如果对空指针解引用，程序会崩溃。</strong></p>\n<p><strong>如果对空指针使用delete运算符，系统忽略该操作，不会出现异常。所以内存释放后，也应该把指针指向空。</strong></p>\n<p>为什么空指针访问会出现异常？</p>\n<p>NULL指针分配的分区：其范围是从 <code>0x00000000</code>到 <code>0x0000FFFF</code>。这段代码是空闲的，对于空闲的空间而言，没有相对应的物理存储器，与之相对应，所以对这段代码来说，任何读写操作都会引起异常的。空指针是程序无论在核实都没有物理存储器与之相对应的地址。为了保障“无论何时”这个条件，需要人为划分一个空指针的区域，固有上面NULL指针分区。</p>\n<h3 id=\"2）C-11的nullptr\"><a href=\"#2）C-11的nullptr\" class=\"headerlink\" title=\"2）C++ 11的nullptr\"></a>2）C++ 11的nullptr</h3><p>用0和NULL表示空指针会产生歧义，C++11建议用 <code>nullptr</code>表示空指针，也就是 <code>（void *）0</code>。</p>\n<p>NULL在C++中就是0，这是因为在C++中 <code>void *</code> 类型是不允许隐式转换成其他类型的，所以之前C++中用0来代表空指针，但是在重载整型的情况下，会出现上述的问题。所以C++11加入了nullptr，可以保证在任何情况下都代表空指针，而不会出现上述的情况，因此，建议用nullptr替代NULL，而NULL就当做0使用。</p>\n<p><strong>注意：在Linux平台下，如果使用nullptr，编译要加 <code>-std=c++11</code>参数</strong></p>\n<h2 id=\"野指针\"><a href=\"#野指针\" class=\"headerlink\" title=\"野指针\"></a>野指针</h2><p>野指针就是指针指向的不是一个有效（合法）的地址。</p>\n<p>在程序中，如果访问野指针，<strong>可能</strong>会造成程序的崩溃。</p>\n<p>出现野指针的情况主要有三种：</p>\n<ul>\n<li>1）指针在定义的时候，如果没有初始化，它的值是不确定的（乱指一气）。</li>\n<li>2）如果指针指向了动态分配的内存，内存被释放后，指针不会置空，但是，指向的指针已失效。</li>\n<li>3）指针指向的变量超越变量的作用域（变量的内存空间已被回收），作用域指的是是局部变量还是全局变量。</li>\n</ul>\n<p>规避方法：</p>\n<ul>\n<li><p>1）指针在定义的时候，如果没地方指，就初始化为nullptr。</p>\n</li>\n<li><p>2）动态分配的内存释放后，将其置位nullptr。</p>\n</li>\n<li><p>3）函数不要返回局部变量的地址。</p>\n<p>注意：野指针的危害比空指针要大很多，如果访问野指针，<strong>可能</strong>会造成程序的崩溃。是可能，表示一定，程序的表现是<strong>不稳定</strong>，增加了调试的难度。</p>\n</li>\n</ul>\n<h2 id=\"一维数组与指针\"><a href=\"#一维数组与指针\" class=\"headerlink\" title=\"一维数组与指针\"></a>一维数组与指针</h2><h3 id=\"1-指针的算术\"><a href=\"#1-指针的算术\" class=\"headerlink\" title=\"1) 指针的算术\"></a>1) 指针的算术</h3><ul>\n<li>将一个整型变量加1后，其值将增加1。</li>\n<li>但是，将指针变量（地址的值）加1后，增加的量等于它指向的数据类型的字节数。</li>\n</ul>\n<h3 id=\"2-数组的地址\"><a href=\"#2-数组的地址\" class=\"headerlink\" title=\"2) 数组的地址\"></a>2) 数组的地址</h3><ul>\n<li>a) 数组在内存中占用的空间是连续的。</li>\n<li>b) C++数组名解释为数组的第0个元素的地址。</li>\n<li>c) 数组第0个元素的地址和数组首地址的取值是相同的。</li>\n<li>d) 数组第n个元素的地址是：<code>数组首地址+n</code></li>\n<li>e) C++编译器把 <code>数组名[下标]</code>解释为 <code>*(数组首地址+下标)</code></li>\n</ul>\n<h3 id=\"3-数组的本质\"><a href=\"#3-数组的本质\" class=\"headerlink\" title=\"3) 数组的本质\"></a>3) 数组的本质</h3><ul>\n<li>数组是占用连续空间的一块内存，数组名被解释为数组第0个元素的地址。C++操作内存有两种方法：数组解释法和指针表示法，他们说等价的。</li>\n</ul>\n<h3 id=\"4）数组名不一定会被解释为地址\"><a href=\"#4）数组名不一定会被解释为地址\" class=\"headerlink\" title=\"4）数组名不一定会被解释为地址\"></a>4）数组名不一定会被解释为地址</h3><ul>\n<li>在多数情况下，C++将数组名解释成第0个元素的地址，但是，将sizeof运算符用于数组名，返回的是整个数组的内存空间的字节数。</li>\n<li>可以修改指针的值，但数组是常量，不可修改。</li>\n</ul>\n<h2 id=\"一维数组用于函数的参数\"><a href=\"#一维数组用于函数的参数\" class=\"headerlink\" title=\"一维数组用于函数的参数\"></a>一维数组用于函数的参数</h2><h3 id=\"1）指针的数组表示\"><a href=\"#1）指针的数组表示\" class=\"headerlink\" title=\"1）指针的数组表示\"></a>1）指针的数组表示</h3><ul>\n<li>在C++内部，用指针来处理数组。</li>\n<li>C++编译器把 <code>数组名[下标]</code>解释为 <code>*(数组首地址+下标)</code></li>\n<li>C++编译器把 <code>地址[下标]</code>解释为 <code>*(地址+下标)</code></li>\n</ul>\n<h3 id=\"2）一维数组用于函数的参数\"><a href=\"#2）一维数组用于函数的参数\" class=\"headerlink\" title=\"2）一维数组用于函数的参数\"></a>2）一维数组用于函数的参数</h3><ul>\n<li><p>一维数组用于函数的参数时，只能传数组的地址，并且必须把数组长度也传进去，除非数组中有最后一个元素的标志。</p>\n</li>\n<li><p>书写的方法有两种：</p>\n<p><code>void func(int* arr,int len)</code></p>\n</li>\n</ul>\n<p>        <code>void func(int* arr[],int len)</code></p>\n<ul>\n<li><p>注意：</p>\n<p>在函数中，可以用数组表示法，也可以用指针表示法。</p>\n<p>在函数中，不要对指针名用sizeof运算符，由于64位操作系统指针大小是永远是8，并不是数组占用内存的大小。</p>\n</li>\n</ul>\n<h2 id=\"用-new-动态创建一维数组\"><a href=\"#用-new-动态创建一维数组\" class=\"headerlink\" title=\"用 new 动态创建一维数组\"></a>用 new 动态创建一维数组</h2><p>普通数组在栈上分配内存，栈很小；如果需要存放更多的元素，必须在堆上分配内存。</p>\n<p>动态创建一维数组的语法：<code>数据类型 *指针=new 数据类型[数组长度]</code>；</p>\n<p>释放一维数组的语法：<code>delete []指针;</code></p>\n<p>注意：</p>\n<ul>\n<li>动态创建的数组没有数组名，不能用 sizeof 运算符。</li>\n<li>可以用数组比色法和指针表示法两种方式使用动态创建的数组。</li>\n<li>必须使用<mark><code>delete[]</code></mark>来释放内存（不能只用 <code>delete</code>）。</li>\n<li>不用用<mark><code>delete[]</code></mark>来释放不是<mark><code>new[]</code></mark>分配的内存。</li>\n<li>不要用<mark><code>delete[]</code></mark>释放同一个内存块两次（否则等同于操作野指针）。</li>\n<li>对空指针用<mark><code>delete[]</code></mark>是安全的（释放内存后，应该把指针置空nullptr）。</li>\n<li>声明普通数组的时候，数组长度可以用变量，相当于在栈上动态创建数组，并且不需要释放。</li>\n<li>如果内存不足，调用<mark><code>new</code></mark>会产生异常，导致程序终止；如果在new关键字后面加（<mark><code>std::nothrow</code></mark>）选项，则返回<mark><code>nullptr</code></mark>，不会产生异常。</li>\n<li>为什么用<mark><code>delete[]</code></mark>释放数组的时候，不需要指定数组的大小？因为系统会自动跟踪分配的内存。</li>\n</ul>\n<h2 id=\"二维数组用于函数的参数\"><a href=\"#二维数组用于函数的参数\" class=\"headerlink\" title=\"二维数组用于函数的参数\"></a>二维数组用于函数的参数</h2><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p<span class=\"token punctuation\">;</span>      <span class=\"token comment\">//整型指针。</span>\n<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//一维整型指针数组，元素是3个整型指针（p[0]、p[1]、p[2]）。</span>\n<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> <span class=\"token function\">p</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//函数p的返回值类型是整型的地址。</span>\n<span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//p是函数指针，指针指向的函数具有两个int型的形参。函数的返回值是整型。</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"1）行指针（数组指针）\"><a href=\"#1）行指针（数组指针）\" class=\"headerlink\" title=\"1）行指针（数组指针）\"></a>1）行指针（数组指针）</h3><p>声明行指针的语法：<mark><code>数据类型 (*行指针名)[行的大小];   //行的大小即数组长度。</code></mark></p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//行指针的举例</span>\n<span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//p1是行指针，用于指向数组长度为3的int型数组。</span>\n<span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//p2是行指针，用于指向数组长度为5的int型数组。</span>\n<span class=\"token keyword\">double</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//p3是行指针，用于指向数组长度为5的double型数组。</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<p>一维数组名被解释为数组的第0个元素地址。</p>\n<p>对一维数组名取地址得到的是数组的地址，是行地址。</p>\n<h3 id=\"2）二维数组名是行地址\"><a href=\"#2）二维数组名是行地址\" class=\"headerlink\" title=\"2）二维数组名是行地址\"></a>2）二维数组名是行地址</h3><p><code>int bh[2][3] = &#123;&#123;11,12,13&#125;,&#123;21,22,23&#125;&#125;;</code></p>\n<p>bh 是二维数组名，该数组有2元素，每一个元素又是一个<mark><code>数组长度为3的整型数组</code></mark>。</p>\n<p>bh被解释为<mark><code>数组长度为三的整型数组</code></mark>类型的地址。</p>\n<p>如果存放bh的值，要用<mark><code>数组长度为3的整型数组</code></mark>类型的指针。</p>\n<p>int (*p)[3] &#x3D; bh</p>\n<h3 id=\"3-把二维数组传递给函数\"><a href=\"#3-把二维数组传递给函数\" class=\"headerlink\" title=\"3)把二维数组传递给函数\"></a>3)把二维数组传递给函数</h3><p>如果要把bh传给函数，函数的声明如下：</p>\n<p>void func(int (*p)[3],int len);</p>\n<p>void func(int p[][3],int len);</p>\n"},{"title":"冒泡排序","date":"2022-11-09T12:21:09.000Z","_content":"# 冒泡排序\n\n## 需求\n\n使用冒泡排序对一个数组进行排序。\n\n## 实现思路\n\n首先看冒泡排序的规则：\n\n![冒泡排序](https://gcore.jsdelivr.net/gh/chauity/images/blog/pictrues/bubbleSort.gif)\n\n相邻两个元素之间一一比较，出现有前一个值比后一个值大的情况，就交换两个元素的位置，没执行完一轮就有一个最大值（最小值）冒出来，直到最后顺序排列。\n\n这个动图看着很直观，但是却不能很形象的解决问题。这个问题的难点在于到底要比较多少次，每次应该需要多少个元素比较。\n\n下图是我简化了数组个数，画的冒泡排序的图解。\n\n![20221110093829](https://gcore.jsdelivr.net/gh/chauity/images/blog/pictures/20221110093829.png)\n\n如上图所示，我们不难得出：\n\n- 1.冒泡排序排序前的`数组个数`与`第几轮比较`和`每轮比较次数`之间的关系。即\n\n``` html\n\t数组个数 = 第几轮比较 + 每轮比较的次数;\n```\n\n- 2.每轮比较都会挑选出一个`最值`，这里升序以最大值为例。选出之后下一轮就不再比较。这就是冒泡排序所谓的冒泡特征，每轮冒出一个`最值`。\n  \n  - 通过上面第一点，我们不难想出，使用两个`for`循环嵌套完成冒泡排序，外层循环掌管`第几轮比较`，内层循环掌管`每轮比较的次数`。\n  - 通过上面第二点，又可以知道，从低到高两两比较，挑出一个`最值`，两两之间比较要交换位置时，会用到一个`temp`中间值存储零时变量。\n\n## 代码实现\n\n代码如下：我将在`bubbleSort` 函数中，使用两个形参，一个是数组指针，另外一个是数组长度。这是用户使用时，需要传递的参数。\n\n  \n``` cpp\n\nint * bubbleSort(int * parray,int length)\n{\n\t//外层循环：第几轮比较\n\tfor(int i=1; i<length; i++)\n\t{\n\t\t//内层循环：每轮怎么比较\n\t\tfor(int j=0; j<length-i; j++)\n\t\t{\n\t\t\tif(*(parray+j) > *(parray+j+1))\n\t\t\t{\n\t\t\t\tint temp = *(parray+j);\n\t\t\t\t*(parray+j) = *(parray+j+1);\n\t\t\t\t*(parray+j+1) = temp;\n\t\t\t}\n\t\t}\n\t}\n\treturn parray;\n}\n\n```\n\n\n完整的示例代码如下：\n\n其中，我将交换的代码封装成了swap函数。\n\n```cpp\n\n#include \"iostream\"\n#include \"cstdlib\"\n\n//函数原型\nint * bubbleSort(int *,int);\nvoid swap(int *,int *);\n\nint main()\n{\n\t//动态生成一个int类型的数组\n\tint n = 10;\n\tint *array = new int[n];\n\n\tstd::cout << \"执行冒泡排序前动态生成的数组是：\" << std::endl;\n\tfor(int i=0; i<n; i++)\n\t{\n\t\t// rand() 生成的随机数一般是几万\n\t\t// 这里除1000取余+1，生成0-1000的随机数\n\t\tarray[i] = (rand()%1000)+1;\n\t\tstd::cout << \"array[\" << i << \"]=\" << array[i] << std::endl; \n\t}\n\n\tstd::cout << \"--------------------------------\" << std::endl;\n\n\tbubbleSort(array, n);\n\n\tstd::cout << \"执行冒泡排序后的数组改变成了：\" << std::endl;\n\tfor(int i=0; i<n; i++)\n\t{\n\t\tstd::cout << \"array[\" << i << \"]=\" << array[i] << std::endl; \n\t}\n\t//清理数组内存\n\tdelete []array;\n\treturn 0;\n}\n\n// 这里排序是升序排序\nint * bubbleSort(int *parray,int length)\n{\n\tfor(int i=0; i<length-1; i++)\t\t// 比较 length-1 轮\n\t{\n\t\tfor(int j=0; j<length-i-1; j++)\t// 每轮要比较的元素\n\t\t{\n\t\t\tif(parray[j] > parray[j+1])\n\t\t\t{\n\t\t\t\tswap(&parray[j],&parray[j+1]);\n\t\t\t}\n\t\t}\n\t}\n\treturn parray;\n}\n\n// -- Swap 交换 A，B\nvoid swap(int *A,int *B)\n{\n\tint temp = *A;\n\t*A = *B;\n\t*B = temp;\n}\n\n```\n","source":"_posts/冒泡排序.md","raw":"---\ntitle: 冒泡排序\ndate: 2022-11-09 20:21:09\ntags: 冒泡排序\n---\n# 冒泡排序\n\n## 需求\n\n使用冒泡排序对一个数组进行排序。\n\n## 实现思路\n\n首先看冒泡排序的规则：\n\n![冒泡排序](https://gcore.jsdelivr.net/gh/chauity/images/blog/pictrues/bubbleSort.gif)\n\n相邻两个元素之间一一比较，出现有前一个值比后一个值大的情况，就交换两个元素的位置，没执行完一轮就有一个最大值（最小值）冒出来，直到最后顺序排列。\n\n这个动图看着很直观，但是却不能很形象的解决问题。这个问题的难点在于到底要比较多少次，每次应该需要多少个元素比较。\n\n下图是我简化了数组个数，画的冒泡排序的图解。\n\n![20221110093829](https://gcore.jsdelivr.net/gh/chauity/images/blog/pictures/20221110093829.png)\n\n如上图所示，我们不难得出：\n\n- 1.冒泡排序排序前的`数组个数`与`第几轮比较`和`每轮比较次数`之间的关系。即\n\n``` html\n\t数组个数 = 第几轮比较 + 每轮比较的次数;\n```\n\n- 2.每轮比较都会挑选出一个`最值`，这里升序以最大值为例。选出之后下一轮就不再比较。这就是冒泡排序所谓的冒泡特征，每轮冒出一个`最值`。\n  \n  - 通过上面第一点，我们不难想出，使用两个`for`循环嵌套完成冒泡排序，外层循环掌管`第几轮比较`，内层循环掌管`每轮比较的次数`。\n  - 通过上面第二点，又可以知道，从低到高两两比较，挑出一个`最值`，两两之间比较要交换位置时，会用到一个`temp`中间值存储零时变量。\n\n## 代码实现\n\n代码如下：我将在`bubbleSort` 函数中，使用两个形参，一个是数组指针，另外一个是数组长度。这是用户使用时，需要传递的参数。\n\n  \n``` cpp\n\nint * bubbleSort(int * parray,int length)\n{\n\t//外层循环：第几轮比较\n\tfor(int i=1; i<length; i++)\n\t{\n\t\t//内层循环：每轮怎么比较\n\t\tfor(int j=0; j<length-i; j++)\n\t\t{\n\t\t\tif(*(parray+j) > *(parray+j+1))\n\t\t\t{\n\t\t\t\tint temp = *(parray+j);\n\t\t\t\t*(parray+j) = *(parray+j+1);\n\t\t\t\t*(parray+j+1) = temp;\n\t\t\t}\n\t\t}\n\t}\n\treturn parray;\n}\n\n```\n\n\n完整的示例代码如下：\n\n其中，我将交换的代码封装成了swap函数。\n\n```cpp\n\n#include \"iostream\"\n#include \"cstdlib\"\n\n//函数原型\nint * bubbleSort(int *,int);\nvoid swap(int *,int *);\n\nint main()\n{\n\t//动态生成一个int类型的数组\n\tint n = 10;\n\tint *array = new int[n];\n\n\tstd::cout << \"执行冒泡排序前动态生成的数组是：\" << std::endl;\n\tfor(int i=0; i<n; i++)\n\t{\n\t\t// rand() 生成的随机数一般是几万\n\t\t// 这里除1000取余+1，生成0-1000的随机数\n\t\tarray[i] = (rand()%1000)+1;\n\t\tstd::cout << \"array[\" << i << \"]=\" << array[i] << std::endl; \n\t}\n\n\tstd::cout << \"--------------------------------\" << std::endl;\n\n\tbubbleSort(array, n);\n\n\tstd::cout << \"执行冒泡排序后的数组改变成了：\" << std::endl;\n\tfor(int i=0; i<n; i++)\n\t{\n\t\tstd::cout << \"array[\" << i << \"]=\" << array[i] << std::endl; \n\t}\n\t//清理数组内存\n\tdelete []array;\n\treturn 0;\n}\n\n// 这里排序是升序排序\nint * bubbleSort(int *parray,int length)\n{\n\tfor(int i=0; i<length-1; i++)\t\t// 比较 length-1 轮\n\t{\n\t\tfor(int j=0; j<length-i-1; j++)\t// 每轮要比较的元素\n\t\t{\n\t\t\tif(parray[j] > parray[j+1])\n\t\t\t{\n\t\t\t\tswap(&parray[j],&parray[j+1]);\n\t\t\t}\n\t\t}\n\t}\n\treturn parray;\n}\n\n// -- Swap 交换 A，B\nvoid swap(int *A,int *B)\n{\n\tint temp = *A;\n\t*A = *B;\n\t*B = temp;\n}\n\n```\n","slug":"冒泡排序","published":1,"updated":"2024-01-10T07:22:31.055Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clrh5tshj000accushphvehai","content":"<h1 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h1><h2 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h2><p>使用冒泡排序对一个数组进行排序。</p>\n<h2 id=\"实现思路\"><a href=\"#实现思路\" class=\"headerlink\" title=\"实现思路\"></a>实现思路</h2><p>首先看冒泡排序的规则：</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/chauity/images/blog/pictrues/bubbleSort.gif\" alt=\"冒泡排序\"></p>\n<p>相邻两个元素之间一一比较，出现有前一个值比后一个值大的情况，就交换两个元素的位置，没执行完一轮就有一个最大值（最小值）冒出来，直到最后顺序排列。</p>\n<p>这个动图看着很直观，但是却不能很形象的解决问题。这个问题的难点在于到底要比较多少次，每次应该需要多少个元素比较。</p>\n<p>下图是我简化了数组个数，画的冒泡排序的图解。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/chauity/images/blog/pictures/20221110093829.png\" alt=\"20221110093829\"></p>\n<p>如上图所示，我们不难得出：</p>\n<ul>\n<li>1.冒泡排序排序前的<code>数组个数</code>与<code>第几轮比较</code>和<code>每轮比较次数</code>之间的关系。即</li>\n</ul>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">数组个数 = 第几轮比较 + 每轮比较的次数;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><p>2.每轮比较都会挑选出一个<code>最值</code>，这里升序以最大值为例。选出之后下一轮就不再比较。这就是冒泡排序所谓的冒泡特征，每轮冒出一个<code>最值</code>。</p>\n<ul>\n<li>通过上面第一点，我们不难想出，使用两个<code>for</code>循环嵌套完成冒泡排序，外层循环掌管<code>第几轮比较</code>，内层循环掌管<code>每轮比较的次数</code>。</li>\n<li>通过上面第二点，又可以知道，从低到高两两比较，挑出一个<code>最值</code>，两两之间比较要交换位置时，会用到一个<code>temp</code>中间值存储零时变量。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><p>代码如下：我将在<code>bubbleSort</code> 函数中，使用两个形参，一个是数组指针，另外一个是数组长度。这是用户使用时，需要传递的参数。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">\n<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span> <span class=\"token function\">bubbleSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span> parray<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> length<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">//外层循环：第几轮比较</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">//内层循环：每轮怎么比较</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">&lt;</span>length<span class=\"token operator\">-</span>i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>parray<span class=\"token operator\">+</span>j<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>parray<span class=\"token operator\">+</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>parray<span class=\"token operator\">+</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>parray<span class=\"token operator\">+</span>j<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>parray<span class=\"token operator\">+</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>parray<span class=\"token operator\">+</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> parray<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<p>完整的示例代码如下：</p>\n<p>其中，我将交换的代码封装成了swap函数。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"iostream\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"cstdlib\"</span></span>\n\n<span class=\"token comment\">//函数原型</span>\n<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span> <span class=\"token function\">bubbleSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">//动态生成一个int类型的数组</span>\n\t<span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>array <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"执行冒泡排序前动态生成的数组是：\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// rand() 生成的随机数一般是几万</span>\n\t\t<span class=\"token comment\">// 这里除1000取余+1，生成0-1000的随机数</span>\n\t\tarray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"array[\"</span> <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"]=\"</span> <span class=\"token operator\">&lt;&lt;</span> array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span> \n\t<span class=\"token punctuation\">&#125;</span>\n\n\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"--------------------------------\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">bubbleSort</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"执行冒泡排序后的数组改变成了：\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"array[\"</span> <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"]=\"</span> <span class=\"token operator\">&lt;&lt;</span> array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span> \n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">//清理数组内存</span>\n\t<span class=\"token keyword\">delete</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>array<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 这里排序是升序排序</span>\n<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span> <span class=\"token function\">bubbleSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>parray<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> length<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\t\t<span class=\"token comment\">// 比较 length-1 轮</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">&lt;</span>length<span class=\"token operator\">-</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\t<span class=\"token comment\">// 每轮要比较的元素</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>parray<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> parray<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>parray<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>parray<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> parray<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// -- Swap 交换 A，B</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>A<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>B<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>A<span class=\"token punctuation\">;</span>\n\t<span class=\"token operator\">*</span>A <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>B<span class=\"token punctuation\">;</span>\n\t<span class=\"token operator\">*</span>B <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h1><h2 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h2><p>使用冒泡排序对一个数组进行排序。</p>\n<h2 id=\"实现思路\"><a href=\"#实现思路\" class=\"headerlink\" title=\"实现思路\"></a>实现思路</h2><p>首先看冒泡排序的规则：</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/chauity/images/blog/pictrues/bubbleSort.gif\" alt=\"冒泡排序\"></p>\n<p>相邻两个元素之间一一比较，出现有前一个值比后一个值大的情况，就交换两个元素的位置，没执行完一轮就有一个最大值（最小值）冒出来，直到最后顺序排列。</p>\n<p>这个动图看着很直观，但是却不能很形象的解决问题。这个问题的难点在于到底要比较多少次，每次应该需要多少个元素比较。</p>\n<p>下图是我简化了数组个数，画的冒泡排序的图解。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/chauity/images/blog/pictures/20221110093829.png\" alt=\"20221110093829\"></p>\n<p>如上图所示，我们不难得出：</p>\n<ul>\n<li>1.冒泡排序排序前的<code>数组个数</code>与<code>第几轮比较</code>和<code>每轮比较次数</code>之间的关系。即</li>\n</ul>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">数组个数 = 第几轮比较 + 每轮比较的次数;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><p>2.每轮比较都会挑选出一个<code>最值</code>，这里升序以最大值为例。选出之后下一轮就不再比较。这就是冒泡排序所谓的冒泡特征，每轮冒出一个<code>最值</code>。</p>\n<ul>\n<li>通过上面第一点，我们不难想出，使用两个<code>for</code>循环嵌套完成冒泡排序，外层循环掌管<code>第几轮比较</code>，内层循环掌管<code>每轮比较的次数</code>。</li>\n<li>通过上面第二点，又可以知道，从低到高两两比较，挑出一个<code>最值</code>，两两之间比较要交换位置时，会用到一个<code>temp</code>中间值存储零时变量。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><p>代码如下：我将在<code>bubbleSort</code> 函数中，使用两个形参，一个是数组指针，另外一个是数组长度。这是用户使用时，需要传递的参数。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">\n<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span> <span class=\"token function\">bubbleSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span> parray<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> length<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">//外层循环：第几轮比较</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">//内层循环：每轮怎么比较</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">&lt;</span>length<span class=\"token operator\">-</span>i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>parray<span class=\"token operator\">+</span>j<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>parray<span class=\"token operator\">+</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>parray<span class=\"token operator\">+</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>parray<span class=\"token operator\">+</span>j<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>parray<span class=\"token operator\">+</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>parray<span class=\"token operator\">+</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> parray<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<p>完整的示例代码如下：</p>\n<p>其中，我将交换的代码封装成了swap函数。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"iostream\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"cstdlib\"</span></span>\n\n<span class=\"token comment\">//函数原型</span>\n<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span> <span class=\"token function\">bubbleSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">//动态生成一个int类型的数组</span>\n\t<span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>array <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"执行冒泡排序前动态生成的数组是：\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// rand() 生成的随机数一般是几万</span>\n\t\t<span class=\"token comment\">// 这里除1000取余+1，生成0-1000的随机数</span>\n\t\tarray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"array[\"</span> <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"]=\"</span> <span class=\"token operator\">&lt;&lt;</span> array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span> \n\t<span class=\"token punctuation\">&#125;</span>\n\n\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"--------------------------------\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">bubbleSort</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"执行冒泡排序后的数组改变成了：\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"array[\"</span> <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"]=\"</span> <span class=\"token operator\">&lt;&lt;</span> array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span> \n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">//清理数组内存</span>\n\t<span class=\"token keyword\">delete</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>array<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 这里排序是升序排序</span>\n<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span> <span class=\"token function\">bubbleSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>parray<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> length<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\t\t<span class=\"token comment\">// 比较 length-1 轮</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">&lt;</span>length<span class=\"token operator\">-</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\t<span class=\"token comment\">// 每轮要比较的元素</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>parray<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> parray<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>parray<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>parray<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> parray<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// -- Swap 交换 A，B</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>A<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>B<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>A<span class=\"token punctuation\">;</span>\n\t<span class=\"token operator\">*</span>A <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>B<span class=\"token punctuation\">;</span>\n\t<span class=\"token operator\">*</span>B <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"构建本站","date":"2023-12-28T06:42:29.000Z","_content":"\n\n# HEXO部署本站\n\n## 部署到本地\n\n1. 安装[node.js](https://nodejs.org/en)\n2. 安装hexo插件 + 创建博客\n``` hexo\nnpm install hexo-cli -g\nhexo init <folder>\ncd <folder>\nnpm install\n```\n3. 主题下载\n```\ngit clone https://github.com/blinkfox/hexo-theme-matery.git ./themes/matery\n```\n4. 修改主题\n![image-20231228113434249](https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/231228/1.jpg)\n![image-20231228113556831](https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/231228/2.jpg)\n\n5. 本地部署\n``` hexo\nhexo c && hexo g && hexo s\n```\n\n访问网页 `http://localhost:4000`\n\n![image-20231228113914368](https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/231228/10.jpg)\n\n## 部署到GitHub\n\n1. GitHub创建仓库，名字为xxx.github.io (xxx是你的GitHub用户名)\n![image-20231228114015376](https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/231228/3.jpg)\n\n2. 配置GitHub邮箱和名字\n\n``` hexo\ngit config --global user.name \"xxx\"\t\t\t\t#提交GitHub的用户名 \ngit config –-global user.email `xxx@xx.xxx`   \t#你的邮箱\n```\n\n3. 本地生成密钥对\n``` shell\nssh-keygen -t rsa\n```\n\n4. 将密钥对的公钥内容拷贝到GitHub上，一般存放在**C:\\Users\\xxx\\.ssh （xxx是你的电脑用户名）**中\n![image-20231228115654705](https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/231228/4.jpg)\n\n![image-20231228134437625](https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/231228/5.jpg)\n\n5. 部署\n\n配置_config.yml\n``` hexo\ndeploy:\n  type: git\n  repository: git@github.com:xxx/xxx.github.io.git # xxx是你的用户名\n  branch: master # 可能是main，看你的主干分支命名\n```\n``` npm\nnpm install hexo-deployer-git --save\nhexo d\n```\n\n6. 加速\n    正常访问GitHub网站，可能不能访问，这时候可以使用[vercel](https://vercel.com/)来托管仓库，加速访问\n    ![image-20231228135603380](https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/231228/6.jpg)\n\n外网访问\n![image-20231228141448622](https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/231228/11.jpg)\n\n## 设置域名\n\n1. 域名购买，阿里云的6位数字xyz的域名，例如`351627.xyz`，非常便宜，我买了5年，只花了34。\n2. 获得你的GitHub的IP地址\n``` shell\nping xxx.github.io\n```\n![image-20231228142658113](https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/231228/8.jpg)\n\n\n3. 域名解析你获取的IP，域名解析控制台记录值填你获取到的IP，解析需要等待10分钟左右，才能解析到你的IP地址，耐心等待\n![image-20231228142222926](https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/231228/9.jpg)\n\n\n4. GitHub配置你的域名，Custom domain填写你的域名\n\n![image-20231228143234127](https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/231228/12.jpg)\n\n5. **仓库目录创建一个名为CNAME的文件，文件内容是你的域名，**例如`351627.xyz`,等几分钟就完成网站了，你可以直接ping你的域名，发现和你的GitHub的IP一样的\n\n\n6. 后续发现使用`hexo d`重新部署会顶掉之前的域名绑定，访问出现404，请看[此文](/20231229/bu-shu-yu-ming-diu-shi/)解决\n\n7. 如果需要网站加速，请看[此文](/20221103/wang-zhan-jia-su/)解决\n\n## 大功告成\n\n![image-20231228143326753](https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/231228/13.jpg)\n","source":"_posts/建站.md","raw":"---\ntitle: 构建本站\ndate: 2023-12-28 14:42:29\ntags: build the net\n---\n\n\n# HEXO部署本站\n\n## 部署到本地\n\n1. 安装[node.js](https://nodejs.org/en)\n2. 安装hexo插件 + 创建博客\n``` hexo\nnpm install hexo-cli -g\nhexo init <folder>\ncd <folder>\nnpm install\n```\n3. 主题下载\n```\ngit clone https://github.com/blinkfox/hexo-theme-matery.git ./themes/matery\n```\n4. 修改主题\n![image-20231228113434249](https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/231228/1.jpg)\n![image-20231228113556831](https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/231228/2.jpg)\n\n5. 本地部署\n``` hexo\nhexo c && hexo g && hexo s\n```\n\n访问网页 `http://localhost:4000`\n\n![image-20231228113914368](https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/231228/10.jpg)\n\n## 部署到GitHub\n\n1. GitHub创建仓库，名字为xxx.github.io (xxx是你的GitHub用户名)\n![image-20231228114015376](https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/231228/3.jpg)\n\n2. 配置GitHub邮箱和名字\n\n``` hexo\ngit config --global user.name \"xxx\"\t\t\t\t#提交GitHub的用户名 \ngit config –-global user.email `xxx@xx.xxx`   \t#你的邮箱\n```\n\n3. 本地生成密钥对\n``` shell\nssh-keygen -t rsa\n```\n\n4. 将密钥对的公钥内容拷贝到GitHub上，一般存放在**C:\\Users\\xxx\\.ssh （xxx是你的电脑用户名）**中\n![image-20231228115654705](https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/231228/4.jpg)\n\n![image-20231228134437625](https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/231228/5.jpg)\n\n5. 部署\n\n配置_config.yml\n``` hexo\ndeploy:\n  type: git\n  repository: git@github.com:xxx/xxx.github.io.git # xxx是你的用户名\n  branch: master # 可能是main，看你的主干分支命名\n```\n``` npm\nnpm install hexo-deployer-git --save\nhexo d\n```\n\n6. 加速\n    正常访问GitHub网站，可能不能访问，这时候可以使用[vercel](https://vercel.com/)来托管仓库，加速访问\n    ![image-20231228135603380](https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/231228/6.jpg)\n\n外网访问\n![image-20231228141448622](https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/231228/11.jpg)\n\n## 设置域名\n\n1. 域名购买，阿里云的6位数字xyz的域名，例如`351627.xyz`，非常便宜，我买了5年，只花了34。\n2. 获得你的GitHub的IP地址\n``` shell\nping xxx.github.io\n```\n![image-20231228142658113](https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/231228/8.jpg)\n\n\n3. 域名解析你获取的IP，域名解析控制台记录值填你获取到的IP，解析需要等待10分钟左右，才能解析到你的IP地址，耐心等待\n![image-20231228142222926](https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/231228/9.jpg)\n\n\n4. GitHub配置你的域名，Custom domain填写你的域名\n\n![image-20231228143234127](https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/231228/12.jpg)\n\n5. **仓库目录创建一个名为CNAME的文件，文件内容是你的域名，**例如`351627.xyz`,等几分钟就完成网站了，你可以直接ping你的域名，发现和你的GitHub的IP一样的\n\n\n6. 后续发现使用`hexo d`重新部署会顶掉之前的域名绑定，访问出现404，请看[此文](/20231229/bu-shu-yu-ming-diu-shi/)解决\n\n7. 如果需要网站加速，请看[此文](/20221103/wang-zhan-jia-su/)解决\n\n## 大功告成\n\n![image-20231228143326753](https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/231228/13.jpg)\n","slug":"建站","published":1,"updated":"2024-01-17T02:51:32.942Z","_id":"clrh5tshl000cccusfv3va3rg","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"HEXO部署本站\"><a href=\"#HEXO部署本站\" class=\"headerlink\" title=\"HEXO部署本站\"></a>HEXO部署本站</h1><h2 id=\"部署到本地\"><a href=\"#部署到本地\" class=\"headerlink\" title=\"部署到本地\"></a>部署到本地</h2><ol>\n<li><p>安装<a href=\"https://nodejs.org/en\">node.js</a></p>\n</li>\n<li><p>安装hexo插件 + 创建博客</p>\n<pre class=\"line-numbers language-hexo\" data-language=\"hexo\"><code class=\"language-hexo\">npm install hexo-cli -g\nhexo init &lt;folder&gt;\ncd &lt;folder&gt;\nnpm install<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>主题下载</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">git clone https:&#x2F;&#x2F;github.com&#x2F;blinkfox&#x2F;hexo-theme-matery.git .&#x2F;themes&#x2F;matery<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>修改主题<br><img src=\"https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/231228/1.jpg\" alt=\"image-20231228113434249\"><br><img src=\"https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/231228/2.jpg\" alt=\"image-20231228113556831\"></p>\n</li>\n<li><p>本地部署</p>\n<pre class=\"line-numbers language-hexo\" data-language=\"hexo\"><code class=\"language-hexo\">hexo c &amp;&amp; hexo g &amp;&amp; hexo s<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ol>\n<p>访问网页 <code>http://localhost:4000</code></p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/231228/10.jpg\" alt=\"image-20231228113914368\"></p>\n<h2 id=\"部署到GitHub\"><a href=\"#部署到GitHub\" class=\"headerlink\" title=\"部署到GitHub\"></a>部署到GitHub</h2><ol>\n<li><p>GitHub创建仓库，名字为xxx.github.io (xxx是你的GitHub用户名)<br><img src=\"https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/231228/3.jpg\" alt=\"image-20231228114015376\"></p>\n</li>\n<li><p>配置GitHub邮箱和名字</p>\n</li>\n</ol>\n<pre class=\"line-numbers language-hexo\" data-language=\"hexo\"><code class=\"language-hexo\">git config --global user.name &quot;xxx&quot;\t\t\t\t#提交GitHub的用户名 \ngit config –-global user.email &#96;xxx@xx.xxx&#96;   \t#你的邮箱<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<ol start=\"3\">\n<li><p>本地生成密钥对</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ssh-keygen <span class=\"token parameter variable\">-t</span> rsa<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>将密钥对的公钥内容拷贝到GitHub上，一般存放在<strong>C:\\Users\\xxx.ssh （xxx是你的电脑用户名）</strong>中<br><img src=\"https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/231228/4.jpg\" alt=\"image-20231228115654705\"></p>\n</li>\n</ol>\n<p><img src=\"https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/231228/5.jpg\" alt=\"image-20231228134437625\"></p>\n<ol start=\"5\">\n<li>部署</li>\n</ol>\n<p>配置_config.yml</p>\n<pre class=\"line-numbers language-hexo\" data-language=\"hexo\"><code class=\"language-hexo\">deploy:\n  type: git\n  repository: git@github.com:xxx&#x2F;xxx.github.io.git # xxx是你的用户名\n  branch: master # 可能是main，看你的主干分支命名<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-npm\" data-language=\"npm\"><code class=\"language-npm\">npm install hexo-deployer-git --save\nhexo d<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<ol start=\"6\">\n<li>加速<br> 正常访问GitHub网站，可能不能访问，这时候可以使用<a href=\"https://vercel.com/\">vercel</a>来托管仓库，加速访问<br> <img src=\"https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/231228/6.jpg\" alt=\"image-20231228135603380\"></li>\n</ol>\n<p>外网访问<br><img src=\"https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/231228/11.jpg\" alt=\"image-20231228141448622\"></p>\n<h2 id=\"设置域名\"><a href=\"#设置域名\" class=\"headerlink\" title=\"设置域名\"></a>设置域名</h2><ol>\n<li><p>域名购买，阿里云的6位数字xyz的域名，例如<code>351627.xyz</code>，非常便宜，我买了5年，只花了34。</p>\n</li>\n<li><p>获得你的GitHub的IP地址</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ping</span> xxx.github.io<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/231228/8.jpg\" alt=\"image-20231228142658113\"></p>\n</li>\n<li><p>域名解析你获取的IP，域名解析控制台记录值填你获取到的IP，解析需要等待10分钟左右，才能解析到你的IP地址，耐心等待<br><img src=\"https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/231228/9.jpg\" alt=\"image-20231228142222926\"></p>\n</li>\n<li><p>GitHub配置你的域名，Custom domain填写你的域名</p>\n</li>\n</ol>\n<p><img src=\"https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/231228/12.jpg\" alt=\"image-20231228143234127\"></p>\n<ol start=\"5\">\n<li><p><strong>仓库目录创建一个名为CNAME的文件，文件内容是你的域名，</strong>例如<code>351627.xyz</code>,等几分钟就完成网站了，你可以直接ping你的域名，发现和你的GitHub的IP一样的</p>\n</li>\n<li><p>后续发现使用<code>hexo d</code>重新部署会顶掉之前的域名绑定，访问出现404，请看<a href=\"/20231229/bu-shu-yu-ming-diu-shi/\">此文</a>解决</p>\n</li>\n<li><p>如果需要网站加速，请看<a href=\"/20221103/wang-zhan-jia-su/\">此文</a>解决</p>\n</li>\n</ol>\n<h2 id=\"大功告成\"><a href=\"#大功告成\" class=\"headerlink\" title=\"大功告成\"></a>大功告成</h2><p><img src=\"https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/231228/13.jpg\" alt=\"image-20231228143326753\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"HEXO部署本站\"><a href=\"#HEXO部署本站\" class=\"headerlink\" title=\"HEXO部署本站\"></a>HEXO部署本站</h1><h2 id=\"部署到本地\"><a href=\"#部署到本地\" class=\"headerlink\" title=\"部署到本地\"></a>部署到本地</h2><ol>\n<li><p>安装<a href=\"https://nodejs.org/en\">node.js</a></p>\n</li>\n<li><p>安装hexo插件 + 创建博客</p>\n<pre class=\"line-numbers language-hexo\" data-language=\"hexo\"><code class=\"language-hexo\">npm install hexo-cli -g\nhexo init &lt;folder&gt;\ncd &lt;folder&gt;\nnpm install<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>主题下载</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">git clone https:&#x2F;&#x2F;github.com&#x2F;blinkfox&#x2F;hexo-theme-matery.git .&#x2F;themes&#x2F;matery<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>修改主题<br><img src=\"https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/231228/1.jpg\" alt=\"image-20231228113434249\"><br><img src=\"https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/231228/2.jpg\" alt=\"image-20231228113556831\"></p>\n</li>\n<li><p>本地部署</p>\n<pre class=\"line-numbers language-hexo\" data-language=\"hexo\"><code class=\"language-hexo\">hexo c &amp;&amp; hexo g &amp;&amp; hexo s<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ol>\n<p>访问网页 <code>http://localhost:4000</code></p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/231228/10.jpg\" alt=\"image-20231228113914368\"></p>\n<h2 id=\"部署到GitHub\"><a href=\"#部署到GitHub\" class=\"headerlink\" title=\"部署到GitHub\"></a>部署到GitHub</h2><ol>\n<li><p>GitHub创建仓库，名字为xxx.github.io (xxx是你的GitHub用户名)<br><img src=\"https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/231228/3.jpg\" alt=\"image-20231228114015376\"></p>\n</li>\n<li><p>配置GitHub邮箱和名字</p>\n</li>\n</ol>\n<pre class=\"line-numbers language-hexo\" data-language=\"hexo\"><code class=\"language-hexo\">git config --global user.name &quot;xxx&quot;\t\t\t\t#提交GitHub的用户名 \ngit config –-global user.email &#96;xxx@xx.xxx&#96;   \t#你的邮箱<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<ol start=\"3\">\n<li><p>本地生成密钥对</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ssh-keygen <span class=\"token parameter variable\">-t</span> rsa<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>将密钥对的公钥内容拷贝到GitHub上，一般存放在<strong>C:\\Users\\xxx.ssh （xxx是你的电脑用户名）</strong>中<br><img src=\"https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/231228/4.jpg\" alt=\"image-20231228115654705\"></p>\n</li>\n</ol>\n<p><img src=\"https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/231228/5.jpg\" alt=\"image-20231228134437625\"></p>\n<ol start=\"5\">\n<li>部署</li>\n</ol>\n<p>配置_config.yml</p>\n<pre class=\"line-numbers language-hexo\" data-language=\"hexo\"><code class=\"language-hexo\">deploy:\n  type: git\n  repository: git@github.com:xxx&#x2F;xxx.github.io.git # xxx是你的用户名\n  branch: master # 可能是main，看你的主干分支命名<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-npm\" data-language=\"npm\"><code class=\"language-npm\">npm install hexo-deployer-git --save\nhexo d<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<ol start=\"6\">\n<li>加速<br> 正常访问GitHub网站，可能不能访问，这时候可以使用<a href=\"https://vercel.com/\">vercel</a>来托管仓库，加速访问<br> <img src=\"https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/231228/6.jpg\" alt=\"image-20231228135603380\"></li>\n</ol>\n<p>外网访问<br><img src=\"https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/231228/11.jpg\" alt=\"image-20231228141448622\"></p>\n<h2 id=\"设置域名\"><a href=\"#设置域名\" class=\"headerlink\" title=\"设置域名\"></a>设置域名</h2><ol>\n<li><p>域名购买，阿里云的6位数字xyz的域名，例如<code>351627.xyz</code>，非常便宜，我买了5年，只花了34。</p>\n</li>\n<li><p>获得你的GitHub的IP地址</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ping</span> xxx.github.io<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/231228/8.jpg\" alt=\"image-20231228142658113\"></p>\n</li>\n<li><p>域名解析你获取的IP，域名解析控制台记录值填你获取到的IP，解析需要等待10分钟左右，才能解析到你的IP地址，耐心等待<br><img src=\"https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/231228/9.jpg\" alt=\"image-20231228142222926\"></p>\n</li>\n<li><p>GitHub配置你的域名，Custom domain填写你的域名</p>\n</li>\n</ol>\n<p><img src=\"https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/231228/12.jpg\" alt=\"image-20231228143234127\"></p>\n<ol start=\"5\">\n<li><p><strong>仓库目录创建一个名为CNAME的文件，文件内容是你的域名，</strong>例如<code>351627.xyz</code>,等几分钟就完成网站了，你可以直接ping你的域名，发现和你的GitHub的IP一样的</p>\n</li>\n<li><p>后续发现使用<code>hexo d</code>重新部署会顶掉之前的域名绑定，访问出现404，请看<a href=\"/20231229/bu-shu-yu-ming-diu-shi/\">此文</a>解决</p>\n</li>\n<li><p>如果需要网站加速，请看<a href=\"/20221103/wang-zhan-jia-su/\">此文</a>解决</p>\n</li>\n</ol>\n<h2 id=\"大功告成\"><a href=\"#大功告成\" class=\"headerlink\" title=\"大功告成\"></a>大功告成</h2><p><img src=\"https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/231228/13.jpg\" alt=\"image-20231228143326753\"></p>\n"},{"title":"免费图床CDN加速","date":"2024-01-05T06:17:59.000Z","_content":"# 工具\n- `VSCode PicGo` \n- `GitHub` \n- `jsDelivr`\n# 步骤\n## GitHub配置\n- `VSCode`安装`PicGo插件`\n\n![pic1](https://gcore.jsdelivr.net/gh/chauity/xximgxx/24-imgs/20240105142927.png)\n \n- 新建`GitHub`仓库，获取相关`PicGo`配置参数\n\n``` code\n{\n  \"repo\": \"\", // 仓库名，格式是username/reponame\n  \"token\": \"\", // github token\n  \"path\": \"\", // 自定义存储路径，比如img/\n  \"customUrl\": \"\", // 自定义域名，注意要加http://或者https://\n  \"branch\": \"\" // 分支名，默认是main\n}\n```\n- 访问 `https://github.com/settings/tokens`，点击 `Generate new token`\n ![](https://gcore.jsdelivr.net/gh/chauity/xximgxx/24-imgs/20240105152138.png)\n- 新增`token`\n ![](https://gcore.jsdelivr.net/gh/chauity/xximgxx/24-imgs/20240105153031.png)\n\n- 之后拉到最底点击绿色按钮`Generate token`,记住这个`token`\n![](https://gcore.jsdelivr.net/gh/chauity/xximgxx/24-imgs/20240105153643.png)\n\n## PicGo配置\n- 打开`VSCode`设置,搜索`picgo`\n![](https://gcore.jsdelivr.net/gh/chauity/xximgxx/24-imgs/20240105154256.png)\n\n## 测试上传\n- `Win系统`上传剪切板截图快捷键是`ctrl + alt + u`\n![20240105155319](https://gcore.jsdelivr.net/gh/chauity/xximgxx/24-imgs/20240105155319.png)\n\n## CDN加速\n- `VSCode`设置中配置`customUrl`(自定义域名)\n\n`https://gcore.jsdelivr.net/gh/你的用户名/你的仓库名/`\n\n![20240105160612](https://gcore.jsdelivr.net/gh/chauity/xximgxx/24-imgs/20240105160612.png)\n\n- 这里面的用到的是`jsdelivr`，有时候可能会访问不到，一共有三个IP可以作为`CDN`地址加速,分别是\n\n``` http\nhttps://cdn.jsdelivr.net/gh/你的用户名/你的仓库名/\nhttps://fastly.jsdelivr.net/gh/你的用户名/你的仓库名/\nhttps://gcore.jsdelivr.net/gh/你的用户名/你的仓库名/\n```\n- 使用`https://tcping8.com/ping/`可以查看多地的cdn加速情况\n![20240108101021](https://gcore.jsdelivr.net/gh/chauity/xximgxx/24-imgs/20240108101021.png)\n\n\n\n\n","source":"_posts/cdn图床.md","raw":"---\ntitle:  免费图床CDN加速\ndate: 2024-01-05 14:17:59\ntags: 图床 + cdn + picgo\ncategories: jsDilivr, pic\n---\n# 工具\n- `VSCode PicGo` \n- `GitHub` \n- `jsDelivr`\n# 步骤\n## GitHub配置\n- `VSCode`安装`PicGo插件`\n\n![pic1](https://gcore.jsdelivr.net/gh/chauity/xximgxx/24-imgs/20240105142927.png)\n \n- 新建`GitHub`仓库，获取相关`PicGo`配置参数\n\n``` code\n{\n  \"repo\": \"\", // 仓库名，格式是username/reponame\n  \"token\": \"\", // github token\n  \"path\": \"\", // 自定义存储路径，比如img/\n  \"customUrl\": \"\", // 自定义域名，注意要加http://或者https://\n  \"branch\": \"\" // 分支名，默认是main\n}\n```\n- 访问 `https://github.com/settings/tokens`，点击 `Generate new token`\n ![](https://gcore.jsdelivr.net/gh/chauity/xximgxx/24-imgs/20240105152138.png)\n- 新增`token`\n ![](https://gcore.jsdelivr.net/gh/chauity/xximgxx/24-imgs/20240105153031.png)\n\n- 之后拉到最底点击绿色按钮`Generate token`,记住这个`token`\n![](https://gcore.jsdelivr.net/gh/chauity/xximgxx/24-imgs/20240105153643.png)\n\n## PicGo配置\n- 打开`VSCode`设置,搜索`picgo`\n![](https://gcore.jsdelivr.net/gh/chauity/xximgxx/24-imgs/20240105154256.png)\n\n## 测试上传\n- `Win系统`上传剪切板截图快捷键是`ctrl + alt + u`\n![20240105155319](https://gcore.jsdelivr.net/gh/chauity/xximgxx/24-imgs/20240105155319.png)\n\n## CDN加速\n- `VSCode`设置中配置`customUrl`(自定义域名)\n\n`https://gcore.jsdelivr.net/gh/你的用户名/你的仓库名/`\n\n![20240105160612](https://gcore.jsdelivr.net/gh/chauity/xximgxx/24-imgs/20240105160612.png)\n\n- 这里面的用到的是`jsdelivr`，有时候可能会访问不到，一共有三个IP可以作为`CDN`地址加速,分别是\n\n``` http\nhttps://cdn.jsdelivr.net/gh/你的用户名/你的仓库名/\nhttps://fastly.jsdelivr.net/gh/你的用户名/你的仓库名/\nhttps://gcore.jsdelivr.net/gh/你的用户名/你的仓库名/\n```\n- 使用`https://tcping8.com/ping/`可以查看多地的cdn加速情况\n![20240108101021](https://gcore.jsdelivr.net/gh/chauity/xximgxx/24-imgs/20240108101021.png)\n\n\n\n\n","slug":"cdn图床","published":1,"updated":"2024-01-08T02:12:17.026Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clrh5tshm000dccuscmn5gxys","content":"<h1 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h1><ul>\n<li><code>VSCode PicGo</code> </li>\n<li><code>GitHub</code> </li>\n<li><code>jsDelivr</code></li>\n</ul>\n<h1 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h1><h2 id=\"GitHub配置\"><a href=\"#GitHub配置\" class=\"headerlink\" title=\"GitHub配置\"></a>GitHub配置</h2><ul>\n<li><code>VSCode</code>安装<code>PicGo插件</code></li>\n</ul>\n<p><img src=\"https://gcore.jsdelivr.net/gh/chauity/xximgxx/24-imgs/20240105142927.png\" alt=\"pic1\"></p>\n<ul>\n<li>新建<code>GitHub</code>仓库，获取相关<code>PicGo</code>配置参数</li>\n</ul>\n<pre class=\"line-numbers language-code\" data-language=\"code\"><code class=\"language-code\">&#123;\n  &quot;repo&quot;: &quot;&quot;, &#x2F;&#x2F; 仓库名，格式是username&#x2F;reponame\n  &quot;token&quot;: &quot;&quot;, &#x2F;&#x2F; github token\n  &quot;path&quot;: &quot;&quot;, &#x2F;&#x2F; 自定义存储路径，比如img&#x2F;\n  &quot;customUrl&quot;: &quot;&quot;, &#x2F;&#x2F; 自定义域名，注意要加http:&#x2F;&#x2F;或者https:&#x2F;&#x2F;\n  &quot;branch&quot;: &quot;&quot; &#x2F;&#x2F; 分支名，默认是main\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li><p>访问 <code>https://github.com/settings/tokens</code>，点击 <code>Generate new token</code><br> <img src=\"https://gcore.jsdelivr.net/gh/chauity/xximgxx/24-imgs/20240105152138.png\"></p>\n</li>\n<li><p>新增<code>token</code><br> <img src=\"https://gcore.jsdelivr.net/gh/chauity/xximgxx/24-imgs/20240105153031.png\"></p>\n</li>\n<li><p>之后拉到最底点击绿色按钮<code>Generate token</code>,记住这个<code>token</code><br><img src=\"https://gcore.jsdelivr.net/gh/chauity/xximgxx/24-imgs/20240105153643.png\"></p>\n</li>\n</ul>\n<h2 id=\"PicGo配置\"><a href=\"#PicGo配置\" class=\"headerlink\" title=\"PicGo配置\"></a>PicGo配置</h2><ul>\n<li>打开<code>VSCode</code>设置,搜索<code>picgo</code><br><img src=\"https://gcore.jsdelivr.net/gh/chauity/xximgxx/24-imgs/20240105154256.png\"></li>\n</ul>\n<h2 id=\"测试上传\"><a href=\"#测试上传\" class=\"headerlink\" title=\"测试上传\"></a>测试上传</h2><ul>\n<li><code>Win系统</code>上传剪切板截图快捷键是<code>ctrl + alt + u</code><br><img src=\"https://gcore.jsdelivr.net/gh/chauity/xximgxx/24-imgs/20240105155319.png\" alt=\"20240105155319\"></li>\n</ul>\n<h2 id=\"CDN加速\"><a href=\"#CDN加速\" class=\"headerlink\" title=\"CDN加速\"></a>CDN加速</h2><ul>\n<li><code>VSCode</code>设置中配置<code>customUrl</code>(自定义域名)</li>\n</ul>\n<p><code>https://gcore.jsdelivr.net/gh/你的用户名/你的仓库名/</code></p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/chauity/xximgxx/24-imgs/20240105160612.png\" alt=\"20240105160612\"></p>\n<ul>\n<li>这里面的用到的是<code>jsdelivr</code>，有时候可能会访问不到，一共有三个IP可以作为<code>CDN</code>地址加速,分别是</li>\n</ul>\n<pre class=\"line-numbers language-http\" data-language=\"http\"><code class=\"language-http\"><span class=\"token header\"><span class=\"token header-name keyword\">https</span><span class=\"token punctuation\">:</span><span class=\"token header-value\">//cdn.jsdelivr.net/gh/你的用户名/你的仓库名/</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">https</span><span class=\"token punctuation\">:</span><span class=\"token header-value\">//fastly.jsdelivr.net/gh/你的用户名/你的仓库名/</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">https</span><span class=\"token punctuation\">:</span><span class=\"token header-value\">//gcore.jsdelivr.net/gh/你的用户名/你的仓库名/</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>使用<code>https://tcping8.com/ping/</code>可以查看多地的cdn加速情况<br><img src=\"https://gcore.jsdelivr.net/gh/chauity/xximgxx/24-imgs/20240108101021.png\" alt=\"20240108101021\"></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h1><ul>\n<li><code>VSCode PicGo</code> </li>\n<li><code>GitHub</code> </li>\n<li><code>jsDelivr</code></li>\n</ul>\n<h1 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h1><h2 id=\"GitHub配置\"><a href=\"#GitHub配置\" class=\"headerlink\" title=\"GitHub配置\"></a>GitHub配置</h2><ul>\n<li><code>VSCode</code>安装<code>PicGo插件</code></li>\n</ul>\n<p><img src=\"https://gcore.jsdelivr.net/gh/chauity/xximgxx/24-imgs/20240105142927.png\" alt=\"pic1\"></p>\n<ul>\n<li>新建<code>GitHub</code>仓库，获取相关<code>PicGo</code>配置参数</li>\n</ul>\n<pre class=\"line-numbers language-code\" data-language=\"code\"><code class=\"language-code\">&#123;\n  &quot;repo&quot;: &quot;&quot;, &#x2F;&#x2F; 仓库名，格式是username&#x2F;reponame\n  &quot;token&quot;: &quot;&quot;, &#x2F;&#x2F; github token\n  &quot;path&quot;: &quot;&quot;, &#x2F;&#x2F; 自定义存储路径，比如img&#x2F;\n  &quot;customUrl&quot;: &quot;&quot;, &#x2F;&#x2F; 自定义域名，注意要加http:&#x2F;&#x2F;或者https:&#x2F;&#x2F;\n  &quot;branch&quot;: &quot;&quot; &#x2F;&#x2F; 分支名，默认是main\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li><p>访问 <code>https://github.com/settings/tokens</code>，点击 <code>Generate new token</code><br> <img src=\"https://gcore.jsdelivr.net/gh/chauity/xximgxx/24-imgs/20240105152138.png\"></p>\n</li>\n<li><p>新增<code>token</code><br> <img src=\"https://gcore.jsdelivr.net/gh/chauity/xximgxx/24-imgs/20240105153031.png\"></p>\n</li>\n<li><p>之后拉到最底点击绿色按钮<code>Generate token</code>,记住这个<code>token</code><br><img src=\"https://gcore.jsdelivr.net/gh/chauity/xximgxx/24-imgs/20240105153643.png\"></p>\n</li>\n</ul>\n<h2 id=\"PicGo配置\"><a href=\"#PicGo配置\" class=\"headerlink\" title=\"PicGo配置\"></a>PicGo配置</h2><ul>\n<li>打开<code>VSCode</code>设置,搜索<code>picgo</code><br><img src=\"https://gcore.jsdelivr.net/gh/chauity/xximgxx/24-imgs/20240105154256.png\"></li>\n</ul>\n<h2 id=\"测试上传\"><a href=\"#测试上传\" class=\"headerlink\" title=\"测试上传\"></a>测试上传</h2><ul>\n<li><code>Win系统</code>上传剪切板截图快捷键是<code>ctrl + alt + u</code><br><img src=\"https://gcore.jsdelivr.net/gh/chauity/xximgxx/24-imgs/20240105155319.png\" alt=\"20240105155319\"></li>\n</ul>\n<h2 id=\"CDN加速\"><a href=\"#CDN加速\" class=\"headerlink\" title=\"CDN加速\"></a>CDN加速</h2><ul>\n<li><code>VSCode</code>设置中配置<code>customUrl</code>(自定义域名)</li>\n</ul>\n<p><code>https://gcore.jsdelivr.net/gh/你的用户名/你的仓库名/</code></p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/chauity/xximgxx/24-imgs/20240105160612.png\" alt=\"20240105160612\"></p>\n<ul>\n<li>这里面的用到的是<code>jsdelivr</code>，有时候可能会访问不到，一共有三个IP可以作为<code>CDN</code>地址加速,分别是</li>\n</ul>\n<pre class=\"line-numbers language-http\" data-language=\"http\"><code class=\"language-http\"><span class=\"token header\"><span class=\"token header-name keyword\">https</span><span class=\"token punctuation\">:</span><span class=\"token header-value\">//cdn.jsdelivr.net/gh/你的用户名/你的仓库名/</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">https</span><span class=\"token punctuation\">:</span><span class=\"token header-value\">//fastly.jsdelivr.net/gh/你的用户名/你的仓库名/</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">https</span><span class=\"token punctuation\">:</span><span class=\"token header-value\">//gcore.jsdelivr.net/gh/你的用户名/你的仓库名/</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>使用<code>https://tcping8.com/ping/</code>可以查看多地的cdn加速情况<br><img src=\"https://gcore.jsdelivr.net/gh/chauity/xximgxx/24-imgs/20240108101021.png\" alt=\"20240108101021\"></li>\n</ul>\n"},{"title":"数据结构之单链表","date":"2022-12-26T06:42:20.000Z","_content":"# 数据结构之单链表\n\n## 引入单链表\n\n节点与节点之间的物理地址不一定不连续，逻辑地址必定是连续的，这种就是链式结构。所谓的单链表就是链式结构的线性表，需要使用一个数据域来存放数据，一个指针域来存放下一个节点的所在地址，这样形成的这种线性结构。一般说的链表就是单链表，下文也将其称为链表，本文介绍的是最简单的整形链表。\n\n![image-20230103163115246](https://gcore.jsdelivr.net/gh/chauity/images/blog/pictures/image-20230103163115246.png)\n\n链表的节点结构体：\n\n```\ntypedef int DataType;\t//DataType 是 int 的别名\ntypedef struct node\n{\n    DataType data;\t\t//数据域，用于存放本节点的数据\n    struct node* next;\t//指针域，用于存放下一节点的地址\n}Node, *Link;\n```\n\n在上面的结构体中，Node是struct node的别名，Link是struct node*的别名。即 \n\n```\n// 等价\nNode st;\tstruct node st;\nLink p;\t\tstruct node* p;\n```\n\n链表中，为了方便空链表和非空链表的统一处理，我们引入了头节点，这个头节点，与其他的节点相同，没有数据域，只有指针域，且其指针指向第一个元素，若是空链表则指针域的指向为空。\n\n## 遍历单链表\n\n1. 定义Link类型节点指针p，并为其申请空间\n2. 指向第一个节点（头节点的下一个节点）\n3. 只要p不为空，则打印p的数据域，且p指向p的下一个节点\n\n```\n/**\n*   （1）单链表的遍历操作\n*   操作接口： void displayNode(Link head);\n*/\nvoid displayNode(Link head)\n{\n    Link p = NULL;\n    p = (Link)malloc(sizeof(Node));\n    p = head->next;\n    while (p != NULL)\n    {\n        printf(\"%d \", p->data);\n        p = p->next;\n    }\n}\n```\n\n## 求单链表长度\n\n1. 定义Link类型节点指针p，并为其申请空间\n2. 指向第一个节点（头节点的下一个节点），定义一个变量count统计长度的值\n3. 只要p不为空，则p指向p的下一个节点，count自增1\n\n```\n/**\n*   （2）求单链表元素个数\n*   操作接口：int lengthofNode(Link head);\n*/\nint lengthofNode(Link head)\n{\n    Link p = NULL;\n    p = (Link)malloc(sizeof(Node));\n    p = head->next;\n    int count = 0;\n    while (p != NULL)\n    {\n        p = p->next;\n        count++;\n    }\n    return count;\n}\n```\n\n## 单链表查找操作\n\n1. 定义节点p，用来循环遍历链表\n2. 定义count，用来记载当前所在的下标\n3. 循环，当x与链表当前节点的数据与相等时，则找到了，返回true\n4. 当循环完了，且未找到与x相等的值，则返回false\n\n``` cpp\n/**\n*   （3）单链表查找操作\n*   操作接口：int queryNode(Link head, DataType x);\n*/\nbool queryNode(Link head, DataType x)\n{\n    Link p = NULL;\n    p = (Link)malloc(sizeof(Node));\n    int count = 0;\n    p = head->next;\n    while (p != NULL)\n    {\n        if (p->data == x)\n        {\n            printf(\"%d第一次出现在第%d个元素上\", p->data, count+1);\n            return true;\n        }\n        count++;\n        p = p->next;\n    }\n    return false;\n}\n```\n\n## 单链表的插入\n\n1. 三个参数，第一个是头节点，第二个是插入的位置（不是下标，是下标+1），第三个是要插入的元素\n2. 定义节点p用来循环链表，变量count用来记录当前节点下标位置\n3. 当p不为空且count的值小于i-1，则循环遍历且count自增1\n4. 若链表节点已经为空了，count还是小于i，则直接返回false\n5. 否则就断链添加节点\n\n```\n/**\n*   （4）单链表插入操作\n*   操作接口：bool insertNode(Link head, int i, DataType x);\n*/\nbool insertNode(Link head, int i, DataType x)\n{\n    Link p = NULL;\n    p = (Link)malloc(sizeof(Node));\n    p = head->next;\n    int count = 0;\n    while (p != NULL && count < i-1)\n    {\n        p = p->next;\n        count++;\n    }\n    if (p == NULL)\n        return false;\n    else \n    {\n        Link q = NULL;\n        q = (Link)malloc(sizeof(Node));\n        q->next = p->next;\n        q->data = x;\n        p->next = q;\n        return true;\n    }\n}\n```\n\n## 头插法建立单链表\n\n头插法是建立链表的一种方法，也是必须掌握的方法。即每次插入的新节点都是head的next域，最后第一个插入的节点就成了最后一个节点。\n\n```\n/**\n*   （5）创建一个单链表 -- 头插法\n*   操作接口：Link headnewList(DataType a[], int n);\n*   头插法：将待插入的节点插在头节点的后面\n*   结果：插入到链表顺序和数组顺序相反\n*/\nLink headNewList(DataType a[], int n)\n{\n    Link head = NULL;\n    head = (Link)malloc(sizeof(Node));\n    head->next = NULL;\n    int i = 0;\n    for (i; i < n; i++)\n    {\n        Link q = NULL;\n        q = (Link)malloc(sizeof(Node));\n        q->data = a[i];\n        q->next = head->next;\n        head->next = q;\n    }\n    return head;\n}\n```\n\n## 尾插法建立单链表\n\n尾插法建立链表是需要两个节点，一个rear（尾）指针和一个head（头）指针，head指针指向第一个节点，rear指针指向最新插入的节点，每次新建节点都操作尾指针，最后返回头指针。\n\n```\n/**\n*   （6）创建一个单链表 -- 尾插法\n*   操作接口：Link rearNewList(DataType a[], int n);\n*   头插法：将待插入的节点插在终端节点的后面\n*   结果：插入到链表顺序和数组顺序相同\n*/\nLink rearNewList(DataType a[], int n)\n{\n    Link head = NULL, rear = NULL;\n    head = (Link)malloc(sizeof(Node));\n    rear = (Link)malloc(sizeof(Node));\n    head->next = NULL;\n    rear = head;\n    for (int i = 0; i < n; i++)\n    {\n        Link q = NULL;\n        q = (Link)malloc(sizeof(Node));\n        q->data = a[i];\n        q->next = NULL; //防止指针瞎指\n        rear->next = q;\n        rear = q;\n    }\n    rear->next = NULL;  //最后让尾节点的next置空\n    return head;\n}\n```\n\n## 删除单链表节点\n\n删除值为x的节点，思想还是查找的思想，找到了就让指针指向该节点的后继节点，最后断链，没找到就返回false。\n\n```\n/**\n*   （7）单链表节点的删除\n*   操作接口：bool deleteNode(Link head, DataType x);\n*/\nbool deleteNode(Link head, DataType x)\n{\n    // 判空\n    if (head == NULL || head->next == NULL)\n        return false;\n    Link p = NULL, q = NULL;\n    p = (Link)malloc(sizeof(Node));\n    q = (Link)malloc(sizeof(Node));\n    p = head;\n    q = head->next;\n    while (q != NULL)\n    {\n        if (q->data == x)\n        {\n            p->next = q->next;\n            free(q);\n            return true;\n        }\n        else\n        {   \n            p = q;\n            q = q->next;\n        }\n    }\n    return false;\n}\n```\n\n## 单链表置空\n\n循环遍历每一个节点，一个一个地释放空间，最后释放head指针的空间，这样链表的空间就置空了。\n\n```\n/**\n*   （8）单链表的释放\n*    操作接口：void clearLink(Link head);\n*/\nvoid clearLink(Link head)\n{\n    Link p = NULL, q = NULL;\n    p = (Link)malloc(sizeof(Node));\n    q = (Link)malloc(sizeof(Node));\n    p = head->next;\n    q = p->next;\n    while (p != NULL)\n    {\n        free(p);\n        p = q;\n        q = q->next;\n    }\n    free(head);\n}\n```\n\n\n\n","source":"_posts/单链表.md","raw":"---\ntitle: 数据结构之单链表\ndate: 2022-12-26 14:42:20\ntags: list, link, C语言\n---\n# 数据结构之单链表\n\n## 引入单链表\n\n节点与节点之间的物理地址不一定不连续，逻辑地址必定是连续的，这种就是链式结构。所谓的单链表就是链式结构的线性表，需要使用一个数据域来存放数据，一个指针域来存放下一个节点的所在地址，这样形成的这种线性结构。一般说的链表就是单链表，下文也将其称为链表，本文介绍的是最简单的整形链表。\n\n![image-20230103163115246](https://gcore.jsdelivr.net/gh/chauity/images/blog/pictures/image-20230103163115246.png)\n\n链表的节点结构体：\n\n```\ntypedef int DataType;\t//DataType 是 int 的别名\ntypedef struct node\n{\n    DataType data;\t\t//数据域，用于存放本节点的数据\n    struct node* next;\t//指针域，用于存放下一节点的地址\n}Node, *Link;\n```\n\n在上面的结构体中，Node是struct node的别名，Link是struct node*的别名。即 \n\n```\n// 等价\nNode st;\tstruct node st;\nLink p;\t\tstruct node* p;\n```\n\n链表中，为了方便空链表和非空链表的统一处理，我们引入了头节点，这个头节点，与其他的节点相同，没有数据域，只有指针域，且其指针指向第一个元素，若是空链表则指针域的指向为空。\n\n## 遍历单链表\n\n1. 定义Link类型节点指针p，并为其申请空间\n2. 指向第一个节点（头节点的下一个节点）\n3. 只要p不为空，则打印p的数据域，且p指向p的下一个节点\n\n```\n/**\n*   （1）单链表的遍历操作\n*   操作接口： void displayNode(Link head);\n*/\nvoid displayNode(Link head)\n{\n    Link p = NULL;\n    p = (Link)malloc(sizeof(Node));\n    p = head->next;\n    while (p != NULL)\n    {\n        printf(\"%d \", p->data);\n        p = p->next;\n    }\n}\n```\n\n## 求单链表长度\n\n1. 定义Link类型节点指针p，并为其申请空间\n2. 指向第一个节点（头节点的下一个节点），定义一个变量count统计长度的值\n3. 只要p不为空，则p指向p的下一个节点，count自增1\n\n```\n/**\n*   （2）求单链表元素个数\n*   操作接口：int lengthofNode(Link head);\n*/\nint lengthofNode(Link head)\n{\n    Link p = NULL;\n    p = (Link)malloc(sizeof(Node));\n    p = head->next;\n    int count = 0;\n    while (p != NULL)\n    {\n        p = p->next;\n        count++;\n    }\n    return count;\n}\n```\n\n## 单链表查找操作\n\n1. 定义节点p，用来循环遍历链表\n2. 定义count，用来记载当前所在的下标\n3. 循环，当x与链表当前节点的数据与相等时，则找到了，返回true\n4. 当循环完了，且未找到与x相等的值，则返回false\n\n``` cpp\n/**\n*   （3）单链表查找操作\n*   操作接口：int queryNode(Link head, DataType x);\n*/\nbool queryNode(Link head, DataType x)\n{\n    Link p = NULL;\n    p = (Link)malloc(sizeof(Node));\n    int count = 0;\n    p = head->next;\n    while (p != NULL)\n    {\n        if (p->data == x)\n        {\n            printf(\"%d第一次出现在第%d个元素上\", p->data, count+1);\n            return true;\n        }\n        count++;\n        p = p->next;\n    }\n    return false;\n}\n```\n\n## 单链表的插入\n\n1. 三个参数，第一个是头节点，第二个是插入的位置（不是下标，是下标+1），第三个是要插入的元素\n2. 定义节点p用来循环链表，变量count用来记录当前节点下标位置\n3. 当p不为空且count的值小于i-1，则循环遍历且count自增1\n4. 若链表节点已经为空了，count还是小于i，则直接返回false\n5. 否则就断链添加节点\n\n```\n/**\n*   （4）单链表插入操作\n*   操作接口：bool insertNode(Link head, int i, DataType x);\n*/\nbool insertNode(Link head, int i, DataType x)\n{\n    Link p = NULL;\n    p = (Link)malloc(sizeof(Node));\n    p = head->next;\n    int count = 0;\n    while (p != NULL && count < i-1)\n    {\n        p = p->next;\n        count++;\n    }\n    if (p == NULL)\n        return false;\n    else \n    {\n        Link q = NULL;\n        q = (Link)malloc(sizeof(Node));\n        q->next = p->next;\n        q->data = x;\n        p->next = q;\n        return true;\n    }\n}\n```\n\n## 头插法建立单链表\n\n头插法是建立链表的一种方法，也是必须掌握的方法。即每次插入的新节点都是head的next域，最后第一个插入的节点就成了最后一个节点。\n\n```\n/**\n*   （5）创建一个单链表 -- 头插法\n*   操作接口：Link headnewList(DataType a[], int n);\n*   头插法：将待插入的节点插在头节点的后面\n*   结果：插入到链表顺序和数组顺序相反\n*/\nLink headNewList(DataType a[], int n)\n{\n    Link head = NULL;\n    head = (Link)malloc(sizeof(Node));\n    head->next = NULL;\n    int i = 0;\n    for (i; i < n; i++)\n    {\n        Link q = NULL;\n        q = (Link)malloc(sizeof(Node));\n        q->data = a[i];\n        q->next = head->next;\n        head->next = q;\n    }\n    return head;\n}\n```\n\n## 尾插法建立单链表\n\n尾插法建立链表是需要两个节点，一个rear（尾）指针和一个head（头）指针，head指针指向第一个节点，rear指针指向最新插入的节点，每次新建节点都操作尾指针，最后返回头指针。\n\n```\n/**\n*   （6）创建一个单链表 -- 尾插法\n*   操作接口：Link rearNewList(DataType a[], int n);\n*   头插法：将待插入的节点插在终端节点的后面\n*   结果：插入到链表顺序和数组顺序相同\n*/\nLink rearNewList(DataType a[], int n)\n{\n    Link head = NULL, rear = NULL;\n    head = (Link)malloc(sizeof(Node));\n    rear = (Link)malloc(sizeof(Node));\n    head->next = NULL;\n    rear = head;\n    for (int i = 0; i < n; i++)\n    {\n        Link q = NULL;\n        q = (Link)malloc(sizeof(Node));\n        q->data = a[i];\n        q->next = NULL; //防止指针瞎指\n        rear->next = q;\n        rear = q;\n    }\n    rear->next = NULL;  //最后让尾节点的next置空\n    return head;\n}\n```\n\n## 删除单链表节点\n\n删除值为x的节点，思想还是查找的思想，找到了就让指针指向该节点的后继节点，最后断链，没找到就返回false。\n\n```\n/**\n*   （7）单链表节点的删除\n*   操作接口：bool deleteNode(Link head, DataType x);\n*/\nbool deleteNode(Link head, DataType x)\n{\n    // 判空\n    if (head == NULL || head->next == NULL)\n        return false;\n    Link p = NULL, q = NULL;\n    p = (Link)malloc(sizeof(Node));\n    q = (Link)malloc(sizeof(Node));\n    p = head;\n    q = head->next;\n    while (q != NULL)\n    {\n        if (q->data == x)\n        {\n            p->next = q->next;\n            free(q);\n            return true;\n        }\n        else\n        {   \n            p = q;\n            q = q->next;\n        }\n    }\n    return false;\n}\n```\n\n## 单链表置空\n\n循环遍历每一个节点，一个一个地释放空间，最后释放head指针的空间，这样链表的空间就置空了。\n\n```\n/**\n*   （8）单链表的释放\n*    操作接口：void clearLink(Link head);\n*/\nvoid clearLink(Link head)\n{\n    Link p = NULL, q = NULL;\n    p = (Link)malloc(sizeof(Node));\n    q = (Link)malloc(sizeof(Node));\n    p = head->next;\n    q = p->next;\n    while (p != NULL)\n    {\n        free(p);\n        p = q;\n        q = q->next;\n    }\n    free(head);\n}\n```\n\n\n\n","slug":"单链表","published":1,"updated":"2024-01-17T02:39:45.614Z","_id":"clrh5tshn000gccusf0ei2pu5","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"数据结构之单链表\"><a href=\"#数据结构之单链表\" class=\"headerlink\" title=\"数据结构之单链表\"></a>数据结构之单链表</h1><h2 id=\"引入单链表\"><a href=\"#引入单链表\" class=\"headerlink\" title=\"引入单链表\"></a>引入单链表</h2><p>节点与节点之间的物理地址不一定不连续，逻辑地址必定是连续的，这种就是链式结构。所谓的单链表就是链式结构的线性表，需要使用一个数据域来存放数据，一个指针域来存放下一个节点的所在地址，这样形成的这种线性结构。一般说的链表就是单链表，下文也将其称为链表，本文介绍的是最简单的整形链表。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/chauity/images/blog/pictures/image-20230103163115246.png\" alt=\"image-20230103163115246\"></p>\n<p>链表的节点结构体：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">typedef int DataType;\t&#x2F;&#x2F;DataType 是 int 的别名\ntypedef struct node\n&#123;\n    DataType data;\t\t&#x2F;&#x2F;数据域，用于存放本节点的数据\n    struct node* next;\t&#x2F;&#x2F;指针域，用于存放下一节点的地址\n&#125;Node, *Link;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在上面的结构体中，Node是struct node的别名，Link是struct node*的别名。即 </p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F; 等价\nNode st;\tstruct node st;\nLink p;\t\tstruct node* p;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>链表中，为了方便空链表和非空链表的统一处理，我们引入了头节点，这个头节点，与其他的节点相同，没有数据域，只有指针域，且其指针指向第一个元素，若是空链表则指针域的指向为空。</p>\n<h2 id=\"遍历单链表\"><a href=\"#遍历单链表\" class=\"headerlink\" title=\"遍历单链表\"></a>遍历单链表</h2><ol>\n<li>定义Link类型节点指针p，并为其申请空间</li>\n<li>指向第一个节点（头节点的下一个节点）</li>\n<li>只要p不为空，则打印p的数据域，且p指向p的下一个节点</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;**\n*   （1）单链表的遍历操作\n*   操作接口： void displayNode(Link head);\n*&#x2F;\nvoid displayNode(Link head)\n&#123;\n    Link p &#x3D; NULL;\n    p &#x3D; (Link)malloc(sizeof(Node));\n    p &#x3D; head-&gt;next;\n    while (p !&#x3D; NULL)\n    &#123;\n        printf(&quot;%d &quot;, p-&gt;data);\n        p &#x3D; p-&gt;next;\n    &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"求单链表长度\"><a href=\"#求单链表长度\" class=\"headerlink\" title=\"求单链表长度\"></a>求单链表长度</h2><ol>\n<li>定义Link类型节点指针p，并为其申请空间</li>\n<li>指向第一个节点（头节点的下一个节点），定义一个变量count统计长度的值</li>\n<li>只要p不为空，则p指向p的下一个节点，count自增1</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;**\n*   （2）求单链表元素个数\n*   操作接口：int lengthofNode(Link head);\n*&#x2F;\nint lengthofNode(Link head)\n&#123;\n    Link p &#x3D; NULL;\n    p &#x3D; (Link)malloc(sizeof(Node));\n    p &#x3D; head-&gt;next;\n    int count &#x3D; 0;\n    while (p !&#x3D; NULL)\n    &#123;\n        p &#x3D; p-&gt;next;\n        count++;\n    &#125;\n    return count;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"单链表查找操作\"><a href=\"#单链表查找操作\" class=\"headerlink\" title=\"单链表查找操作\"></a>单链表查找操作</h2><ol>\n<li>定义节点p，用来循环遍历链表</li>\n<li>定义count，用来记载当前所在的下标</li>\n<li>循环，当x与链表当前节点的数据与相等时，则找到了，返回true</li>\n<li>当循环完了，且未找到与x相等的值，则返回false</li>\n</ol>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">/**\n*   （3）单链表查找操作\n*   操作接口：int queryNode(Link head, DataType x);\n*/</span>\n<span class=\"token keyword\">bool</span> <span class=\"token function\">queryNode</span><span class=\"token punctuation\">(</span>Link head<span class=\"token punctuation\">,</span> DataType x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    Link p <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Link<span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    p <span class=\"token operator\">=</span> head<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>data <span class=\"token operator\">==</span> x<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d第一次出现在第%d个元素上\"</span><span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>data<span class=\"token punctuation\">,</span> count<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        p <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"单链表的插入\"><a href=\"#单链表的插入\" class=\"headerlink\" title=\"单链表的插入\"></a>单链表的插入</h2><ol>\n<li>三个参数，第一个是头节点，第二个是插入的位置（不是下标，是下标+1），第三个是要插入的元素</li>\n<li>定义节点p用来循环链表，变量count用来记录当前节点下标位置</li>\n<li>当p不为空且count的值小于i-1，则循环遍历且count自增1</li>\n<li>若链表节点已经为空了，count还是小于i，则直接返回false</li>\n<li>否则就断链添加节点</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;**\n*   （4）单链表插入操作\n*   操作接口：bool insertNode(Link head, int i, DataType x);\n*&#x2F;\nbool insertNode(Link head, int i, DataType x)\n&#123;\n    Link p &#x3D; NULL;\n    p &#x3D; (Link)malloc(sizeof(Node));\n    p &#x3D; head-&gt;next;\n    int count &#x3D; 0;\n    while (p !&#x3D; NULL &amp;&amp; count &lt; i-1)\n    &#123;\n        p &#x3D; p-&gt;next;\n        count++;\n    &#125;\n    if (p &#x3D;&#x3D; NULL)\n        return false;\n    else \n    &#123;\n        Link q &#x3D; NULL;\n        q &#x3D; (Link)malloc(sizeof(Node));\n        q-&gt;next &#x3D; p-&gt;next;\n        q-&gt;data &#x3D; x;\n        p-&gt;next &#x3D; q;\n        return true;\n    &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"头插法建立单链表\"><a href=\"#头插法建立单链表\" class=\"headerlink\" title=\"头插法建立单链表\"></a>头插法建立单链表</h2><p>头插法是建立链表的一种方法，也是必须掌握的方法。即每次插入的新节点都是head的next域，最后第一个插入的节点就成了最后一个节点。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;**\n*   （5）创建一个单链表 -- 头插法\n*   操作接口：Link headnewList(DataType a[], int n);\n*   头插法：将待插入的节点插在头节点的后面\n*   结果：插入到链表顺序和数组顺序相反\n*&#x2F;\nLink headNewList(DataType a[], int n)\n&#123;\n    Link head &#x3D; NULL;\n    head &#x3D; (Link)malloc(sizeof(Node));\n    head-&gt;next &#x3D; NULL;\n    int i &#x3D; 0;\n    for (i; i &lt; n; i++)\n    &#123;\n        Link q &#x3D; NULL;\n        q &#x3D; (Link)malloc(sizeof(Node));\n        q-&gt;data &#x3D; a[i];\n        q-&gt;next &#x3D; head-&gt;next;\n        head-&gt;next &#x3D; q;\n    &#125;\n    return head;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"尾插法建立单链表\"><a href=\"#尾插法建立单链表\" class=\"headerlink\" title=\"尾插法建立单链表\"></a>尾插法建立单链表</h2><p>尾插法建立链表是需要两个节点，一个rear（尾）指针和一个head（头）指针，head指针指向第一个节点，rear指针指向最新插入的节点，每次新建节点都操作尾指针，最后返回头指针。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;**\n*   （6）创建一个单链表 -- 尾插法\n*   操作接口：Link rearNewList(DataType a[], int n);\n*   头插法：将待插入的节点插在终端节点的后面\n*   结果：插入到链表顺序和数组顺序相同\n*&#x2F;\nLink rearNewList(DataType a[], int n)\n&#123;\n    Link head &#x3D; NULL, rear &#x3D; NULL;\n    head &#x3D; (Link)malloc(sizeof(Node));\n    rear &#x3D; (Link)malloc(sizeof(Node));\n    head-&gt;next &#x3D; NULL;\n    rear &#x3D; head;\n    for (int i &#x3D; 0; i &lt; n; i++)\n    &#123;\n        Link q &#x3D; NULL;\n        q &#x3D; (Link)malloc(sizeof(Node));\n        q-&gt;data &#x3D; a[i];\n        q-&gt;next &#x3D; NULL; &#x2F;&#x2F;防止指针瞎指\n        rear-&gt;next &#x3D; q;\n        rear &#x3D; q;\n    &#125;\n    rear-&gt;next &#x3D; NULL;  &#x2F;&#x2F;最后让尾节点的next置空\n    return head;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"删除单链表节点\"><a href=\"#删除单链表节点\" class=\"headerlink\" title=\"删除单链表节点\"></a>删除单链表节点</h2><p>删除值为x的节点，思想还是查找的思想，找到了就让指针指向该节点的后继节点，最后断链，没找到就返回false。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;**\n*   （7）单链表节点的删除\n*   操作接口：bool deleteNode(Link head, DataType x);\n*&#x2F;\nbool deleteNode(Link head, DataType x)\n&#123;\n    &#x2F;&#x2F; 判空\n    if (head &#x3D;&#x3D; NULL || head-&gt;next &#x3D;&#x3D; NULL)\n        return false;\n    Link p &#x3D; NULL, q &#x3D; NULL;\n    p &#x3D; (Link)malloc(sizeof(Node));\n    q &#x3D; (Link)malloc(sizeof(Node));\n    p &#x3D; head;\n    q &#x3D; head-&gt;next;\n    while (q !&#x3D; NULL)\n    &#123;\n        if (q-&gt;data &#x3D;&#x3D; x)\n        &#123;\n            p-&gt;next &#x3D; q-&gt;next;\n            free(q);\n            return true;\n        &#125;\n        else\n        &#123;   \n            p &#x3D; q;\n            q &#x3D; q-&gt;next;\n        &#125;\n    &#125;\n    return false;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"单链表置空\"><a href=\"#单链表置空\" class=\"headerlink\" title=\"单链表置空\"></a>单链表置空</h2><p>循环遍历每一个节点，一个一个地释放空间，最后释放head指针的空间，这样链表的空间就置空了。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;**\n*   （8）单链表的释放\n*    操作接口：void clearLink(Link head);\n*&#x2F;\nvoid clearLink(Link head)\n&#123;\n    Link p &#x3D; NULL, q &#x3D; NULL;\n    p &#x3D; (Link)malloc(sizeof(Node));\n    q &#x3D; (Link)malloc(sizeof(Node));\n    p &#x3D; head-&gt;next;\n    q &#x3D; p-&gt;next;\n    while (p !&#x3D; NULL)\n    &#123;\n        free(p);\n        p &#x3D; q;\n        q &#x3D; q-&gt;next;\n    &#125;\n    free(head);\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"数据结构之单链表\"><a href=\"#数据结构之单链表\" class=\"headerlink\" title=\"数据结构之单链表\"></a>数据结构之单链表</h1><h2 id=\"引入单链表\"><a href=\"#引入单链表\" class=\"headerlink\" title=\"引入单链表\"></a>引入单链表</h2><p>节点与节点之间的物理地址不一定不连续，逻辑地址必定是连续的，这种就是链式结构。所谓的单链表就是链式结构的线性表，需要使用一个数据域来存放数据，一个指针域来存放下一个节点的所在地址，这样形成的这种线性结构。一般说的链表就是单链表，下文也将其称为链表，本文介绍的是最简单的整形链表。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/chauity/images/blog/pictures/image-20230103163115246.png\" alt=\"image-20230103163115246\"></p>\n<p>链表的节点结构体：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">typedef int DataType;\t&#x2F;&#x2F;DataType 是 int 的别名\ntypedef struct node\n&#123;\n    DataType data;\t\t&#x2F;&#x2F;数据域，用于存放本节点的数据\n    struct node* next;\t&#x2F;&#x2F;指针域，用于存放下一节点的地址\n&#125;Node, *Link;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在上面的结构体中，Node是struct node的别名，Link是struct node*的别名。即 </p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F; 等价\nNode st;\tstruct node st;\nLink p;\t\tstruct node* p;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>链表中，为了方便空链表和非空链表的统一处理，我们引入了头节点，这个头节点，与其他的节点相同，没有数据域，只有指针域，且其指针指向第一个元素，若是空链表则指针域的指向为空。</p>\n<h2 id=\"遍历单链表\"><a href=\"#遍历单链表\" class=\"headerlink\" title=\"遍历单链表\"></a>遍历单链表</h2><ol>\n<li>定义Link类型节点指针p，并为其申请空间</li>\n<li>指向第一个节点（头节点的下一个节点）</li>\n<li>只要p不为空，则打印p的数据域，且p指向p的下一个节点</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;**\n*   （1）单链表的遍历操作\n*   操作接口： void displayNode(Link head);\n*&#x2F;\nvoid displayNode(Link head)\n&#123;\n    Link p &#x3D; NULL;\n    p &#x3D; (Link)malloc(sizeof(Node));\n    p &#x3D; head-&gt;next;\n    while (p !&#x3D; NULL)\n    &#123;\n        printf(&quot;%d &quot;, p-&gt;data);\n        p &#x3D; p-&gt;next;\n    &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"求单链表长度\"><a href=\"#求单链表长度\" class=\"headerlink\" title=\"求单链表长度\"></a>求单链表长度</h2><ol>\n<li>定义Link类型节点指针p，并为其申请空间</li>\n<li>指向第一个节点（头节点的下一个节点），定义一个变量count统计长度的值</li>\n<li>只要p不为空，则p指向p的下一个节点，count自增1</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;**\n*   （2）求单链表元素个数\n*   操作接口：int lengthofNode(Link head);\n*&#x2F;\nint lengthofNode(Link head)\n&#123;\n    Link p &#x3D; NULL;\n    p &#x3D; (Link)malloc(sizeof(Node));\n    p &#x3D; head-&gt;next;\n    int count &#x3D; 0;\n    while (p !&#x3D; NULL)\n    &#123;\n        p &#x3D; p-&gt;next;\n        count++;\n    &#125;\n    return count;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"单链表查找操作\"><a href=\"#单链表查找操作\" class=\"headerlink\" title=\"单链表查找操作\"></a>单链表查找操作</h2><ol>\n<li>定义节点p，用来循环遍历链表</li>\n<li>定义count，用来记载当前所在的下标</li>\n<li>循环，当x与链表当前节点的数据与相等时，则找到了，返回true</li>\n<li>当循环完了，且未找到与x相等的值，则返回false</li>\n</ol>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">/**\n*   （3）单链表查找操作\n*   操作接口：int queryNode(Link head, DataType x);\n*/</span>\n<span class=\"token keyword\">bool</span> <span class=\"token function\">queryNode</span><span class=\"token punctuation\">(</span>Link head<span class=\"token punctuation\">,</span> DataType x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    Link p <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Link<span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    p <span class=\"token operator\">=</span> head<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>data <span class=\"token operator\">==</span> x<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d第一次出现在第%d个元素上\"</span><span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>data<span class=\"token punctuation\">,</span> count<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        p <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"单链表的插入\"><a href=\"#单链表的插入\" class=\"headerlink\" title=\"单链表的插入\"></a>单链表的插入</h2><ol>\n<li>三个参数，第一个是头节点，第二个是插入的位置（不是下标，是下标+1），第三个是要插入的元素</li>\n<li>定义节点p用来循环链表，变量count用来记录当前节点下标位置</li>\n<li>当p不为空且count的值小于i-1，则循环遍历且count自增1</li>\n<li>若链表节点已经为空了，count还是小于i，则直接返回false</li>\n<li>否则就断链添加节点</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;**\n*   （4）单链表插入操作\n*   操作接口：bool insertNode(Link head, int i, DataType x);\n*&#x2F;\nbool insertNode(Link head, int i, DataType x)\n&#123;\n    Link p &#x3D; NULL;\n    p &#x3D; (Link)malloc(sizeof(Node));\n    p &#x3D; head-&gt;next;\n    int count &#x3D; 0;\n    while (p !&#x3D; NULL &amp;&amp; count &lt; i-1)\n    &#123;\n        p &#x3D; p-&gt;next;\n        count++;\n    &#125;\n    if (p &#x3D;&#x3D; NULL)\n        return false;\n    else \n    &#123;\n        Link q &#x3D; NULL;\n        q &#x3D; (Link)malloc(sizeof(Node));\n        q-&gt;next &#x3D; p-&gt;next;\n        q-&gt;data &#x3D; x;\n        p-&gt;next &#x3D; q;\n        return true;\n    &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"头插法建立单链表\"><a href=\"#头插法建立单链表\" class=\"headerlink\" title=\"头插法建立单链表\"></a>头插法建立单链表</h2><p>头插法是建立链表的一种方法，也是必须掌握的方法。即每次插入的新节点都是head的next域，最后第一个插入的节点就成了最后一个节点。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;**\n*   （5）创建一个单链表 -- 头插法\n*   操作接口：Link headnewList(DataType a[], int n);\n*   头插法：将待插入的节点插在头节点的后面\n*   结果：插入到链表顺序和数组顺序相反\n*&#x2F;\nLink headNewList(DataType a[], int n)\n&#123;\n    Link head &#x3D; NULL;\n    head &#x3D; (Link)malloc(sizeof(Node));\n    head-&gt;next &#x3D; NULL;\n    int i &#x3D; 0;\n    for (i; i &lt; n; i++)\n    &#123;\n        Link q &#x3D; NULL;\n        q &#x3D; (Link)malloc(sizeof(Node));\n        q-&gt;data &#x3D; a[i];\n        q-&gt;next &#x3D; head-&gt;next;\n        head-&gt;next &#x3D; q;\n    &#125;\n    return head;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"尾插法建立单链表\"><a href=\"#尾插法建立单链表\" class=\"headerlink\" title=\"尾插法建立单链表\"></a>尾插法建立单链表</h2><p>尾插法建立链表是需要两个节点，一个rear（尾）指针和一个head（头）指针，head指针指向第一个节点，rear指针指向最新插入的节点，每次新建节点都操作尾指针，最后返回头指针。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;**\n*   （6）创建一个单链表 -- 尾插法\n*   操作接口：Link rearNewList(DataType a[], int n);\n*   头插法：将待插入的节点插在终端节点的后面\n*   结果：插入到链表顺序和数组顺序相同\n*&#x2F;\nLink rearNewList(DataType a[], int n)\n&#123;\n    Link head &#x3D; NULL, rear &#x3D; NULL;\n    head &#x3D; (Link)malloc(sizeof(Node));\n    rear &#x3D; (Link)malloc(sizeof(Node));\n    head-&gt;next &#x3D; NULL;\n    rear &#x3D; head;\n    for (int i &#x3D; 0; i &lt; n; i++)\n    &#123;\n        Link q &#x3D; NULL;\n        q &#x3D; (Link)malloc(sizeof(Node));\n        q-&gt;data &#x3D; a[i];\n        q-&gt;next &#x3D; NULL; &#x2F;&#x2F;防止指针瞎指\n        rear-&gt;next &#x3D; q;\n        rear &#x3D; q;\n    &#125;\n    rear-&gt;next &#x3D; NULL;  &#x2F;&#x2F;最后让尾节点的next置空\n    return head;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"删除单链表节点\"><a href=\"#删除单链表节点\" class=\"headerlink\" title=\"删除单链表节点\"></a>删除单链表节点</h2><p>删除值为x的节点，思想还是查找的思想，找到了就让指针指向该节点的后继节点，最后断链，没找到就返回false。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;**\n*   （7）单链表节点的删除\n*   操作接口：bool deleteNode(Link head, DataType x);\n*&#x2F;\nbool deleteNode(Link head, DataType x)\n&#123;\n    &#x2F;&#x2F; 判空\n    if (head &#x3D;&#x3D; NULL || head-&gt;next &#x3D;&#x3D; NULL)\n        return false;\n    Link p &#x3D; NULL, q &#x3D; NULL;\n    p &#x3D; (Link)malloc(sizeof(Node));\n    q &#x3D; (Link)malloc(sizeof(Node));\n    p &#x3D; head;\n    q &#x3D; head-&gt;next;\n    while (q !&#x3D; NULL)\n    &#123;\n        if (q-&gt;data &#x3D;&#x3D; x)\n        &#123;\n            p-&gt;next &#x3D; q-&gt;next;\n            free(q);\n            return true;\n        &#125;\n        else\n        &#123;   \n            p &#x3D; q;\n            q &#x3D; q-&gt;next;\n        &#125;\n    &#125;\n    return false;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"单链表置空\"><a href=\"#单链表置空\" class=\"headerlink\" title=\"单链表置空\"></a>单链表置空</h2><p>循环遍历每一个节点，一个一个地释放空间，最后释放head指针的空间，这样链表的空间就置空了。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;**\n*   （8）单链表的释放\n*    操作接口：void clearLink(Link head);\n*&#x2F;\nvoid clearLink(Link head)\n&#123;\n    Link p &#x3D; NULL, q &#x3D; NULL;\n    p &#x3D; (Link)malloc(sizeof(Node));\n    q &#x3D; (Link)malloc(sizeof(Node));\n    p &#x3D; head-&gt;next;\n    q &#x3D; p-&gt;next;\n    while (p !&#x3D; NULL)\n    &#123;\n        free(p);\n        p &#x3D; q;\n        q &#x3D; q-&gt;next;\n    &#125;\n    free(head);\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n"},{"title":"配置网站加速","date":"2022-11-03T08:59:59.000Z","_content":"\n# 问题\n- 由于`Hexo`网站是部署在`GitHub`上，国内访问速度很慢，需要加速访问\n\n# 方案\n- 使用`hexo-offline-popup`插件加速\n\n# 步骤\n- `Hexo`根目录安装`hexo-offline-popup`插件\n\n``` npm\nnpm i -S hexo-offline-popup\n```\n\n- 配置`Hexo`根目录的文件`_config.yml`\n\n``` yml\nservice_worker:\n  maximumFileSizeToCacheInBytes: 5242880\n  staticFileGlobs:\n  - public/**/*.{js,html,css,png,jpg,gif,svg,eot,ttf,woff,woff2}\n  stripPrefix: public\n  verbose: true\n  #runtimeCaching: # 有配置cdn资源(如jsdelivr)开启\n  #  - urlPattern: /*\n  #    handler: cacheFirst\n  #    options:\n  #      origin: cdn.jsdelivr.net\n  #  - urlPattern: /*\n  #    handler: cacheFirst\n  #    options:\n  #      origin: gcore.jsdelivr.net\n  #  - urlPattern: /*\n  #    handler: cacheFirst\n  #    options:\n  #      origin: fastly.jsdelivr.net\n```\n\n- 部署\n``` cmd\nhexo c && hexo g && hexo d\n```","source":"_posts/网站加速.md","raw":"---\ntitle: 配置网站加速\ndate: 2022-11-03 16:59:59\ntags: 网站加速\ncategories: 网站加速\n---\n\n# 问题\n- 由于`Hexo`网站是部署在`GitHub`上，国内访问速度很慢，需要加速访问\n\n# 方案\n- 使用`hexo-offline-popup`插件加速\n\n# 步骤\n- `Hexo`根目录安装`hexo-offline-popup`插件\n\n``` npm\nnpm i -S hexo-offline-popup\n```\n\n- 配置`Hexo`根目录的文件`_config.yml`\n\n``` yml\nservice_worker:\n  maximumFileSizeToCacheInBytes: 5242880\n  staticFileGlobs:\n  - public/**/*.{js,html,css,png,jpg,gif,svg,eot,ttf,woff,woff2}\n  stripPrefix: public\n  verbose: true\n  #runtimeCaching: # 有配置cdn资源(如jsdelivr)开启\n  #  - urlPattern: /*\n  #    handler: cacheFirst\n  #    options:\n  #      origin: cdn.jsdelivr.net\n  #  - urlPattern: /*\n  #    handler: cacheFirst\n  #    options:\n  #      origin: gcore.jsdelivr.net\n  #  - urlPattern: /*\n  #    handler: cacheFirst\n  #    options:\n  #      origin: fastly.jsdelivr.net\n```\n\n- 部署\n``` cmd\nhexo c && hexo g && hexo d\n```","slug":"网站加速","published":1,"updated":"2024-01-17T02:50:32.011Z","_id":"clrh5tshp000iccus1wla9hbn","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><ul>\n<li>由于<code>Hexo</code>网站是部署在<code>GitHub</code>上，国内访问速度很慢，需要加速访问</li>\n</ul>\n<h1 id=\"方案\"><a href=\"#方案\" class=\"headerlink\" title=\"方案\"></a>方案</h1><ul>\n<li>使用<code>hexo-offline-popup</code>插件加速</li>\n</ul>\n<h1 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h1><ul>\n<li><code>Hexo</code>根目录安装<code>hexo-offline-popup</code>插件</li>\n</ul>\n<pre class=\"line-numbers language-npm\" data-language=\"npm\"><code class=\"language-npm\">npm i -S hexo-offline-popup<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li>配置<code>Hexo</code>根目录的文件<code>_config.yml</code></li>\n</ul>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">service_worker</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">maximumFileSizeToCacheInBytes</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5242880</span>\n  <span class=\"token key atrule\">staticFileGlobs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> public/<span class=\"token important\">**/*.</span><span class=\"token punctuation\">&#123;</span>js<span class=\"token punctuation\">,</span>html<span class=\"token punctuation\">,</span>css<span class=\"token punctuation\">,</span>png<span class=\"token punctuation\">,</span>jpg<span class=\"token punctuation\">,</span>gif<span class=\"token punctuation\">,</span>svg<span class=\"token punctuation\">,</span>eot<span class=\"token punctuation\">,</span>ttf<span class=\"token punctuation\">,</span>woff<span class=\"token punctuation\">,</span>woff2<span class=\"token punctuation\">&#125;</span>\n  <span class=\"token key atrule\">stripPrefix</span><span class=\"token punctuation\">:</span> public\n  <span class=\"token key atrule\">verbose</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n  <span class=\"token comment\">#runtimeCaching: # 有配置cdn资源(如jsdelivr)开启</span>\n  <span class=\"token comment\">#  - urlPattern: /*</span>\n  <span class=\"token comment\">#    handler: cacheFirst</span>\n  <span class=\"token comment\">#    options:</span>\n  <span class=\"token comment\">#      origin: cdn.jsdelivr.net</span>\n  <span class=\"token comment\">#  - urlPattern: /*</span>\n  <span class=\"token comment\">#    handler: cacheFirst</span>\n  <span class=\"token comment\">#    options:</span>\n  <span class=\"token comment\">#      origin: gcore.jsdelivr.net</span>\n  <span class=\"token comment\">#  - urlPattern: /*</span>\n  <span class=\"token comment\">#    handler: cacheFirst</span>\n  <span class=\"token comment\">#    options:</span>\n  <span class=\"token comment\">#      origin: fastly.jsdelivr.net</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>部署<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">hexo c &amp;&amp; hexo g &amp;&amp; hexo d<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><ul>\n<li>由于<code>Hexo</code>网站是部署在<code>GitHub</code>上，国内访问速度很慢，需要加速访问</li>\n</ul>\n<h1 id=\"方案\"><a href=\"#方案\" class=\"headerlink\" title=\"方案\"></a>方案</h1><ul>\n<li>使用<code>hexo-offline-popup</code>插件加速</li>\n</ul>\n<h1 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h1><ul>\n<li><code>Hexo</code>根目录安装<code>hexo-offline-popup</code>插件</li>\n</ul>\n<pre class=\"line-numbers language-npm\" data-language=\"npm\"><code class=\"language-npm\">npm i -S hexo-offline-popup<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li>配置<code>Hexo</code>根目录的文件<code>_config.yml</code></li>\n</ul>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">service_worker</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">maximumFileSizeToCacheInBytes</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5242880</span>\n  <span class=\"token key atrule\">staticFileGlobs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> public/<span class=\"token important\">**/*.</span><span class=\"token punctuation\">&#123;</span>js<span class=\"token punctuation\">,</span>html<span class=\"token punctuation\">,</span>css<span class=\"token punctuation\">,</span>png<span class=\"token punctuation\">,</span>jpg<span class=\"token punctuation\">,</span>gif<span class=\"token punctuation\">,</span>svg<span class=\"token punctuation\">,</span>eot<span class=\"token punctuation\">,</span>ttf<span class=\"token punctuation\">,</span>woff<span class=\"token punctuation\">,</span>woff2<span class=\"token punctuation\">&#125;</span>\n  <span class=\"token key atrule\">stripPrefix</span><span class=\"token punctuation\">:</span> public\n  <span class=\"token key atrule\">verbose</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n  <span class=\"token comment\">#runtimeCaching: # 有配置cdn资源(如jsdelivr)开启</span>\n  <span class=\"token comment\">#  - urlPattern: /*</span>\n  <span class=\"token comment\">#    handler: cacheFirst</span>\n  <span class=\"token comment\">#    options:</span>\n  <span class=\"token comment\">#      origin: cdn.jsdelivr.net</span>\n  <span class=\"token comment\">#  - urlPattern: /*</span>\n  <span class=\"token comment\">#    handler: cacheFirst</span>\n  <span class=\"token comment\">#    options:</span>\n  <span class=\"token comment\">#      origin: gcore.jsdelivr.net</span>\n  <span class=\"token comment\">#  - urlPattern: /*</span>\n  <span class=\"token comment\">#    handler: cacheFirst</span>\n  <span class=\"token comment\">#    options:</span>\n  <span class=\"token comment\">#      origin: fastly.jsdelivr.net</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>部署<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">hexo c &amp;&amp; hexo g &amp;&amp; hexo d<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n"},{"date":"2024-01-17T02:22:49.872Z","title":"套接字(Socket)---网络编程","_content":"# C++套接字网络编程\n\n## OSI、TCP/IP 架构\n\n了解计算机网络后(不了解也行)，你应该也必须知道OSI七层网络模型和TCP/IP五层模型。在大学时候，老师们都会叫我们背这些东西，苦不堪言。最后也还是会忘掉，我们应该是学会理解它们之间的关系，而不用记住。\n\n首先粘出图片\n![20221112111602](https://gcore.jsdelivr.net/gh/chauity/images/blog/pictures/20221112111602.png)\n\n这就是他们对应的关系，`OSI模型`分的太细，不是我们要考虑的东西，只用知道上三层对应 `TCP/IP模型`的应用层，下两层对应 `TCP/IP模型`的网络接口层。作为Socket编程，我们处理的就是中间的传输层和网际层的东西。\n\n需要知道TCP、UDP在同一层（传输层）\n\nIP在（网际层）\n\n### TCP(Transmission Control Protocol)协议\n\n对于初学者就需要知道它是可靠的、面向连接的协议就行了。连接需要三次握手、断开需要四次挥手。\n\n建立连接 => 三次握手：\n\n三次握手就好比，\n\n面试官邀请你去面试的场景：\n\n第一次：（面试官）：您好，您的简历挺不错，明天来面试吗？\n\n第二次：（你）：好的，明天我有时间，明天能来。\n\n第三次：（面试官）：那好你就明天来面试吧。\n\n这是三次握手的图解：\n\n![20221112113033](https://gcore.jsdelivr.net/gh/chauity/images/blog/pictures/20221112113033.png)\n\n如上图，TCP是双向连接的分为客户端和服务器。就像我们平时使用 `Chrome浏览器`，它就是一个客户端，服务器是各个网站自己家的，我们就不知道了。\n\n第一次:客户端发送SYN报文，请求同步，并发送序列号Seq为 X。\n\n    SYN是单词`synchronize`的简写，意为 同步 。就是请求同步的意思。\n    \n    Seq就是一个序列号。也是单词简写`sequence`。\n\n第二次：服务器收到客户端的SYN报文后，确认要同步。就向客户端发送SYN报文，这个报文和客户端发来的一样，顺带一个ACK报文，ACK报文号是客户端发来的Seq序列号+1，同时附带自己的Seq序列号。\n\n    ACK是单词`acknowledge`的缩写，意为 确认 。即收到同步请求，确认同步。\n\n第三次：客户端再次发送ACK确认报文，报文号是服务端第二次握手发来的Seq序列号+1，并发送序列号。\n\n    每次都要发送序列号，就是确保连接是正确的，因此TCP是面向连接的，可靠的协议。\n    问：那为什么不四次握手建立连接呢？\n    答：其实也可以四次握手建立连接，只是会浪费带宽。而三次握手是必要的。\n\n断开连接 => 四次挥手：\n\n四次挥手就好比，\n\n你拒绝去面试的场景：\n\n第一次：（你）：您好，我明天有约了，就不能来面试了。\n\n第二次：（面试官）：好的，这边收到您不来面试了？\n\n第三次：（面试官）：您这边明天确定不来了吗？\n\n第四次：（你）：是的，我不来了。\n\nemmm~~  现实中面试官肯定不会第三次，还问你是不是不去。但这是计算机断开连接需要的处理。\n\n![20221112112859](https://gcore.jsdelivr.net/gh/chauity/images/blog/pictures/20221112112859.png)\n\n四次挥手：如上图所示\n\n第一次：客户端要求断开本次连接。向服务器发送 FIN 报文，并携带序列号Seq。\n\n第二次：服务器确认断开连接，发送 ACK 报文，序列号是第一次挥手时序列号+1。\n\n第三次：服务器向客户端发送断开 FIN 报文，并携带序列号。\n\n第四次：客户端确认断开连接，发送 ACK 报文，序列号是第三次挥手时序列号+1。\n\n    就是一来一回的发送报文，以确定真的要断开连接。\n\n### UDP(User Datagram Protocol) 协议\n\nUDP就不像TCP那样要确认后在发包，它是只管发包,不管你收没收到。这样做的优点就是传输速度快，无情的发包机器。\n\n学习UDP要了解其报文构成\n\n![20221112142029](https://gcore.jsdelivr.net/gh/chauity/images/blog/pictures/20221112142029.png)\n\n如上图，UDP由首部字段和数据字段组成。\n\n首部字段分为`源端口号`、`目的端口号`、`长度`以及`校验码`都是2个字节（16比特）。\n\n`源端口号`和`目的端口号`很好理解就是发送方和接收方的端口号。\n\n`长度`就是UDP数据报的长度。\n\n校验和的作用是检验发送是否出错，出错就丢弃。\n\n### IP协议\n\n所谓IP就是一段数字，大家肯定都知道。比如www.baidu.com,这是百度的网址，也可以叫做URL（统一资源定位符），你叫它域名也是一样的。DNS（Domain Name System），即是域名系统。在网上搜索`域名解析查询`。输入百度网站的域名，就能解析出一个形如`14.215.177.38`的数字。这就是IP。\n\n其中的每一个数字实际上是一个8个的二进制组成的数字，计算机用1比特来存其中的一个数字，总共需要32比特，也就是4个字节数。这也是ip的大小。\n\n## Socket\n\n### socket编程的概念\n\n`socket`就是插座(中文翻译套接字)，运行在计算机中的两个程序通过 `socket`\n建立一个通道，数据在通道中运输。\n\n`socket`把复杂的TCP/IP协议族隐藏了起来，对程序员来说，只要用好 socket相关的函数，就可以完成网络通信。\n\n### socket的分类\n\n`socket`提供了流（stream）和数据报（datagram）两种通信机制，即 `流socket`和 `数据报socket`。\n\n`流socket`基于 `TCP协议`，是一个有序、可靠、双向字节流的通道，传输数据数据不会丢失、不会重复、顺序也不会错乱。\n\n`数据报socket`基于UDP协议，不需要建立和维持连接，可能会丢失或错乱。UDP不是一个可靠的协议，对数据的长度有限制，但是它的效率比较高。\n\n某些应用层协议，处于历史原因，受当时技术和网络条件限制，选择了基于UDP是实现，其选择的理由很可能现在已经不成立了。\n\n实时的音视频聊天可能采用的是 `UDP`，这种业务可以接受数据的丢失且不必重传。\n\n本专题只介绍 `流socket`,`数据包socket`的应用场景实在太少，以后可能更少。\n\n### 客户端/服务端模式\n\n在 `TCP/IP`网络应用中，两个程序之间通信模式是客户端/服务端模式（client/server）。\n\n![img](https://gcore.jsdelivr.net/gh/chauity/images/blog/pictrues/20191225154007754.png)\n\n\n### CPP 网络编程的示例代码\n\n相关函数\n\n``` cpp\n\n //服务端\nsocket()\nbind()\nlisten()\naccept()\nread() 或 recv() 等\nwrite() 或 send() 等\nclose()\n\n//客户端\nsocket()\nconnect()\nread() 或 recv() 等\nwrite() 或 send() 等\nclose()\n\n```\n\n`TCP Stream Socket` 代码：\n\n服务器代码：\n``` cpp\n\n#include <iostream>\n#include <stdio.h>\n#include <WinSock2.h>\n\n#pragma comment(lib, \"ws2_32.lib\")\n\nint main(void) {\n\n\t// 1.初始化套接字库\n\tWORD wVersion;\n\tWSADATA wsaData;\n\tint err;\n\n\t// 设置版本，可以理解为1.1\n\twVersion = MAKEWORD(1, 1);\t// 例：MAKEWORD(a, b) --> b | a << 8 将a左移8位变成高位与b合并起来\n\n\t// 启动\n\terr = WSAStartup(wVersion, &wsaData);\n\tif (err != 0) {\n\t\treturn err;\n\t}\n\t// 检查：网络低位不等于1 || 网络高位不等于1\n\tif (LOBYTE(wsaData.wVersion) != 1 || HIBYTE(wsaData.wVersion) != 1) {\n\t\t// 清理套接字库\n\t\tWSACleanup();\n\t\treturn -1;\n\t}\n\n\t// 2.创建tcp套接字\t\t// AF_INET:ipv4   AF_INET6:ipv6\n\tSOCKET sockSrv = socket(AF_INET, SOCK_STREAM, 0);\n\n\t// 准备绑定信息\n\tSOCKADDR_IN addrSrv;\n\taddrSrv.sin_addr.S_un.S_addr = htonl(INADDR_ANY);\t// 设置绑定网卡\n\taddrSrv.sin_family = AF_INET;\t\t// 设置绑定网络模式\n\taddrSrv.sin_port = htons(6000);\t\t// 设置绑定端口\n\t// hton: host to network  x86:小端    网络传输：htons大端\n\n\t// 3.绑定到本机\n\tint retVal = bind(sockSrv, (SOCKADDR *)&addrSrv, sizeof(SOCKADDR));\n\tif (retVal == SOCKET_ERROR) {\n\t\tprintf(\"Failed bind:%d\\n\", WSAGetLastError());\n\t\treturn -1;\n\t}\n\n\t// 4.监听，同时能接收10个链接\n\tif (listen(sockSrv, 10) == SOCKET_ERROR) {\n\t\tprintf(\"Listen failed:%d\", WSAGetLastError());\n\t\treturn -1;\n\t}\n\n\tstd::cout << \"Server start at port: 6000\" << std::endl;\n\n\tSOCKADDR_IN addrCli;\n\tint len = sizeof(SOCKADDR);\n\n\tchar recvBuf[100];\n\tchar sendBuf[100];\n\twhile (1) {\n\t\t// 5.接收连接请求，返回针对客户端的套接字\n\t\tSOCKET sockConn = accept(sockSrv, (SOCKADDR *)&addrCli, &len);\n\t\tif (sockConn == SOCKET_ERROR) {\n\t\t\t//printf(\"Accept failed:%d\", WSAGetLastError());\n\t\t\tstd::cout << \"Accept failed: \" << WSAGetLastError() << std::endl;\n\t\t\tbreak;\n\t\t}\n\n\t\t//printf(\"Accept client IP:[%s]\\n\", inet_ntoa(addrCli.sin_addr));\n\t\tstd::cout << \"Accept client IP: \" << inet_ntoa(addrCli.sin_addr) << std::endl;\n\n\t\t// 6.发送数据\n\t\tsprintf_s(sendBuf, \"hello client!\\n\");\n\t\tint iSend = send(sockConn, sendBuf, strlen(sendBuf) + 1, 0);\n\t\tif (iSend == SOCKET_ERROR) {\n\t\t\tstd::cout << \"send failed!\\n\";\n\t\t\tbreak;\n\t\t}\n\n\t\t// 7.接收数据\n\t\trecv(sockConn, recvBuf, 100, 0);\n\t\tstd::cout << recvBuf << std::endl;\n\n\t\t// 关闭套接字\n\t\tclosesocket(sockConn);\n\t}\n\n\t// 8.关闭套接字\n\tclosesocket(sockSrv);\n\n\t// 9.清理套接字库\n\tWSACleanup();\n\n\treturn 0;\n}    \n```\n\n客户端代码：\n``` cpp\n#include <iostream>\n#include <WinSock2.h>\n\n#pragma comment(lib, \"ws2_32.lib\")\n\n\nint main(void) {\n\n\t// 1.初始化套接字库\n\tWORD wVersion;\n\tWSADATA wsaData;\n\tint err;\n\n\t// 可以理解为1.1\n\twVersion = MAKEWORD(1, 1);\t// 例：MAKEWORD(a, b) --> b | a << 8 将a左移8位变成高位与b合并起来\n\n\t// 启动\n\terr = WSAStartup(wVersion, &wsaData);\n\tif (err != 0) {\n\t\treturn err;\n\t}\n\t// 检查：网络地位不等于1 || 网络高位不等于1\n\tif (LOBYTE(wsaData.wVersion) != 1 || HIBYTE(wsaData.wVersion) != 1) {\n\t\t// 清理套接字库\n\t\tWSACleanup();\n\t\treturn -1;\n\t}\n\n\t// 创建TCP套接字\n\tSOCKET sockCli = socket(AF_INET, SOCK_STREAM, 0);\n\n\tSOCKADDR_IN addrSrv;\n\taddrSrv.sin_addr.S_un.S_addr = inet_addr(\"127.0.0.1\");\t// 服务器地址\n\taddrSrv.sin_port = htons(6000);\t\t// 端口号\n\taddrSrv.sin_family = AF_INET;\t\t// 地址类型(ipv4)\n\n\t// 2.连接服务器\n\tint err_log = connect(sockCli, (SOCKADDR *)&addrSrv, sizeof(SOCKADDR));\n\tif (err_log == 0) {\n\t\tprintf(\"连接服务器成功！\\n\");\n\t\n\t} else {\n\t\tprintf(\"连接服务器失败！\\n\");\n\t\treturn -1;\n\t}\n\n\tchar recvBuf[100];\n\tchar sendBuf[] = \"你好，服务器，我是客户端！\";\n\t// 3.发送数据到服务器\n\tsend(sockCli, sendBuf, strlen(sendBuf) + 1, 0);\n\n\t// 4.接收服务器的数据\n\trecv(sockCli, recvBuf, sizeof(recvBuf), 0);\n\tstd::cout << recvBuf << std::endl;\n\n\n\t// 5.关闭套接字并清除套接字库\n\tclosesocket(sockCli);\n\tWSACleanup();\n\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n","source":"_posts/网络编程.md","raw":"---\ndate: 2022年11月12日  农历十月十九\ntitle: 套接字(Socket)---网络编程\ntag: socket, c++\n---\n# C++套接字网络编程\n\n## OSI、TCP/IP 架构\n\n了解计算机网络后(不了解也行)，你应该也必须知道OSI七层网络模型和TCP/IP五层模型。在大学时候，老师们都会叫我们背这些东西，苦不堪言。最后也还是会忘掉，我们应该是学会理解它们之间的关系，而不用记住。\n\n首先粘出图片\n![20221112111602](https://gcore.jsdelivr.net/gh/chauity/images/blog/pictures/20221112111602.png)\n\n这就是他们对应的关系，`OSI模型`分的太细，不是我们要考虑的东西，只用知道上三层对应 `TCP/IP模型`的应用层，下两层对应 `TCP/IP模型`的网络接口层。作为Socket编程，我们处理的就是中间的传输层和网际层的东西。\n\n需要知道TCP、UDP在同一层（传输层）\n\nIP在（网际层）\n\n### TCP(Transmission Control Protocol)协议\n\n对于初学者就需要知道它是可靠的、面向连接的协议就行了。连接需要三次握手、断开需要四次挥手。\n\n建立连接 => 三次握手：\n\n三次握手就好比，\n\n面试官邀请你去面试的场景：\n\n第一次：（面试官）：您好，您的简历挺不错，明天来面试吗？\n\n第二次：（你）：好的，明天我有时间，明天能来。\n\n第三次：（面试官）：那好你就明天来面试吧。\n\n这是三次握手的图解：\n\n![20221112113033](https://gcore.jsdelivr.net/gh/chauity/images/blog/pictures/20221112113033.png)\n\n如上图，TCP是双向连接的分为客户端和服务器。就像我们平时使用 `Chrome浏览器`，它就是一个客户端，服务器是各个网站自己家的，我们就不知道了。\n\n第一次:客户端发送SYN报文，请求同步，并发送序列号Seq为 X。\n\n    SYN是单词`synchronize`的简写，意为 同步 。就是请求同步的意思。\n    \n    Seq就是一个序列号。也是单词简写`sequence`。\n\n第二次：服务器收到客户端的SYN报文后，确认要同步。就向客户端发送SYN报文，这个报文和客户端发来的一样，顺带一个ACK报文，ACK报文号是客户端发来的Seq序列号+1，同时附带自己的Seq序列号。\n\n    ACK是单词`acknowledge`的缩写，意为 确认 。即收到同步请求，确认同步。\n\n第三次：客户端再次发送ACK确认报文，报文号是服务端第二次握手发来的Seq序列号+1，并发送序列号。\n\n    每次都要发送序列号，就是确保连接是正确的，因此TCP是面向连接的，可靠的协议。\n    问：那为什么不四次握手建立连接呢？\n    答：其实也可以四次握手建立连接，只是会浪费带宽。而三次握手是必要的。\n\n断开连接 => 四次挥手：\n\n四次挥手就好比，\n\n你拒绝去面试的场景：\n\n第一次：（你）：您好，我明天有约了，就不能来面试了。\n\n第二次：（面试官）：好的，这边收到您不来面试了？\n\n第三次：（面试官）：您这边明天确定不来了吗？\n\n第四次：（你）：是的，我不来了。\n\nemmm~~  现实中面试官肯定不会第三次，还问你是不是不去。但这是计算机断开连接需要的处理。\n\n![20221112112859](https://gcore.jsdelivr.net/gh/chauity/images/blog/pictures/20221112112859.png)\n\n四次挥手：如上图所示\n\n第一次：客户端要求断开本次连接。向服务器发送 FIN 报文，并携带序列号Seq。\n\n第二次：服务器确认断开连接，发送 ACK 报文，序列号是第一次挥手时序列号+1。\n\n第三次：服务器向客户端发送断开 FIN 报文，并携带序列号。\n\n第四次：客户端确认断开连接，发送 ACK 报文，序列号是第三次挥手时序列号+1。\n\n    就是一来一回的发送报文，以确定真的要断开连接。\n\n### UDP(User Datagram Protocol) 协议\n\nUDP就不像TCP那样要确认后在发包，它是只管发包,不管你收没收到。这样做的优点就是传输速度快，无情的发包机器。\n\n学习UDP要了解其报文构成\n\n![20221112142029](https://gcore.jsdelivr.net/gh/chauity/images/blog/pictures/20221112142029.png)\n\n如上图，UDP由首部字段和数据字段组成。\n\n首部字段分为`源端口号`、`目的端口号`、`长度`以及`校验码`都是2个字节（16比特）。\n\n`源端口号`和`目的端口号`很好理解就是发送方和接收方的端口号。\n\n`长度`就是UDP数据报的长度。\n\n校验和的作用是检验发送是否出错，出错就丢弃。\n\n### IP协议\n\n所谓IP就是一段数字，大家肯定都知道。比如www.baidu.com,这是百度的网址，也可以叫做URL（统一资源定位符），你叫它域名也是一样的。DNS（Domain Name System），即是域名系统。在网上搜索`域名解析查询`。输入百度网站的域名，就能解析出一个形如`14.215.177.38`的数字。这就是IP。\n\n其中的每一个数字实际上是一个8个的二进制组成的数字，计算机用1比特来存其中的一个数字，总共需要32比特，也就是4个字节数。这也是ip的大小。\n\n## Socket\n\n### socket编程的概念\n\n`socket`就是插座(中文翻译套接字)，运行在计算机中的两个程序通过 `socket`\n建立一个通道，数据在通道中运输。\n\n`socket`把复杂的TCP/IP协议族隐藏了起来，对程序员来说，只要用好 socket相关的函数，就可以完成网络通信。\n\n### socket的分类\n\n`socket`提供了流（stream）和数据报（datagram）两种通信机制，即 `流socket`和 `数据报socket`。\n\n`流socket`基于 `TCP协议`，是一个有序、可靠、双向字节流的通道，传输数据数据不会丢失、不会重复、顺序也不会错乱。\n\n`数据报socket`基于UDP协议，不需要建立和维持连接，可能会丢失或错乱。UDP不是一个可靠的协议，对数据的长度有限制，但是它的效率比较高。\n\n某些应用层协议，处于历史原因，受当时技术和网络条件限制，选择了基于UDP是实现，其选择的理由很可能现在已经不成立了。\n\n实时的音视频聊天可能采用的是 `UDP`，这种业务可以接受数据的丢失且不必重传。\n\n本专题只介绍 `流socket`,`数据包socket`的应用场景实在太少，以后可能更少。\n\n### 客户端/服务端模式\n\n在 `TCP/IP`网络应用中，两个程序之间通信模式是客户端/服务端模式（client/server）。\n\n![img](https://gcore.jsdelivr.net/gh/chauity/images/blog/pictrues/20191225154007754.png)\n\n\n### CPP 网络编程的示例代码\n\n相关函数\n\n``` cpp\n\n //服务端\nsocket()\nbind()\nlisten()\naccept()\nread() 或 recv() 等\nwrite() 或 send() 等\nclose()\n\n//客户端\nsocket()\nconnect()\nread() 或 recv() 等\nwrite() 或 send() 等\nclose()\n\n```\n\n`TCP Stream Socket` 代码：\n\n服务器代码：\n``` cpp\n\n#include <iostream>\n#include <stdio.h>\n#include <WinSock2.h>\n\n#pragma comment(lib, \"ws2_32.lib\")\n\nint main(void) {\n\n\t// 1.初始化套接字库\n\tWORD wVersion;\n\tWSADATA wsaData;\n\tint err;\n\n\t// 设置版本，可以理解为1.1\n\twVersion = MAKEWORD(1, 1);\t// 例：MAKEWORD(a, b) --> b | a << 8 将a左移8位变成高位与b合并起来\n\n\t// 启动\n\terr = WSAStartup(wVersion, &wsaData);\n\tif (err != 0) {\n\t\treturn err;\n\t}\n\t// 检查：网络低位不等于1 || 网络高位不等于1\n\tif (LOBYTE(wsaData.wVersion) != 1 || HIBYTE(wsaData.wVersion) != 1) {\n\t\t// 清理套接字库\n\t\tWSACleanup();\n\t\treturn -1;\n\t}\n\n\t// 2.创建tcp套接字\t\t// AF_INET:ipv4   AF_INET6:ipv6\n\tSOCKET sockSrv = socket(AF_INET, SOCK_STREAM, 0);\n\n\t// 准备绑定信息\n\tSOCKADDR_IN addrSrv;\n\taddrSrv.sin_addr.S_un.S_addr = htonl(INADDR_ANY);\t// 设置绑定网卡\n\taddrSrv.sin_family = AF_INET;\t\t// 设置绑定网络模式\n\taddrSrv.sin_port = htons(6000);\t\t// 设置绑定端口\n\t// hton: host to network  x86:小端    网络传输：htons大端\n\n\t// 3.绑定到本机\n\tint retVal = bind(sockSrv, (SOCKADDR *)&addrSrv, sizeof(SOCKADDR));\n\tif (retVal == SOCKET_ERROR) {\n\t\tprintf(\"Failed bind:%d\\n\", WSAGetLastError());\n\t\treturn -1;\n\t}\n\n\t// 4.监听，同时能接收10个链接\n\tif (listen(sockSrv, 10) == SOCKET_ERROR) {\n\t\tprintf(\"Listen failed:%d\", WSAGetLastError());\n\t\treturn -1;\n\t}\n\n\tstd::cout << \"Server start at port: 6000\" << std::endl;\n\n\tSOCKADDR_IN addrCli;\n\tint len = sizeof(SOCKADDR);\n\n\tchar recvBuf[100];\n\tchar sendBuf[100];\n\twhile (1) {\n\t\t// 5.接收连接请求，返回针对客户端的套接字\n\t\tSOCKET sockConn = accept(sockSrv, (SOCKADDR *)&addrCli, &len);\n\t\tif (sockConn == SOCKET_ERROR) {\n\t\t\t//printf(\"Accept failed:%d\", WSAGetLastError());\n\t\t\tstd::cout << \"Accept failed: \" << WSAGetLastError() << std::endl;\n\t\t\tbreak;\n\t\t}\n\n\t\t//printf(\"Accept client IP:[%s]\\n\", inet_ntoa(addrCli.sin_addr));\n\t\tstd::cout << \"Accept client IP: \" << inet_ntoa(addrCli.sin_addr) << std::endl;\n\n\t\t// 6.发送数据\n\t\tsprintf_s(sendBuf, \"hello client!\\n\");\n\t\tint iSend = send(sockConn, sendBuf, strlen(sendBuf) + 1, 0);\n\t\tif (iSend == SOCKET_ERROR) {\n\t\t\tstd::cout << \"send failed!\\n\";\n\t\t\tbreak;\n\t\t}\n\n\t\t// 7.接收数据\n\t\trecv(sockConn, recvBuf, 100, 0);\n\t\tstd::cout << recvBuf << std::endl;\n\n\t\t// 关闭套接字\n\t\tclosesocket(sockConn);\n\t}\n\n\t// 8.关闭套接字\n\tclosesocket(sockSrv);\n\n\t// 9.清理套接字库\n\tWSACleanup();\n\n\treturn 0;\n}    \n```\n\n客户端代码：\n``` cpp\n#include <iostream>\n#include <WinSock2.h>\n\n#pragma comment(lib, \"ws2_32.lib\")\n\n\nint main(void) {\n\n\t// 1.初始化套接字库\n\tWORD wVersion;\n\tWSADATA wsaData;\n\tint err;\n\n\t// 可以理解为1.1\n\twVersion = MAKEWORD(1, 1);\t// 例：MAKEWORD(a, b) --> b | a << 8 将a左移8位变成高位与b合并起来\n\n\t// 启动\n\terr = WSAStartup(wVersion, &wsaData);\n\tif (err != 0) {\n\t\treturn err;\n\t}\n\t// 检查：网络地位不等于1 || 网络高位不等于1\n\tif (LOBYTE(wsaData.wVersion) != 1 || HIBYTE(wsaData.wVersion) != 1) {\n\t\t// 清理套接字库\n\t\tWSACleanup();\n\t\treturn -1;\n\t}\n\n\t// 创建TCP套接字\n\tSOCKET sockCli = socket(AF_INET, SOCK_STREAM, 0);\n\n\tSOCKADDR_IN addrSrv;\n\taddrSrv.sin_addr.S_un.S_addr = inet_addr(\"127.0.0.1\");\t// 服务器地址\n\taddrSrv.sin_port = htons(6000);\t\t// 端口号\n\taddrSrv.sin_family = AF_INET;\t\t// 地址类型(ipv4)\n\n\t// 2.连接服务器\n\tint err_log = connect(sockCli, (SOCKADDR *)&addrSrv, sizeof(SOCKADDR));\n\tif (err_log == 0) {\n\t\tprintf(\"连接服务器成功！\\n\");\n\t\n\t} else {\n\t\tprintf(\"连接服务器失败！\\n\");\n\t\treturn -1;\n\t}\n\n\tchar recvBuf[100];\n\tchar sendBuf[] = \"你好，服务器，我是客户端！\";\n\t// 3.发送数据到服务器\n\tsend(sockCli, sendBuf, strlen(sendBuf) + 1, 0);\n\n\t// 4.接收服务器的数据\n\trecv(sockCli, recvBuf, sizeof(recvBuf), 0);\n\tstd::cout << recvBuf << std::endl;\n\n\n\t// 5.关闭套接字并清除套接字库\n\tclosesocket(sockCli);\n\tWSACleanup();\n\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n","slug":"网络编程","published":1,"updated":"2024-01-10T07:22:31.055Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clrh5tshr000lccus7abc31nr","content":"<h1 id=\"C-套接字网络编程\"><a href=\"#C-套接字网络编程\" class=\"headerlink\" title=\"C++套接字网络编程\"></a>C++套接字网络编程</h1><h2 id=\"OSI、TCP-IP-架构\"><a href=\"#OSI、TCP-IP-架构\" class=\"headerlink\" title=\"OSI、TCP&#x2F;IP 架构\"></a>OSI、TCP&#x2F;IP 架构</h2><p>了解计算机网络后(不了解也行)，你应该也必须知道OSI七层网络模型和TCP&#x2F;IP五层模型。在大学时候，老师们都会叫我们背这些东西，苦不堪言。最后也还是会忘掉，我们应该是学会理解它们之间的关系，而不用记住。</p>\n<p>首先粘出图片<br><img src=\"https://gcore.jsdelivr.net/gh/chauity/images/blog/pictures/20221112111602.png\" alt=\"20221112111602\"></p>\n<p>这就是他们对应的关系，<code>OSI模型</code>分的太细，不是我们要考虑的东西，只用知道上三层对应 <code>TCP/IP模型</code>的应用层，下两层对应 <code>TCP/IP模型</code>的网络接口层。作为Socket编程，我们处理的就是中间的传输层和网际层的东西。</p>\n<p>需要知道TCP、UDP在同一层（传输层）</p>\n<p>IP在（网际层）</p>\n<h3 id=\"TCP-Transmission-Control-Protocol-协议\"><a href=\"#TCP-Transmission-Control-Protocol-协议\" class=\"headerlink\" title=\"TCP(Transmission Control Protocol)协议\"></a>TCP(Transmission Control Protocol)协议</h3><p>对于初学者就需要知道它是可靠的、面向连接的协议就行了。连接需要三次握手、断开需要四次挥手。</p>\n<p>建立连接 &#x3D;&gt; 三次握手：</p>\n<p>三次握手就好比，</p>\n<p>面试官邀请你去面试的场景：</p>\n<p>第一次：（面试官）：您好，您的简历挺不错，明天来面试吗？</p>\n<p>第二次：（你）：好的，明天我有时间，明天能来。</p>\n<p>第三次：（面试官）：那好你就明天来面试吧。</p>\n<p>这是三次握手的图解：</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/chauity/images/blog/pictures/20221112113033.png\" alt=\"20221112113033\"></p>\n<p>如上图，TCP是双向连接的分为客户端和服务器。就像我们平时使用 <code>Chrome浏览器</code>，它就是一个客户端，服务器是各个网站自己家的，我们就不知道了。</p>\n<p>第一次:客户端发送SYN报文，请求同步，并发送序列号Seq为 X。</p>\n<pre><code>SYN是单词`synchronize`的简写，意为 同步 。就是请求同步的意思。\n\nSeq就是一个序列号。也是单词简写`sequence`。\n</code></pre>\n<p>第二次：服务器收到客户端的SYN报文后，确认要同步。就向客户端发送SYN报文，这个报文和客户端发来的一样，顺带一个ACK报文，ACK报文号是客户端发来的Seq序列号+1，同时附带自己的Seq序列号。</p>\n<pre><code>ACK是单词`acknowledge`的缩写，意为 确认 。即收到同步请求，确认同步。\n</code></pre>\n<p>第三次：客户端再次发送ACK确认报文，报文号是服务端第二次握手发来的Seq序列号+1，并发送序列号。</p>\n<pre><code>每次都要发送序列号，就是确保连接是正确的，因此TCP是面向连接的，可靠的协议。\n问：那为什么不四次握手建立连接呢？\n答：其实也可以四次握手建立连接，只是会浪费带宽。而三次握手是必要的。\n</code></pre>\n<p>断开连接 &#x3D;&gt; 四次挥手：</p>\n<p>四次挥手就好比，</p>\n<p>你拒绝去面试的场景：</p>\n<p>第一次：（你）：您好，我明天有约了，就不能来面试了。</p>\n<p>第二次：（面试官）：好的，这边收到您不来面试了？</p>\n<p>第三次：（面试官）：您这边明天确定不来了吗？</p>\n<p>第四次：（你）：是的，我不来了。</p>\n<p>emmm~~  现实中面试官肯定不会第三次，还问你是不是不去。但这是计算机断开连接需要的处理。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/chauity/images/blog/pictures/20221112112859.png\" alt=\"20221112112859\"></p>\n<p>四次挥手：如上图所示</p>\n<p>第一次：客户端要求断开本次连接。向服务器发送 FIN 报文，并携带序列号Seq。</p>\n<p>第二次：服务器确认断开连接，发送 ACK 报文，序列号是第一次挥手时序列号+1。</p>\n<p>第三次：服务器向客户端发送断开 FIN 报文，并携带序列号。</p>\n<p>第四次：客户端确认断开连接，发送 ACK 报文，序列号是第三次挥手时序列号+1。</p>\n<pre><code>就是一来一回的发送报文，以确定真的要断开连接。\n</code></pre>\n<h3 id=\"UDP-User-Datagram-Protocol-协议\"><a href=\"#UDP-User-Datagram-Protocol-协议\" class=\"headerlink\" title=\"UDP(User Datagram Protocol) 协议\"></a>UDP(User Datagram Protocol) 协议</h3><p>UDP就不像TCP那样要确认后在发包，它是只管发包,不管你收没收到。这样做的优点就是传输速度快，无情的发包机器。</p>\n<p>学习UDP要了解其报文构成</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/chauity/images/blog/pictures/20221112142029.png\" alt=\"20221112142029\"></p>\n<p>如上图，UDP由首部字段和数据字段组成。</p>\n<p>首部字段分为<code>源端口号</code>、<code>目的端口号</code>、<code>长度</code>以及<code>校验码</code>都是2个字节（16比特）。</p>\n<p><code>源端口号</code>和<code>目的端口号</code>很好理解就是发送方和接收方的端口号。</p>\n<p><code>长度</code>就是UDP数据报的长度。</p>\n<p>校验和的作用是检验发送是否出错，出错就丢弃。</p>\n<h3 id=\"IP协议\"><a href=\"#IP协议\" class=\"headerlink\" title=\"IP协议\"></a>IP协议</h3><p>所谓IP就是一段数字，大家肯定都知道。比如<a href=\"http://www.baidu.com,这是百度的网址,也可以叫做url(统一资源定位符),你叫它域名也是一样的.dns(domain/\">www.baidu.com,这是百度的网址，也可以叫做URL（统一资源定位符），你叫它域名也是一样的。DNS（Domain</a> Name System），即是域名系统。在网上搜索<code>域名解析查询</code>。输入百度网站的域名，就能解析出一个形如<code>14.215.177.38</code>的数字。这就是IP。</p>\n<p>其中的每一个数字实际上是一个8个的二进制组成的数字，计算机用1比特来存其中的一个数字，总共需要32比特，也就是4个字节数。这也是ip的大小。</p>\n<h2 id=\"Socket\"><a href=\"#Socket\" class=\"headerlink\" title=\"Socket\"></a>Socket</h2><h3 id=\"socket编程的概念\"><a href=\"#socket编程的概念\" class=\"headerlink\" title=\"socket编程的概念\"></a>socket编程的概念</h3><p><code>socket</code>就是插座(中文翻译套接字)，运行在计算机中的两个程序通过 <code>socket</code><br>建立一个通道，数据在通道中运输。</p>\n<p><code>socket</code>把复杂的TCP&#x2F;IP协议族隐藏了起来，对程序员来说，只要用好 socket相关的函数，就可以完成网络通信。</p>\n<h3 id=\"socket的分类\"><a href=\"#socket的分类\" class=\"headerlink\" title=\"socket的分类\"></a>socket的分类</h3><p><code>socket</code>提供了流（stream）和数据报（datagram）两种通信机制，即 <code>流socket</code>和 <code>数据报socket</code>。</p>\n<p><code>流socket</code>基于 <code>TCP协议</code>，是一个有序、可靠、双向字节流的通道，传输数据数据不会丢失、不会重复、顺序也不会错乱。</p>\n<p><code>数据报socket</code>基于UDP协议，不需要建立和维持连接，可能会丢失或错乱。UDP不是一个可靠的协议，对数据的长度有限制，但是它的效率比较高。</p>\n<p>某些应用层协议，处于历史原因，受当时技术和网络条件限制，选择了基于UDP是实现，其选择的理由很可能现在已经不成立了。</p>\n<p>实时的音视频聊天可能采用的是 <code>UDP</code>，这种业务可以接受数据的丢失且不必重传。</p>\n<p>本专题只介绍 <code>流socket</code>,<code>数据包socket</code>的应用场景实在太少，以后可能更少。</p>\n<h3 id=\"客户端-服务端模式\"><a href=\"#客户端-服务端模式\" class=\"headerlink\" title=\"客户端&#x2F;服务端模式\"></a>客户端&#x2F;服务端模式</h3><p>在 <code>TCP/IP</code>网络应用中，两个程序之间通信模式是客户端&#x2F;服务端模式（client&#x2F;server）。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/chauity/images/blog/pictrues/20191225154007754.png\" alt=\"img\"></p>\n<h3 id=\"CPP-网络编程的示例代码\"><a href=\"#CPP-网络编程的示例代码\" class=\"headerlink\" title=\"CPP 网络编程的示例代码\"></a>CPP 网络编程的示例代码</h3><p>相关函数</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">\n <span class=\"token comment\">//服务端</span>\n<span class=\"token function\">socket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 或 <span class=\"token function\">recv</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 等\n<span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 或 <span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 等\n<span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">//客户端</span>\n<span class=\"token function\">socket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 或 <span class=\"token function\">recv</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 等\n<span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 或 <span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 等\n<span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>TCP Stream Socket</code> 代码：</p>\n<p>服务器代码：</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;WinSock2.h></span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\"><span class=\"token function\">comment</span><span class=\"token punctuation\">(</span>lib<span class=\"token punctuation\">,</span> </span><span class=\"token string\">\"ws2_32.lib\"</span><span class=\"token expression\"><span class=\"token punctuation\">)</span></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n\t<span class=\"token comment\">// 1.初始化套接字库</span>\n\tWORD wVersion<span class=\"token punctuation\">;</span>\n\tWSADATA wsaData<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> err<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// 设置版本，可以理解为1.1</span>\n\twVersion <span class=\"token operator\">=</span> <span class=\"token function\">MAKEWORD</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 例：MAKEWORD(a, b) --> b | a &lt;&lt; 8 将a左移8位变成高位与b合并起来</span>\n\n\t<span class=\"token comment\">// 启动</span>\n\terr <span class=\"token operator\">=</span> <span class=\"token function\">WSAStartup</span><span class=\"token punctuation\">(</span>wVersion<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>wsaData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> err<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// 检查：网络低位不等于1 || 网络高位不等于1</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">LOBYTE</span><span class=\"token punctuation\">(</span>wsaData<span class=\"token punctuation\">.</span>wVersion<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span> <span class=\"token function\">HIBYTE</span><span class=\"token punctuation\">(</span>wsaData<span class=\"token punctuation\">.</span>wVersion<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// 清理套接字库</span>\n\t\t<span class=\"token function\">WSACleanup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">// 2.创建tcp套接字\t\t// AF_INET:ipv4   AF_INET6:ipv6</span>\n\tSOCKET sockSrv <span class=\"token operator\">=</span> <span class=\"token function\">socket</span><span class=\"token punctuation\">(</span>AF_INET<span class=\"token punctuation\">,</span> SOCK_STREAM<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// 准备绑定信息</span>\n\tSOCKADDR_IN addrSrv<span class=\"token punctuation\">;</span>\n\taddrSrv<span class=\"token punctuation\">.</span>sin_addr<span class=\"token punctuation\">.</span>S_un<span class=\"token punctuation\">.</span>S_addr <span class=\"token operator\">=</span> <span class=\"token function\">htonl</span><span class=\"token punctuation\">(</span>INADDR_ANY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 设置绑定网卡</span>\n\taddrSrv<span class=\"token punctuation\">.</span>sin_family <span class=\"token operator\">=</span> AF_INET<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 设置绑定网络模式</span>\n\taddrSrv<span class=\"token punctuation\">.</span>sin_port <span class=\"token operator\">=</span> <span class=\"token function\">htons</span><span class=\"token punctuation\">(</span><span class=\"token number\">6000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 设置绑定端口</span>\n\t<span class=\"token comment\">// hton: host to network  x86:小端    网络传输：htons大端</span>\n\n\t<span class=\"token comment\">// 3.绑定到本机</span>\n\t<span class=\"token keyword\">int</span> retVal <span class=\"token operator\">=</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>sockSrv<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>SOCKADDR <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>addrSrv<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>SOCKADDR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>retVal <span class=\"token operator\">==</span> SOCKET_ERROR<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed bind:%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">WSAGetLastError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">// 4.监听，同时能接收10个链接</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>sockSrv<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> SOCKET_ERROR<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Listen failed:%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">WSAGetLastError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Server start at port: 6000\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n\n\tSOCKADDR_IN addrCli<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>SOCKADDR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">char</span> recvBuf<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> sendBuf<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// 5.接收连接请求，返回针对客户端的套接字</span>\n\t\tSOCKET sockConn <span class=\"token operator\">=</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>sockSrv<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>SOCKADDR <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>addrCli<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sockConn <span class=\"token operator\">==</span> SOCKET_ERROR<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token comment\">//printf(\"Accept failed:%d\", WSAGetLastError());</span>\n\t\t\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Accept failed: \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">WSAGetLastError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\n\t\t<span class=\"token comment\">//printf(\"Accept client IP:[%s]\\n\", inet_ntoa(addrCli.sin_addr));</span>\n\t\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Accept client IP: \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">inet_ntoa</span><span class=\"token punctuation\">(</span>addrCli<span class=\"token punctuation\">.</span>sin_addr<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">// 6.发送数据</span>\n\t\t<span class=\"token function\">sprintf_s</span><span class=\"token punctuation\">(</span>sendBuf<span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello client!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> iSend <span class=\"token operator\">=</span> <span class=\"token function\">send</span><span class=\"token punctuation\">(</span>sockConn<span class=\"token punctuation\">,</span> sendBuf<span class=\"token punctuation\">,</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>sendBuf<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>iSend <span class=\"token operator\">==</span> SOCKET_ERROR<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"send failed!\\n\"</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\n\t\t<span class=\"token comment\">// 7.接收数据</span>\n\t\t<span class=\"token function\">recv</span><span class=\"token punctuation\">(</span>sockConn<span class=\"token punctuation\">,</span> recvBuf<span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> recvBuf <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">// 关闭套接字</span>\n\t\t<span class=\"token function\">closesocket</span><span class=\"token punctuation\">(</span>sockConn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">// 8.关闭套接字</span>\n\t<span class=\"token function\">closesocket</span><span class=\"token punctuation\">(</span>sockSrv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// 9.清理套接字库</span>\n\t<span class=\"token function\">WSACleanup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>    <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>客户端代码：</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;WinSock2.h></span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\"><span class=\"token function\">comment</span><span class=\"token punctuation\">(</span>lib<span class=\"token punctuation\">,</span> </span><span class=\"token string\">\"ws2_32.lib\"</span><span class=\"token expression\"><span class=\"token punctuation\">)</span></span></span>\n\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n\t<span class=\"token comment\">// 1.初始化套接字库</span>\n\tWORD wVersion<span class=\"token punctuation\">;</span>\n\tWSADATA wsaData<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> err<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// 可以理解为1.1</span>\n\twVersion <span class=\"token operator\">=</span> <span class=\"token function\">MAKEWORD</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 例：MAKEWORD(a, b) --> b | a &lt;&lt; 8 将a左移8位变成高位与b合并起来</span>\n\n\t<span class=\"token comment\">// 启动</span>\n\terr <span class=\"token operator\">=</span> <span class=\"token function\">WSAStartup</span><span class=\"token punctuation\">(</span>wVersion<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>wsaData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> err<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// 检查：网络地位不等于1 || 网络高位不等于1</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">LOBYTE</span><span class=\"token punctuation\">(</span>wsaData<span class=\"token punctuation\">.</span>wVersion<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span> <span class=\"token function\">HIBYTE</span><span class=\"token punctuation\">(</span>wsaData<span class=\"token punctuation\">.</span>wVersion<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// 清理套接字库</span>\n\t\t<span class=\"token function\">WSACleanup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">// 创建TCP套接字</span>\n\tSOCKET sockCli <span class=\"token operator\">=</span> <span class=\"token function\">socket</span><span class=\"token punctuation\">(</span>AF_INET<span class=\"token punctuation\">,</span> SOCK_STREAM<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tSOCKADDR_IN addrSrv<span class=\"token punctuation\">;</span>\n\taddrSrv<span class=\"token punctuation\">.</span>sin_addr<span class=\"token punctuation\">.</span>S_un<span class=\"token punctuation\">.</span>S_addr <span class=\"token operator\">=</span> <span class=\"token function\">inet_addr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 服务器地址</span>\n\taddrSrv<span class=\"token punctuation\">.</span>sin_port <span class=\"token operator\">=</span> <span class=\"token function\">htons</span><span class=\"token punctuation\">(</span><span class=\"token number\">6000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 端口号</span>\n\taddrSrv<span class=\"token punctuation\">.</span>sin_family <span class=\"token operator\">=</span> AF_INET<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 地址类型(ipv4)</span>\n\n\t<span class=\"token comment\">// 2.连接服务器</span>\n\t<span class=\"token keyword\">int</span> err_log <span class=\"token operator\">=</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>sockCli<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>SOCKADDR <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>addrSrv<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>SOCKADDR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err_log <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"连接服务器成功！\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"连接服务器失败！\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token keyword\">char</span> recvBuf<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> sendBuf<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"你好，服务器，我是客户端！\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 3.发送数据到服务器</span>\n\t<span class=\"token function\">send</span><span class=\"token punctuation\">(</span>sockCli<span class=\"token punctuation\">,</span> sendBuf<span class=\"token punctuation\">,</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>sendBuf<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// 4.接收服务器的数据</span>\n\t<span class=\"token function\">recv</span><span class=\"token punctuation\">(</span>sockCli<span class=\"token punctuation\">,</span> recvBuf<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>recvBuf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> recvBuf <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n\n\n\t<span class=\"token comment\">// 5.关闭套接字并清除套接字库</span>\n\t<span class=\"token function\">closesocket</span><span class=\"token punctuation\">(</span>sockCli<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">WSACleanup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"C-套接字网络编程\"><a href=\"#C-套接字网络编程\" class=\"headerlink\" title=\"C++套接字网络编程\"></a>C++套接字网络编程</h1><h2 id=\"OSI、TCP-IP-架构\"><a href=\"#OSI、TCP-IP-架构\" class=\"headerlink\" title=\"OSI、TCP&#x2F;IP 架构\"></a>OSI、TCP&#x2F;IP 架构</h2><p>了解计算机网络后(不了解也行)，你应该也必须知道OSI七层网络模型和TCP&#x2F;IP五层模型。在大学时候，老师们都会叫我们背这些东西，苦不堪言。最后也还是会忘掉，我们应该是学会理解它们之间的关系，而不用记住。</p>\n<p>首先粘出图片<br><img src=\"https://gcore.jsdelivr.net/gh/chauity/images/blog/pictures/20221112111602.png\" alt=\"20221112111602\"></p>\n<p>这就是他们对应的关系，<code>OSI模型</code>分的太细，不是我们要考虑的东西，只用知道上三层对应 <code>TCP/IP模型</code>的应用层，下两层对应 <code>TCP/IP模型</code>的网络接口层。作为Socket编程，我们处理的就是中间的传输层和网际层的东西。</p>\n<p>需要知道TCP、UDP在同一层（传输层）</p>\n<p>IP在（网际层）</p>\n<h3 id=\"TCP-Transmission-Control-Protocol-协议\"><a href=\"#TCP-Transmission-Control-Protocol-协议\" class=\"headerlink\" title=\"TCP(Transmission Control Protocol)协议\"></a>TCP(Transmission Control Protocol)协议</h3><p>对于初学者就需要知道它是可靠的、面向连接的协议就行了。连接需要三次握手、断开需要四次挥手。</p>\n<p>建立连接 &#x3D;&gt; 三次握手：</p>\n<p>三次握手就好比，</p>\n<p>面试官邀请你去面试的场景：</p>\n<p>第一次：（面试官）：您好，您的简历挺不错，明天来面试吗？</p>\n<p>第二次：（你）：好的，明天我有时间，明天能来。</p>\n<p>第三次：（面试官）：那好你就明天来面试吧。</p>\n<p>这是三次握手的图解：</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/chauity/images/blog/pictures/20221112113033.png\" alt=\"20221112113033\"></p>\n<p>如上图，TCP是双向连接的分为客户端和服务器。就像我们平时使用 <code>Chrome浏览器</code>，它就是一个客户端，服务器是各个网站自己家的，我们就不知道了。</p>\n<p>第一次:客户端发送SYN报文，请求同步，并发送序列号Seq为 X。</p>\n<pre><code>SYN是单词`synchronize`的简写，意为 同步 。就是请求同步的意思。\n\nSeq就是一个序列号。也是单词简写`sequence`。\n</code></pre>\n<p>第二次：服务器收到客户端的SYN报文后，确认要同步。就向客户端发送SYN报文，这个报文和客户端发来的一样，顺带一个ACK报文，ACK报文号是客户端发来的Seq序列号+1，同时附带自己的Seq序列号。</p>\n<pre><code>ACK是单词`acknowledge`的缩写，意为 确认 。即收到同步请求，确认同步。\n</code></pre>\n<p>第三次：客户端再次发送ACK确认报文，报文号是服务端第二次握手发来的Seq序列号+1，并发送序列号。</p>\n<pre><code>每次都要发送序列号，就是确保连接是正确的，因此TCP是面向连接的，可靠的协议。\n问：那为什么不四次握手建立连接呢？\n答：其实也可以四次握手建立连接，只是会浪费带宽。而三次握手是必要的。\n</code></pre>\n<p>断开连接 &#x3D;&gt; 四次挥手：</p>\n<p>四次挥手就好比，</p>\n<p>你拒绝去面试的场景：</p>\n<p>第一次：（你）：您好，我明天有约了，就不能来面试了。</p>\n<p>第二次：（面试官）：好的，这边收到您不来面试了？</p>\n<p>第三次：（面试官）：您这边明天确定不来了吗？</p>\n<p>第四次：（你）：是的，我不来了。</p>\n<p>emmm~~  现实中面试官肯定不会第三次，还问你是不是不去。但这是计算机断开连接需要的处理。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/chauity/images/blog/pictures/20221112112859.png\" alt=\"20221112112859\"></p>\n<p>四次挥手：如上图所示</p>\n<p>第一次：客户端要求断开本次连接。向服务器发送 FIN 报文，并携带序列号Seq。</p>\n<p>第二次：服务器确认断开连接，发送 ACK 报文，序列号是第一次挥手时序列号+1。</p>\n<p>第三次：服务器向客户端发送断开 FIN 报文，并携带序列号。</p>\n<p>第四次：客户端确认断开连接，发送 ACK 报文，序列号是第三次挥手时序列号+1。</p>\n<pre><code>就是一来一回的发送报文，以确定真的要断开连接。\n</code></pre>\n<h3 id=\"UDP-User-Datagram-Protocol-协议\"><a href=\"#UDP-User-Datagram-Protocol-协议\" class=\"headerlink\" title=\"UDP(User Datagram Protocol) 协议\"></a>UDP(User Datagram Protocol) 协议</h3><p>UDP就不像TCP那样要确认后在发包，它是只管发包,不管你收没收到。这样做的优点就是传输速度快，无情的发包机器。</p>\n<p>学习UDP要了解其报文构成</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/chauity/images/blog/pictures/20221112142029.png\" alt=\"20221112142029\"></p>\n<p>如上图，UDP由首部字段和数据字段组成。</p>\n<p>首部字段分为<code>源端口号</code>、<code>目的端口号</code>、<code>长度</code>以及<code>校验码</code>都是2个字节（16比特）。</p>\n<p><code>源端口号</code>和<code>目的端口号</code>很好理解就是发送方和接收方的端口号。</p>\n<p><code>长度</code>就是UDP数据报的长度。</p>\n<p>校验和的作用是检验发送是否出错，出错就丢弃。</p>\n<h3 id=\"IP协议\"><a href=\"#IP协议\" class=\"headerlink\" title=\"IP协议\"></a>IP协议</h3><p>所谓IP就是一段数字，大家肯定都知道。比如<a href=\"http://www.baidu.com,这是百度的网址,也可以叫做url(统一资源定位符),你叫它域名也是一样的.dns(domain/\">www.baidu.com,这是百度的网址，也可以叫做URL（统一资源定位符），你叫它域名也是一样的。DNS（Domain</a> Name System），即是域名系统。在网上搜索<code>域名解析查询</code>。输入百度网站的域名，就能解析出一个形如<code>14.215.177.38</code>的数字。这就是IP。</p>\n<p>其中的每一个数字实际上是一个8个的二进制组成的数字，计算机用1比特来存其中的一个数字，总共需要32比特，也就是4个字节数。这也是ip的大小。</p>\n<h2 id=\"Socket\"><a href=\"#Socket\" class=\"headerlink\" title=\"Socket\"></a>Socket</h2><h3 id=\"socket编程的概念\"><a href=\"#socket编程的概念\" class=\"headerlink\" title=\"socket编程的概念\"></a>socket编程的概念</h3><p><code>socket</code>就是插座(中文翻译套接字)，运行在计算机中的两个程序通过 <code>socket</code><br>建立一个通道，数据在通道中运输。</p>\n<p><code>socket</code>把复杂的TCP&#x2F;IP协议族隐藏了起来，对程序员来说，只要用好 socket相关的函数，就可以完成网络通信。</p>\n<h3 id=\"socket的分类\"><a href=\"#socket的分类\" class=\"headerlink\" title=\"socket的分类\"></a>socket的分类</h3><p><code>socket</code>提供了流（stream）和数据报（datagram）两种通信机制，即 <code>流socket</code>和 <code>数据报socket</code>。</p>\n<p><code>流socket</code>基于 <code>TCP协议</code>，是一个有序、可靠、双向字节流的通道，传输数据数据不会丢失、不会重复、顺序也不会错乱。</p>\n<p><code>数据报socket</code>基于UDP协议，不需要建立和维持连接，可能会丢失或错乱。UDP不是一个可靠的协议，对数据的长度有限制，但是它的效率比较高。</p>\n<p>某些应用层协议，处于历史原因，受当时技术和网络条件限制，选择了基于UDP是实现，其选择的理由很可能现在已经不成立了。</p>\n<p>实时的音视频聊天可能采用的是 <code>UDP</code>，这种业务可以接受数据的丢失且不必重传。</p>\n<p>本专题只介绍 <code>流socket</code>,<code>数据包socket</code>的应用场景实在太少，以后可能更少。</p>\n<h3 id=\"客户端-服务端模式\"><a href=\"#客户端-服务端模式\" class=\"headerlink\" title=\"客户端&#x2F;服务端模式\"></a>客户端&#x2F;服务端模式</h3><p>在 <code>TCP/IP</code>网络应用中，两个程序之间通信模式是客户端&#x2F;服务端模式（client&#x2F;server）。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/chauity/images/blog/pictrues/20191225154007754.png\" alt=\"img\"></p>\n<h3 id=\"CPP-网络编程的示例代码\"><a href=\"#CPP-网络编程的示例代码\" class=\"headerlink\" title=\"CPP 网络编程的示例代码\"></a>CPP 网络编程的示例代码</h3><p>相关函数</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">\n <span class=\"token comment\">//服务端</span>\n<span class=\"token function\">socket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 或 <span class=\"token function\">recv</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 等\n<span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 或 <span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 等\n<span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">//客户端</span>\n<span class=\"token function\">socket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 或 <span class=\"token function\">recv</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 等\n<span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 或 <span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 等\n<span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>TCP Stream Socket</code> 代码：</p>\n<p>服务器代码：</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;WinSock2.h></span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\"><span class=\"token function\">comment</span><span class=\"token punctuation\">(</span>lib<span class=\"token punctuation\">,</span> </span><span class=\"token string\">\"ws2_32.lib\"</span><span class=\"token expression\"><span class=\"token punctuation\">)</span></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n\t<span class=\"token comment\">// 1.初始化套接字库</span>\n\tWORD wVersion<span class=\"token punctuation\">;</span>\n\tWSADATA wsaData<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> err<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// 设置版本，可以理解为1.1</span>\n\twVersion <span class=\"token operator\">=</span> <span class=\"token function\">MAKEWORD</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 例：MAKEWORD(a, b) --> b | a &lt;&lt; 8 将a左移8位变成高位与b合并起来</span>\n\n\t<span class=\"token comment\">// 启动</span>\n\terr <span class=\"token operator\">=</span> <span class=\"token function\">WSAStartup</span><span class=\"token punctuation\">(</span>wVersion<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>wsaData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> err<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// 检查：网络低位不等于1 || 网络高位不等于1</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">LOBYTE</span><span class=\"token punctuation\">(</span>wsaData<span class=\"token punctuation\">.</span>wVersion<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span> <span class=\"token function\">HIBYTE</span><span class=\"token punctuation\">(</span>wsaData<span class=\"token punctuation\">.</span>wVersion<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// 清理套接字库</span>\n\t\t<span class=\"token function\">WSACleanup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">// 2.创建tcp套接字\t\t// AF_INET:ipv4   AF_INET6:ipv6</span>\n\tSOCKET sockSrv <span class=\"token operator\">=</span> <span class=\"token function\">socket</span><span class=\"token punctuation\">(</span>AF_INET<span class=\"token punctuation\">,</span> SOCK_STREAM<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// 准备绑定信息</span>\n\tSOCKADDR_IN addrSrv<span class=\"token punctuation\">;</span>\n\taddrSrv<span class=\"token punctuation\">.</span>sin_addr<span class=\"token punctuation\">.</span>S_un<span class=\"token punctuation\">.</span>S_addr <span class=\"token operator\">=</span> <span class=\"token function\">htonl</span><span class=\"token punctuation\">(</span>INADDR_ANY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 设置绑定网卡</span>\n\taddrSrv<span class=\"token punctuation\">.</span>sin_family <span class=\"token operator\">=</span> AF_INET<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 设置绑定网络模式</span>\n\taddrSrv<span class=\"token punctuation\">.</span>sin_port <span class=\"token operator\">=</span> <span class=\"token function\">htons</span><span class=\"token punctuation\">(</span><span class=\"token number\">6000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 设置绑定端口</span>\n\t<span class=\"token comment\">// hton: host to network  x86:小端    网络传输：htons大端</span>\n\n\t<span class=\"token comment\">// 3.绑定到本机</span>\n\t<span class=\"token keyword\">int</span> retVal <span class=\"token operator\">=</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>sockSrv<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>SOCKADDR <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>addrSrv<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>SOCKADDR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>retVal <span class=\"token operator\">==</span> SOCKET_ERROR<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed bind:%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">WSAGetLastError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">// 4.监听，同时能接收10个链接</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>sockSrv<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> SOCKET_ERROR<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Listen failed:%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">WSAGetLastError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Server start at port: 6000\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n\n\tSOCKADDR_IN addrCli<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>SOCKADDR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">char</span> recvBuf<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> sendBuf<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// 5.接收连接请求，返回针对客户端的套接字</span>\n\t\tSOCKET sockConn <span class=\"token operator\">=</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>sockSrv<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>SOCKADDR <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>addrCli<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sockConn <span class=\"token operator\">==</span> SOCKET_ERROR<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token comment\">//printf(\"Accept failed:%d\", WSAGetLastError());</span>\n\t\t\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Accept failed: \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">WSAGetLastError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\n\t\t<span class=\"token comment\">//printf(\"Accept client IP:[%s]\\n\", inet_ntoa(addrCli.sin_addr));</span>\n\t\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Accept client IP: \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">inet_ntoa</span><span class=\"token punctuation\">(</span>addrCli<span class=\"token punctuation\">.</span>sin_addr<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">// 6.发送数据</span>\n\t\t<span class=\"token function\">sprintf_s</span><span class=\"token punctuation\">(</span>sendBuf<span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello client!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> iSend <span class=\"token operator\">=</span> <span class=\"token function\">send</span><span class=\"token punctuation\">(</span>sockConn<span class=\"token punctuation\">,</span> sendBuf<span class=\"token punctuation\">,</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>sendBuf<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>iSend <span class=\"token operator\">==</span> SOCKET_ERROR<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"send failed!\\n\"</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\n\t\t<span class=\"token comment\">// 7.接收数据</span>\n\t\t<span class=\"token function\">recv</span><span class=\"token punctuation\">(</span>sockConn<span class=\"token punctuation\">,</span> recvBuf<span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> recvBuf <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">// 关闭套接字</span>\n\t\t<span class=\"token function\">closesocket</span><span class=\"token punctuation\">(</span>sockConn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">// 8.关闭套接字</span>\n\t<span class=\"token function\">closesocket</span><span class=\"token punctuation\">(</span>sockSrv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// 9.清理套接字库</span>\n\t<span class=\"token function\">WSACleanup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>    <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>客户端代码：</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;WinSock2.h></span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\"><span class=\"token function\">comment</span><span class=\"token punctuation\">(</span>lib<span class=\"token punctuation\">,</span> </span><span class=\"token string\">\"ws2_32.lib\"</span><span class=\"token expression\"><span class=\"token punctuation\">)</span></span></span>\n\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n\t<span class=\"token comment\">// 1.初始化套接字库</span>\n\tWORD wVersion<span class=\"token punctuation\">;</span>\n\tWSADATA wsaData<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> err<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// 可以理解为1.1</span>\n\twVersion <span class=\"token operator\">=</span> <span class=\"token function\">MAKEWORD</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 例：MAKEWORD(a, b) --> b | a &lt;&lt; 8 将a左移8位变成高位与b合并起来</span>\n\n\t<span class=\"token comment\">// 启动</span>\n\terr <span class=\"token operator\">=</span> <span class=\"token function\">WSAStartup</span><span class=\"token punctuation\">(</span>wVersion<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>wsaData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> err<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// 检查：网络地位不等于1 || 网络高位不等于1</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">LOBYTE</span><span class=\"token punctuation\">(</span>wsaData<span class=\"token punctuation\">.</span>wVersion<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span> <span class=\"token function\">HIBYTE</span><span class=\"token punctuation\">(</span>wsaData<span class=\"token punctuation\">.</span>wVersion<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// 清理套接字库</span>\n\t\t<span class=\"token function\">WSACleanup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">// 创建TCP套接字</span>\n\tSOCKET sockCli <span class=\"token operator\">=</span> <span class=\"token function\">socket</span><span class=\"token punctuation\">(</span>AF_INET<span class=\"token punctuation\">,</span> SOCK_STREAM<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tSOCKADDR_IN addrSrv<span class=\"token punctuation\">;</span>\n\taddrSrv<span class=\"token punctuation\">.</span>sin_addr<span class=\"token punctuation\">.</span>S_un<span class=\"token punctuation\">.</span>S_addr <span class=\"token operator\">=</span> <span class=\"token function\">inet_addr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 服务器地址</span>\n\taddrSrv<span class=\"token punctuation\">.</span>sin_port <span class=\"token operator\">=</span> <span class=\"token function\">htons</span><span class=\"token punctuation\">(</span><span class=\"token number\">6000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 端口号</span>\n\taddrSrv<span class=\"token punctuation\">.</span>sin_family <span class=\"token operator\">=</span> AF_INET<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 地址类型(ipv4)</span>\n\n\t<span class=\"token comment\">// 2.连接服务器</span>\n\t<span class=\"token keyword\">int</span> err_log <span class=\"token operator\">=</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>sockCli<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>SOCKADDR <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>addrSrv<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>SOCKADDR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err_log <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"连接服务器成功！\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"连接服务器失败！\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token keyword\">char</span> recvBuf<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> sendBuf<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"你好，服务器，我是客户端！\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 3.发送数据到服务器</span>\n\t<span class=\"token function\">send</span><span class=\"token punctuation\">(</span>sockCli<span class=\"token punctuation\">,</span> sendBuf<span class=\"token punctuation\">,</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>sendBuf<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// 4.接收服务器的数据</span>\n\t<span class=\"token function\">recv</span><span class=\"token punctuation\">(</span>sockCli<span class=\"token punctuation\">,</span> recvBuf<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>recvBuf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> recvBuf <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n\n\n\t<span class=\"token comment\">// 5.关闭套接字并清除套接字库</span>\n\t<span class=\"token function\">closesocket</span><span class=\"token punctuation\">(</span>sockCli<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">WSACleanup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n"},{"title":"封装的库函数函数","date":"2022-12-22T11:53:12.000Z","_content":"\n# 封装的一些库函数\n\n## 目标\n\n学习了B站大佬的 `http://www.freecplus.net/` 网站，自己动手封装了一些库函数\n\n头文件： _pub.h\n\n``` c\n#include <time.h>\n\n// 求绝对值的函数\nint ABS(const int i);\t\t\t\t\t//int求绝对值\nlong LABS(const long int i);\t//long求绝对值\n\n// char to int\nint CTOI(const char c);\t//字符转化为数字\n\n// pow\nunsigned long long POW(const unsigned long int x, const long int y);\t//求幂\n\n// nptr to int \nint ISSPACE(const char ch);\nint ATOI(const char* nptr);\t// 把字符串转化为int\nlong ATOL(const char* nptr);\t//把字符串转化为long\ndouble ATOD(const char* nptr);\n\n//字符串操作一系列函数\nint ISALPHA(int ch);\t//若ch是字母字符'a-z'或者'A-Z' 返回非0值，否则返回0\nint ISALNUM(int ch);\t//若ch是字母字符'a-z', 'A-Z' 或者数字字符'0-9' 返回非0值，否则返回0\nint ISDIGIT(int ch);\t//若ch是数字'0-9' 返回非0值，否则返回0\nint ISLOWER(int ch);\t//若ch是小写字母'a-z' 返回非0值，否则返回0\nint ISUPPER(int ch);\t//若ch是大写字母'A-Z' 返回非0值  否则返回0\nint TOLOWER(int ch);\t//若ch是大写字母'A-Z' 转化为对应小写字母 返回其ASCALL码\nint TOUPPER(int ch);\t//若ch是小写字母'a-z' 转化为对应大写字母 返回其ASCALL码\n\n//浮点数的一系列函数\ndouble FABS(const double x);\t// 求双精度实数x的绝对值\ndouble ROUND(const double x);\t// double四舍五入\ndouble CEIL(const double x);\t// double向上取整数\ndouble FLOOR(const double x);\t// double向下取整数\n//把双精度val分解成整数部分和小数部分，整数部分存放在ip所指的变量中，返回小数部分\ndouble MODF(double val,double *ip);\n\n/***字符串一系列函数***/\ntypedef unsigned long size_t;\nchar *MEMSET(char* str, size_t index, size_t size);\t//字符串置位函数\nsize_t STRLEN( const char*  str);          // 实现strlen函数的功能\nchar *STRCPY(char* dest, const char* src);  // 实现strcpy函数的功能，下同。\nchar *STRNCPY(char* dest, const char* src,size_t n);\nchar *STRCAT(char* dest, const char* src);\nchar *STRNCAT(char* dest, const char* src,size_t n);\nchar *STRCHR(const char *s, const int c);\nchar *STRRCHR(const char *s, const int c);\n// 字符串比较函数\nint STRCMP(const char *str1, const char *str2);\nint STRNCMP(const char *str1, const char * str2, const size_t n);\n// 判断字符串\nvoid ToUpper(char *str);\t//小写字母转大写 忽略其他字符\nvoid ToLower(char *str);\t//大写字母转小写 忽略其他字符\nint IsDigit(const char *str);\t//判断内容是否全是数字 1-是 0-不是\nint IsUpper(const char *str);\t//判断内容是否全是大写字母 1-是 0-不是\nint IsLower(const char *str);\t//判断字符是否全是小写字母 1-是 0-不是\nint IsASCLL(const char *str); //判断是否全是ASCLL字符 1-是 0-不是\n// KMP算法重写快速匹配 -- 暂时实现的是暴力破解BF算法\nchar* STRSTR(const char* str1, const char* str2);\n\n\n\n//********************************XML解析**************************************\nint GetXMLBuffer_Int(const char *in_XMLBuffer,const char *in_FieldName,int *out_Value);\nint GetXMLBuffer_Str(const char *in_XMLBuffer,const char *in_FieldName,char *out_Value);\nint GetXMLBuffer_Double(const char *in_XMLBuffer,const char *in_FieldName,double *out_Value);\n\n/*********************************时间转换**************************************/\nint TIMETOSTR(const time_t ti,char *strtime);\t\t\t//把整数的时间转换为字符串格式的时间\nint STRTOTIME(const char *strtime,time_t *ti);\t\t//把字符串格式的时间转换为整数的时间\nvoid LOCALTIME(char *out_stime,const char *in_fmt,const int in_interval);\t//获取操作系统的时间\n\n```\n\n源文件： _pub.c\n\n```c\n#include <stdio.h>\n#include \"_pub.h\"\n\n#ifndef NULL\n#define NULL ((void *)0)\n#endif\n\n\n// ABS\nint ABS(const int i)\n{\n\tint ret;\n\tif (i >= 0) \n\t\tret = i;\n\telse \n\t\tret = (-1) * i;\n\treturn ret;\n}\n\nlong LABS(const long int i)\n{\n\tlong ret;\n\tif (i >= 0)\n\t\tret = i;\n\telse\n\t\tret = (-1) * i;\n\treturn ret;\n}\n\n// char to int\nint CTOI(const char c)\n{\n\tif(c < 48 && c > 57)\n\t\treturn -1;\n\treturn c - 48;\n}\n\n// POW\nunsigned long long  POW(const unsigned long int x,const long int y)\n{\n\tlong result = 1, base = x, index = y;\n\twhile(index)\n\t{\n\t\tif(index % 2 == 1)\n\t\t\tresult *= base;\n\t\tbase *= base;\n\t\tindex /= 2;\n\t}\n\treturn result;\n}\n\n//判断是否有空格\nint ISSPACE(const char ch)\n{\n\tif(ch == ' ' || ch == '\\t' || ch == '\\n' || ch == '\\f' || ch == '\\v' || ch == '\\r')\n\t\treturn 1;\n\treturn 0;\n}\n\n\n/************* ATOI && ATOL*************************/\nint ATOI(const char *nptr)\t// string to int\n{\n\tchar sign;\n\tchar sign_1 = *nptr;\n\tint nValue = 0;\n\n\twhile(ISSPACE(*nptr))\n\t\tnptr++;\t\t//去空格\n\n\tsign = *nptr;\n\tif(!ISDIGIT(sign))\n\t\tnptr++;\n\n\twhile(ISDIGIT(*nptr))\n\t{\n\t\tnValue = 10 * nValue + (*nptr - '0');\n\t\tnptr++;\n\t}\n\n\treturn sign_1 == '-'? -nValue:nValue;\n}\n\nlong ATOL(const char * nptr)\t// string to long\n{\n\tchar sign;\n\tchar sign_1 = *nptr;\n\tlong nValue = 0;\n\n\twhile(ISSPACE(*nptr))\n\t\tnptr++;\t\t//去空格\n\n\tsign = *nptr;\n\tif(!ISDIGIT(sign))\n\t\tnptr++;\n\n\twhile(ISDIGIT(*nptr))\n\t{\n\t\tnValue = 10 * nValue + (*nptr - '0');\n\t\tnptr++;\n\t}\n\n\treturn sign_1 == '-'? -nValue:nValue;\n}\n\ndouble ATOD(const char* nptr)\n{\n\tchar sign;\n\tint point = 0;\n\tchar sign_1 = *nptr;\n\tint nValue = 0;\n\n\twhile(ISSPACE(*nptr))\n\t\tnptr++;\t\t//去空格\n\n\tsign = *nptr;\n\tif(!ISDIGIT(sign) && sign != '.')\n\t\tnptr++;\n\t\n\twhile(ISDIGIT(*nptr))\n\t{\n\t\tif(sign == '.')\n\t\t{\n\t\t\tnptr++;\n\t\t\tpoint++;\n\t\t\tnValue = POW(10,-point) * nValue + (*nptr -'0');\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnValue = 10 * nValue + (*nptr - '0');\n\t\t\tnptr++;\n\t\t}\n\t}\n\treturn sign_1 == '-'? -nValue:nValue;\t\n}\n\n/******************字符操作一些列函数****************/\nint ISALPHA(int ch)\n{\n\tif(ch >= 97 && ch <= 122)\n\t\treturn ch - 96;\n\telse if(ch >= 65 && ch <= 90)\n\t\treturn ch - 64;\n\treturn 0;\n}\n\nint ISALNUM(int ch)\n{\n\tif(ch >= 97 && ch <= 122)\n\t\treturn ch - 96;\n\telse if(ch >= 65 && ch <= 90)\n\t\treturn ch - 64;\n\tif(ch >= 48 && ch <= 57)\n\t\treturn ch - 47;\n\treturn 0;\n}\n\nint ISDIGIT(int ch)\n{\n\tif(ch >= 48 && ch <= 57)\n\t\treturn ch - 47;\n\treturn 0;\n}\n\nint ISLOWER(int ch)\n{\n\tif(ch >= 97 && ch <= 122)\n\t\treturn ch - 96;\n\treturn 0;\n}\n\nint ISUPPER(int ch)\n{\n\tif(ch >= 65 && ch <= 90)\n\t\treturn ch - 64;\n\treturn 0;\n}\n\nint TOLOWER(int ch)\n{\n\tif(ch >= 65 && ch <= 90)\n\t\treturn ch + 32;\n\treturn 0;\n}\n\nint TOUPPER(int ch)\n{\n\tif(ch >= 97 && ch <= 122)\n\t\treturn ch - 32;\n\treturn 0;\n}\n/***************** 浮点数一系列函数***************/\ndouble FABS(const double x)\t//求双精度实数x的绝对值\n{\n\tdouble a = x;\n\tif(x < 0)\n\t\ta *= (-1);\n\treturn a;\n}\ndouble ROUND(const double x)//double四舍五入\n{\n\tint a = x;\n\tdouble b = x - a;\n\tif(b > 0.5)\n\t\ta += 1;\n\treturn a;\n}\ndouble CEIL(const double x)\t//double向上取整数\n{\n\tint a = x;\n\ta += 1;\n\treturn a;\n}\ndouble FLOOR(const double x)\t// double向下取整数\n{\n\tint a = x;\n\treturn a;\n}\ndouble MODF(double val,double *ip)\n{\n\t// 把双精度val分解成整数部分和小数部分，整数部分存放在ip所指的变量中，返回小数部分\n\tint a = val;\n\tdouble d = val - a;\n\tdouble da = val - d;\n\t*ip = da;\n\treturn d;\n}\n\n/***************字符串一系列函数*********************/\nsize_t STRLEN(const char * str)\n{\n\tconst char * str1 = str;\n\tsize_t len = 0;\n\twhile(*str1 != '\\0')\n\t\tif(*str1 != '\\n')\n\t\t\tstr1++;\n\tlen = str1 - str;\n\treturn len;\n}\n//置位函数\nchar * MEMSET(char * str, size_t index, size_t size)\n{\n\tif(index < 0 || str == NULL)\n\t\treturn NULL;\t\t\n\twhile(size-- > 0)\n\t\t*str++ = index;\t\n\treturn str;\n}\n//修改字符串指针指向\nchar *STRCPY(char* dest, const char* src)\n{\n\tint i;\n\tfor(i = 0; i < STRLEN(src); i++)\n\t{\n\t\tdest[i] = src[i];\t\n\t}\n\treturn dest;\n}\nchar *STRNCPY (char* dest, const char* src,size_t n)\n{\n\tint i;\n\tfor(i = 0; i < n; i++)\n\t{\n\t\tdest[i] = src[i];\n\t}\n\treturn dest;\t\n}\n\n// 字符串拼接\nchar *STRCAT(char * dest, const char * src)\n{\n\tchar * str1 = dest;\n\tlong len = STRLEN(src);\n\tlong len_d = STRLEN(dest);\n\tint i;\n\tfor(i = 0; i < len; i++)\n\t{\n\t\tstr1[len_d] = src[i];\n\t\tlen_d++;\n\t}\n\treturn str1;\n}\n\nchar *STRNCAT (char* dest,const char* src, const size_t n)\n{\n\tchar * str1 = dest;\n\tlong len_d = STRLEN(dest);\n\tint i;\n\tfor(i = 0; i < n; i++)\n\t{\n\t\tstr1[len_d] = src[i];\n\t\tlen_d++;\n\t}\n\treturn str1;\n}\n\nchar *STRCHR(const char *s,const int c)\n{\n\t\n\tchar * sb = (char *) s;\n\tint len = STRLEN(s);\n\tint i = 0;\n\t\n\twhile(i < len)\n\t{\n\t\tif(*sb == c)\n\t\t\tbreak;\t\n\t\tsb++;\n\t\ti++;\n\t}\n\tif(i == len)\n\t\treturn \"(null)\";\n\treturn sb;\n}\n\nchar *STRRCHR(const char *s, const int c)\n{\n\tint len = STRLEN(s);\n\tchar * sb = (char *) (s+len-1);\n\tint i = 0;\n\t\n\twhile(i < len)\n\t{\n\t\tif(*sb == c)\n\t\t\tbreak;\n\t\tsb--;\n\t\ti++;\n\t}\n\n\tif(i == len)\n\t\treturn \"(null)\";\n\t\n\treturn sb;\n\t\n}\n\n//====================字符串比较函数=====================\nint STRCMP(const char *str1, const char *str2)\n{\n\tsize_t len = STRLEN(str1)>STRLEN(str2)?STRLEN(str1):STRLEN(str2);\n\twhile(len--)\n\t{\n\t\tif(*str1 != *str2)\n\t\t\treturn (*str1)-(*str2);\n\t\tstr1++;\n\t\tstr2++;\n\t}\n\treturn 0;\n}\nint STRNCMP(const char *str1, const char *str2, size_t n)\n{\n\twhile(n--)\n\t{\n\t\tif(*str1 != *str2)\n\t\t\treturn (*str1) - (*str2);\n\t\tstr1++;\n\t\tstr2++;\n\t}\n\treturn 0;\n}\n// 判断字符串\nvoid ToUpper(char *str)\t//小写字母转大写 忽略其他字符\n{\t\n\twhile(*str != '\\0')\n\t{\n\t\tif(*str >= 97 && *str <= 122)\n\t\t\t*str -= 32;\n\t\tstr++;\n\t}\n\t\t\n}\nvoid ToLower(char *str)\t//大写字母转小写 忽略其他字符\n{\n\tfor(str; *str != '\\0'; str++)\n\t\tif(*str >= 65 && *str <= 90)\n\t\t\t*str += 32;\n}\nint IsDigit(const char *str)\t//判断内容是否全是数字 1-是 0-不是\n{\n\tint flag = 0;\n\tfor(str; *str != '\\0'; str++)\n\t{\n\t\tif(*str >= 48 && *str <= 57)\n\t\t{\n\t\t\tflag = 1;\n\t\t\tcontinue;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tflag = 0;\n\t\t\tbreak;\n\t\t}\n\t}\t\n\treturn flag;\n}\nint IsUpper(const char *str)\t//判断内容是否全是大写字母 1-是 0-不是\n{\n\tint flag = 0;\n\tfor(str; *str != '\\0'; str++)\n\t{\n\t\tif(*str >= 65 && *str <= 90)\n\t\t{\n\t\t\tflag = 1;\n\t\t\tcontinue;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tflag = 0;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn flag;\n}\nint IsLower(const char *str)\t//判断字符是否全是小写字母 1-是 0-不是\n{\n\tint flag = 0;\n\tfor(str; *str != '\\0'; str++)\n\t{\n\t\tif(*str >= 97 && *str <= 122)\n\t\t{\n\t\t\tflag = 1;\n\t\t\tcontinue;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tflag = 0;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn flag;\n} \nint IsASCLL(const char *str) //判断是否全是ASCLL字符 1-是 0-不是\n{\n\tint flag = 0;\n\tfor(str; *str != '\\0'; str++)\n\t{\n\t\tif(*str >= 0 && *str <= 127)\n\t\t{\n\t\t\tflag = 1;\n\t\t\tcontinue;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tflag = 0;\n\t\t\tbreak; \n\t\t} \n\t}\t\n\treturn flag;\n}\n// 暴力算法 -- BF\nchar* STRSTR(const char* str1, const char* str2)\n{\n\t\tchar* s1 = (char*) str1;\n\t\tchar* s2 = (char*) str2;\n\t\tchar* current = (char*) str1;\n\n\t\twhile(*current)\n\t\t{\n\t\t\ts1 = current;\n\t\t\ts2 = (char*)str2;\n\n\t\t\twhile((*s1 != '\\0') && (*s2 != '\\0') && (*s1 == *s2))\n\t\t\t{\n\t\t\t\ts1++;\ts2++;\n\t\t\t}\n\n\t\t\tif(*s2 == '\\0')\n\t\t\t\treturn current;\n\n\t\t\tif(*s1 == '\\0')\n\t\t\t\treturn NULL;\n\t\t\tcurrent++;\n\t\t}\n\t\treturn NULL;\t\n}\n\n/*****************XML  解析*************************/\nint GetXMLBuffer_Str(const char* in_XMLBuffer, const char* in_FieldName, char* out_Value)\n{\n\tif(out_Value == 0) return 0;\t// 要存的地址不存在，即out_Value指针是空指针\n\tchar* start = 0;\n\tchar* end = 0;\n\tchar startStr[50];\n\tchar endStr[50];\n\t\n\tint len_Field = STRLEN(in_FieldName);\n\tMEMSET(startStr, 0, sizeof(startStr));\n\tMEMSET(endStr\t , 0, sizeof(endStr));\n\tSTRCPY(startStr, \"<\");\n\tSTRCAT(startStr, in_FieldName);\n\tSTRCAT(startStr, \">\");\n\tSTRCPY(endStr, \"</\");\n\tSTRCAT(endStr, in_FieldName);\n\tSTRCAT(endStr, \">\");\n\n\tMEMSET(start, 0, sizeof(start));\n\tMEMSET(end, 0, sizeof(end));\n\tstart = (char*)STRSTR(in_XMLBuffer, startStr);\n\tif(start != 0)\n\t\tend\t= (char*)STRSTR(in_XMLBuffer, endStr);\n\n\tif((start == 0) || (end == 0))\n\t\treturn 0;\t\t//未找到匹配字符串\n\tint length_Str = STRLEN(start) - STRLEN(end) - 2 - len_Field;\n\tSTRNCPY(out_Value, start+2+len_Field, length_Str);\n\n\treturn 1;\n}\n\nint GetXMLBuffer_Int(const char *in_XMLBuffer,const char *in_FieldName,int *out_Value)\n{\n\tGetXMLBuffer_Str(in_XMLBuffer, in_FieldName, (char*) out_Value);\n\t\n\t*out_Value = ATOI((const char*)out_Value);\n\t\n\treturn 1;\n}\n\nint GetXMLBuffer_Double(const char *in_XMLBuffer,const char *in_FieldName,double *out_Value)\n{\n\tGetXMLBuffer_Str(in_XMLBuffer, in_FieldName, (char*) out_Value);\n\t\n\t*out_Value = ATOD((const char*)out_Value);\n\n\treturn 1;\n}\n\n/*********************************时间函数***************************************/\n/**\n * 把整数的时间转换为字符串格式的时间，\n * 格式如：\"2019-02-08 12:05:08\"，\n * 如果转换成功函数返回1，失败返回0\n * */\nint TIMETOSTR(const time_t ti,char *strtime)\n{\n\tstruct tm* ptimer;\t//C内置时间结构体\n\tptimer = localtime(&ti);\n\t\n\tMEMSET(strtime, 0, sizeof(strtime));\n\n\tsprintf(strtime,\"%d-%d-%d %d:%d:%d\", \\\n\t\t\t\t\t\t\tptimer->tm_year+1900, \\\n\t\t\t\t\t\t\tptimer->tm_mon+1, \\\n\t\t\t\t\t\t\tptimer->tm_mday, \\\n\t\t\t\t\t\t\tptimer->tm_hour, \\\n\t\t\t\t\t\t\tptimer->tm_min, \\\n\t\t\t\t\t\t\tptimer->tm_sec );\n\treturn 1;\n}\n\n/**\n * 字符串格式的时间转换为整数的时间\n * 写的很烂\n * */\nint STRTOTIME(const char *strtime,time_t *ti)\n{\n\tchar* str = (char*) strtime;\n\tchar syear[10], smon[3], sday[3], shour[3], smin[3], ssec[3];\n\n\tMEMSET(syear, 0, sizeof(syear));\n\tMEMSET(smon, 0, sizeof(smon));\n\tMEMSET(sday, 0, sizeof(sday));\n\tMEMSET(shour, 0, sizeof(shour));\n\tMEMSET(smin, 0, sizeof(smin));\n\tMEMSET(ssec, 0, sizeof(ssec));\n\t\n\tsize_t len, index = 0;\n\tlen = STRLEN(strtime);\n\tint i,j;\n\t\n\tfor(i = index,j = 0; i < len; i++, j++)\n\t{\t\n\t\tsyear[j] = strtime[i];\n\t\tif(strtime[i] == '-')\n\t\t{\n\t\t\tsyear[j] = '\\0';\n\t\t  index = i+1;\n\t\t\tbreak;\n\t\t}\n  }\n\n\tfor(i = index,j = 0; i < len; i++, j++)\n\t{\t\n\t\tsmon[j] = strtime[i];\n\t\tif(strtime[i] == '-')\n\t\t{\n\t\t\tsmon[j] = '\\0';\n\t\t  index = i+1;\n\t\t\tbreak;\n\t\t}\n  }\n\n\tfor(i = index,j = 0; i < len; i++, j++)\n\t{\t\n\t\tsday[j] = strtime[i];\n\t\tif(strtime[i] == ' ')\n\t\t{\n\t\t\tsday[j] = '\\0';\n\t\t  index = i+1;\n\t\t\tbreak;\n\t\t}\n  }\n\n\tfor(i = index,j = 0; i < len; i++, j++)\n\t{\t\n\t\tshour[j] = strtime[i];\n\t\tif(strtime[i] == ':')\n\t\t{\n\t\t\tshour[j] = '\\0';\n\t\t  index = i+1;\n\t\t\tbreak;\n\t\t}\n  }\n\n\tfor(i = index,j = 0; i < len; i++, j++)\n\t{\t\n\t\tsmin[j] = strtime[i];\n\t\tif(strtime[i] == ':')\n\t\t{\n\t\t\tsmin[j] = '\\0';\n\t\t  index = i+1;\n\t\t\tbreak;\n\t\t}\n  }\n\n\tfor(i = index,j = 0; i < len; i++, j++)\n\t\tssec[j] = strtime[i];\n \t\n\n\tstruct tm timer;\n\tMEMSET((char*)&timer, 0, sizeof(timer));\n\ttimer.tm_year = ATOI(syear) - 1900;\n\ttimer.tm_mon = ATOI(smon) - 1;\n\ttimer.tm_mday = ATOI(sday);\n\ttimer.tm_hour = ATOI(shour);\n\ttimer.tm_min = ATOI(smin);\n\ttimer.tm_sec = ATOI(ssec);\t\n\t*ti = mktime(&timer);\n}\n\n/**\n *\n *  获取操作系统当前的时间\n *\n * */\nvoid LOCALTIME(char *out_stime,const char *in_fmt,const int in_interval)\n{\n\ttime_t timep;\n\t\n\tstruct tm* ptimer;\t//C内置时间结构体\n\ttimep = time(&timep) + 1000 * in_interval;\n\tptimer = localtime(&(timep));\n\n\tif(STRCMP(in_fmt, \"yyyy-mm-dd hh24:mi:ss\") == 0)\n\t\tsprintf(out_stime,\"%d-%d-%d %d:%d:%d\", \\\n\t\t\t\t\t\t\tptimer->tm_year+1900, \\\n\t\t\t\t\t\t\tptimer->tm_mon+1, \\\n\t\t\t\t\t\t\tptimer->tm_mday, \\\n\t\t\t\t\t\t\tptimer->tm_hour, \\\n\t\t\t\t\t\t\tptimer->tm_min, \\\n\t\t\t\t\t\t\tptimer->tm_sec );\n\telse if(STRCMP(in_fmt, \"yyyymmddhh24miss\") == 0)\n\t\tsprintf(out_stime,\"%d%d%d%d%d%d\", \\\n\t\t\t\t\t\t\tptimer->tm_year+1900, \\\n\t\t\t\t\t\t\tptimer->tm_mon+1, \\\n\t\t\t\t\t\t\tptimer->tm_mday, \\\n\t\t\t\t\t\t\tptimer->tm_hour, \\\n\t\t\t\t\t\t\tptimer->tm_min, \\\n\t\t\t\t\t\t\tptimer->tm_sec );\n\telse if(STRCMP(in_fmt, \"yyyy-mm-dd\") == 0)\n\t\tsprintf(out_stime,\"%d-%d-%d\", \\\n\t\t\t\t\t\t\tptimer->tm_year+1900, \\\n\t\t\t\t\t\t\tptimer->tm_mon+1, \\\n\t\t\t\t\t\t\tptimer->tm_mday );\n\t\n\telse if(STRCMP(in_fmt, \"yyyymmdd\") == 0)\n\t\tsprintf(out_stime,\"%d%d%d\", \\\n\t\t\t\t\t\t\tptimer->tm_year+1900, \\\n\t\t\t\t\t\t\tptimer->tm_mon+1, \\\n\t\t\t\t\t\t\tptimer->tm_mday );\n\t\n\telse if(STRCMP(in_fmt, \"hh24:mi:ss\") == 0)\n\t\tsprintf(out_stime,\"%d:%d:%d\", \\\n\t\t\t\t\t\t\tptimer->tm_hour, \\\n\t\t\t\t\t\t\tptimer->tm_min, \\\n\t\t\t\t\t\t\tptimer->tm_sec );\n\t\n\telse if(STRCMP(in_fmt, \"hh24miss\") == 0)\n\t\tsprintf(out_stime,\"%d%d%d\", \\\n\t\t\t\t\t\t\tptimer->tm_hour, \\\n\t\t\t\t\t\t\tptimer->tm_min, \\\n\t\t\t\t\t\t\tptimer->tm_sec );\n\t\n\telse if(STRCMP(in_fmt, \"hh24:mi\") == 0)\n\t\tsprintf(out_stime,\"%d:%d\", \\\n\t\t\t\t\t\t\tptimer->tm_hour, \\\n\t\t\t\t\t\t\tptimer->tm_min );\n\n\telse if(STRCMP(in_fmt, \"hh24\") == 0)\n\t\tsprintf(out_stime,\"%d\", \\\n\t\t\t\t\t\t\tptimer->tm_hour );\n\t\n\telse if(STRCMP(in_fmt, \"mi\") == 0)\n\t\tsprintf(out_stime,\"%d\", \n\t\t\t\t\t\t\tptimer->tm_sec );\n}\t\n\n```\n\n_pub : 封装的函数\n\n``` .\n1.\tABS, LABS -- 绝对值\n2.\tCTOI -- 字符转数字\n3.\tPOW -- 求幂值\n4.\tSTRLEN -- 求字符串长度  ××× 已删除合并到8\n5.\tATOI, ATOL -- 字符串转数字\n6.\tISALPHA, ISALNUM, ISDIGIT, ISLOWER, ISUPPER, TOLOWER, TOUPPER -- 字符操作的一系列函数\n7.\tFABS, ROUND, CEIL, FLOOR, MODF -- 浮点数一系列函数\n8.\tSTRLEN, STRCPY, STRNCPY, STRCAT, STRNCAT, STRCHR, STRRCHR -- 字符串一系列函数\n9.  STRCMP, STRNCMP -- 字符串比较函数\n10. ToUpper, ToLower, IsDigit, IsUpper, IsLower, IsASCLL -- 字符串判断函数\n11. STRSTR -- BF匹配子字符串\n12.\tGetXMLBuffer_Str, GetXMLBuffer_Int, GetXMLBuffer_Double\n13. 补充了修补了ATOI, ATOL, ATOD(不精确), ISSPACE 等函数\n14. TIMETOSTR, STRTOTIMR, LOCALTIME -- 时间操作函数\n```\n\n测试代码：test.c\n\n```c\n#include \"_pub.h\"\n#include <stdio.h>\n#include <string.h>\n#include <time.h>\n\nstruct st_girl\n{\n\tchar name[51];\n\tint age;\n\tint height;\n\tdouble weight;\n\tchar stature[31];\n\tchar facevalue[31];\n};\n\n\nint main()\n{\n#if 0\n\tlong int in,out;\n\tprintf(\"请输入要求值的数字\\n\");\n\tscanf(\"%ld\",&in);\n\tif(sizeof(in) <= sizeof(int))\n\t\tout = ABS(in);\n\telse\n\t\tout = LABS(in);\n\tprintf(\"out = %ld\\n\",out);\n#endif\n#if 0\t\n\tchar a;\n\tprintf(\"输入要转化的字符数字\\n\");\n\tscanf(\"%c\",&a);\n\tint bb = CTOI(a);\n\tprintf(\"out = %d\\n\",bb);\n#endif\n#if 0\n\tprintf(\"5^5 = %lld\\n\",POW(5,5));\n\tprintf(\"2^33 = %lld\\n\",POW(2,33));\n#endif\n#if 0\n\tchar aa[30];\n\tscanf(\"%s\",aa);\n\tprintf(\"len of aa = %d\\n\",STRLEN(aa));\n\t//printf(\"aa = %d\\n\",ATOI(aa));\n\tprintf(\"aa = %ld\\n\",ATOL(aa));\n#endif\n#if 0\n\tchar a = 'a',B = 'B';\n\tint c = '5',e = '6';\n\tchar d = '\\\\';\n\tprintf(\"%d %d %d %d %d %c %c\\n\",ISALPHA(a),ISDIGIT(c),ISDIGIT(e),ISUPPER(B),ISALNUM(d),TOLOWER(B),TOUPPER(a));\n#endif\n#if 0\n\tdouble i = -64.54864;\n\tdouble j = FABS(i);\n\tprintf(\"i=%.5lf,j=%.5lf\\n\", i,j);\n\tdouble k = 6.7,b = 3.3;\n\tprintf(\"%lf\\n\",ROUND(k));\n\tprintf(\"%lf\\n\",ROUND(b));\n\tprintf(\"%lf,%lf\\n\",CEIL(1.3),FLOOR(1.3));\n\tdouble z = 1.3;\n\tdouble *pz = &z; \n\tprintf(\"%lf\\n\",MODF(z,pz));\n\tprintf(\"%lf\\n\",*pz);\n#endif\n#if 0\n\tchar str[21];\n\tscanf(\"%s\",str);\n\tprintf(\"%lu\\n\",strlen1(str));\t\n\tchar str1[50],str2[30];\n\tmemset1(str1, 0, sizeof(str1));\n\tmemset1(str2, 0, sizeof(str2));\n\tstrcpy1(str1, \"10000\");\n\tprintf(\"str1=%s=\\n\", str1);\n\tstrcpy1(str2, \"1008611\");\n\tprintf(\"str2=%s=\\n\", str2);\n\tstrcpy1(str1, str2);\n\tprintf(\"str1=%s=\\n\",str1);\n\tprintf(\"----------------------\\n\");\n\tstrcpy(str1,str2);\n\tprintf(\"str1=%s=\\n\",str1);\n#endif\n#if 0\n\tchar A[30],B[10];\n  //置空很重要\n\tmemset1(A, 0,sizeof(A));\n\tmemset1(B, 0,sizeof(B));\n\tprintf(\"A=%s=,B=%s=\\n\",A,B);\n\tstrcpy1(A, \"Hello\");\n\tstrcpy1(B, \"World\");\n\tprintf(\"A=%s=,B=%s=\\n\",A,B);\n\tstrncpy1(A, \"你 好\",7);\n\tstrncpy1(B, \"世 界\",7);\n\tstrcat1(A,B);\n\tstrncat1(A, B, 7);\n\tprintf(\"A=%s=,B=%s=\\n\",A,B);\n#endif\n#if 0\n\tchar X[20];\n\tchar c = 'b';\n\tMEMSET(X, 0, sizeof(X));\n\tSTRCPY(X, \"ksdkkbdeefb\"); \n\tprintf(\"%s\\n\",STRCHR(X, '1'));\n\tprintf(\"-----------------\\n%s\\n\",STRCHR(X, '1'));\n\tprintf(\"%s\\n--------------------\", strrchr(X, 's'));\n\tprintf(\"\\n%s\\n\",STRRCHR(X, 's'));\n#endif\n#if 0\n\tchar str1[15],str2[10];\n\tMEMSET(str1, 0, sizeof(str1));\n\tMEMSET(str2, 0, sizeof(str2));\n\tSTRCPY(str1, \"ABCdd\");\n\tSTRCPY(str2, \"ABCddee\");\n\tprintf(\"str1?str2=.%d.\\n\",strcmp(str1, str2));\n\tprintf(\"str1?str2=.%d.\\n\",STRCMP(str1, str2));\n\tprintf(\"str1?str2=.%d.\\n\",STRNCMP(str1, str2, 2));\n\tprintf(\"str1?str2=.%d.\\n\",STRNCMP(str1, str2, 2));\n\tToUpper(str2);\n\tprintf(\"=%s=\\n\",str2);\n\tprintf(\"%d,%d,%d,%d\\n\", IsUpper(str2),IsDigit(str2),IsLower(str2),IsASCLL(str2));\n\tprintf(\"%d,\\n\",IsDigit(str2));\n\tprintf(\"==================\\n\");\n\tToLower(str2);\t\n\tprintf(\"%d,%d,%d,%d\\n\", IsUpper(str2),IsDigit(str2),IsLower(str2),IsASCLL(str2));\n\tprintf(\"%d\\n\",IsDigit(\"1123545998877445566332211\"));\n#endif\n#if 0\n\tprintf(\"%s\\n\",strstr(\"111222333\",\"222\"));\n\tprintf(\"%s\\n\",STRSTR(\"111222333\",\"222\"));\n\tprintf(\"%s\\n\",strstr(\"111222333\",\"333\"));\n\tprintf(\"%s\\n\",STRSTR(\"111222333\",\"333\"));\n\tprintf(\"%s\\n\",strstr(\"11122233e3\",\"eeee\"));\n\tprintf(\"%s\\n\",STRSTR(\"11122233e3\",\"eeee\"));\n#endif\n\n#if 0\n/*测试XML*/\nstruct st_girl beautygirl;\n\tstruct st_girl*  beauty = &beautygirl;\n\tstrcpy(beauty->name, \"西施\");\n\tbeauty->age = 18;\n\tbeauty->height = 168;\n\tbeauty->weight = 48.5;\n\tstrcpy(beauty->stature, \"火辣\");\n\tstrcpy(beauty->facevalue, \"漂亮\");\n\tchar str[255];\n\tmemset(str, 0, sizeof(str));\n\tsprintf(str,\"<name>%s</name>\"\t\t\t\t\t\t\t\\\n\t\t\t\t\t\t \t\"<age>%d</age>\"\t\t\t\t\t\t\t\t\\\n\t\t\t\t\t\t \t\"<height>%d</height>\"\t\t\t\t\t\\\n\t\t\t\t\t\t\t\"<weight>%lf</weight>\"\t\t\t\t\\\n\t\t\t\t\t\t\t\"<stature>%s</stature>\"\t\t\t\t\\\n\t\t\t\t\t\t\t\"<facevalue>%s</facevalue>\"\t,\t\n\t\t\t\t\t\t\t(*beauty).name, \n\t\t\t\t\t\t\t(*beauty).age, \n\t\t\t\t\t\t\t(*beauty).height, \n\t\t\t\t\t\t\t(*beauty).weight, \n\t\t\t\t\t\t\t(*beauty).stature, \n\t\t\t\t\t\t\t(*beauty).facevalue);\n\tchar str1[50];\n\tMEMSET(str1, 0, sizeof(str1));\n\tGetXMLBuffer_Str(str, \"name\", str1);\n\tprintf(\"=%s=\\n\", str1);\n\tMEMSET(str1, 0, sizeof(str1));\n\tGetXMLBuffer_Str(str, \"stature\", str1);\n\tprintf(\"=%s=\\n\", str1);\n\tMEMSET(str1, 0, sizeof(str1));\n\tGetXMLBuffer_Str(str, \"facevalue\", str1);\n\tprintf(\"=%s=\\n\", str1);\n\n\tprintf(\"%s\\n\", str);\n\tint age,height;\n\tdouble dd;\n\tGetXMLBuffer_Int(str, \"age\", &age);\n\tGetXMLBuffer_Int(str, \"height\", &height);\t\n\tGetXMLBuffer_Double(str, \"weight\", &dd);\t\n\tprintf(\"=age=%d,height=%d=,weight=%lf\\n\", age, height, dd);\n#endif\n\n#if 0\t\n\ttime_t t;\n\tchar str[120];\n\tMEMSET(str, 0, sizeof(str));\n\tt = time(NULL);\n\tprintf(\"%ld\\n\", t);\t\n\tTIMETOSTR(t, str);\n\tprintf(\"datetime=%s\\n\", str);\n\tSTRTOTIME(str,&t);\n\tprintf(\"t=%ld\\n\", t);\n\tchar str1[30];\n\tMEMSET(str1, 0, sizeof(str1));\n#endif\n\n\tchar out_time[30];\n\tMEMSET(out_time, 0, sizeof(out_time));\n\tLOCALTIME(out_time, \"yyyy-mm-dd hh24:mi:ss\", 0);\n\tprintf(\"out_time=%s\\n\", out_time);\n\tLOCALTIME(out_time, \"yyyymmddhh24miss\", 0);\n\tprintf(\"out_time=%s\\n\", out_time);\n\tLOCALTIME(out_time, \"yyyy-mm-dd\", 0);\n\tprintf(\"out_time=%s\\n\", out_time);\n\tLOCALTIME(out_time, \"yyyymmdd\", 0);\n\tprintf(\"out_time=%s\\n\", out_time);\n\tLOCALTIME(out_time, \"hh24:mi:ss\", 0);\n\tprintf(\"out_time=%s\\n\", out_time);\n\treturn 0;\n}\n```\n\n","source":"_posts/封装函数.md","raw":"---\ntitle: 封装的库函数函数\ndate: 2022-12-22 19:53:12\ntags:  C语言, 库函数\n---\n\n# 封装的一些库函数\n\n## 目标\n\n学习了B站大佬的 `http://www.freecplus.net/` 网站，自己动手封装了一些库函数\n\n头文件： _pub.h\n\n``` c\n#include <time.h>\n\n// 求绝对值的函数\nint ABS(const int i);\t\t\t\t\t//int求绝对值\nlong LABS(const long int i);\t//long求绝对值\n\n// char to int\nint CTOI(const char c);\t//字符转化为数字\n\n// pow\nunsigned long long POW(const unsigned long int x, const long int y);\t//求幂\n\n// nptr to int \nint ISSPACE(const char ch);\nint ATOI(const char* nptr);\t// 把字符串转化为int\nlong ATOL(const char* nptr);\t//把字符串转化为long\ndouble ATOD(const char* nptr);\n\n//字符串操作一系列函数\nint ISALPHA(int ch);\t//若ch是字母字符'a-z'或者'A-Z' 返回非0值，否则返回0\nint ISALNUM(int ch);\t//若ch是字母字符'a-z', 'A-Z' 或者数字字符'0-9' 返回非0值，否则返回0\nint ISDIGIT(int ch);\t//若ch是数字'0-9' 返回非0值，否则返回0\nint ISLOWER(int ch);\t//若ch是小写字母'a-z' 返回非0值，否则返回0\nint ISUPPER(int ch);\t//若ch是大写字母'A-Z' 返回非0值  否则返回0\nint TOLOWER(int ch);\t//若ch是大写字母'A-Z' 转化为对应小写字母 返回其ASCALL码\nint TOUPPER(int ch);\t//若ch是小写字母'a-z' 转化为对应大写字母 返回其ASCALL码\n\n//浮点数的一系列函数\ndouble FABS(const double x);\t// 求双精度实数x的绝对值\ndouble ROUND(const double x);\t// double四舍五入\ndouble CEIL(const double x);\t// double向上取整数\ndouble FLOOR(const double x);\t// double向下取整数\n//把双精度val分解成整数部分和小数部分，整数部分存放在ip所指的变量中，返回小数部分\ndouble MODF(double val,double *ip);\n\n/***字符串一系列函数***/\ntypedef unsigned long size_t;\nchar *MEMSET(char* str, size_t index, size_t size);\t//字符串置位函数\nsize_t STRLEN( const char*  str);          // 实现strlen函数的功能\nchar *STRCPY(char* dest, const char* src);  // 实现strcpy函数的功能，下同。\nchar *STRNCPY(char* dest, const char* src,size_t n);\nchar *STRCAT(char* dest, const char* src);\nchar *STRNCAT(char* dest, const char* src,size_t n);\nchar *STRCHR(const char *s, const int c);\nchar *STRRCHR(const char *s, const int c);\n// 字符串比较函数\nint STRCMP(const char *str1, const char *str2);\nint STRNCMP(const char *str1, const char * str2, const size_t n);\n// 判断字符串\nvoid ToUpper(char *str);\t//小写字母转大写 忽略其他字符\nvoid ToLower(char *str);\t//大写字母转小写 忽略其他字符\nint IsDigit(const char *str);\t//判断内容是否全是数字 1-是 0-不是\nint IsUpper(const char *str);\t//判断内容是否全是大写字母 1-是 0-不是\nint IsLower(const char *str);\t//判断字符是否全是小写字母 1-是 0-不是\nint IsASCLL(const char *str); //判断是否全是ASCLL字符 1-是 0-不是\n// KMP算法重写快速匹配 -- 暂时实现的是暴力破解BF算法\nchar* STRSTR(const char* str1, const char* str2);\n\n\n\n//********************************XML解析**************************************\nint GetXMLBuffer_Int(const char *in_XMLBuffer,const char *in_FieldName,int *out_Value);\nint GetXMLBuffer_Str(const char *in_XMLBuffer,const char *in_FieldName,char *out_Value);\nint GetXMLBuffer_Double(const char *in_XMLBuffer,const char *in_FieldName,double *out_Value);\n\n/*********************************时间转换**************************************/\nint TIMETOSTR(const time_t ti,char *strtime);\t\t\t//把整数的时间转换为字符串格式的时间\nint STRTOTIME(const char *strtime,time_t *ti);\t\t//把字符串格式的时间转换为整数的时间\nvoid LOCALTIME(char *out_stime,const char *in_fmt,const int in_interval);\t//获取操作系统的时间\n\n```\n\n源文件： _pub.c\n\n```c\n#include <stdio.h>\n#include \"_pub.h\"\n\n#ifndef NULL\n#define NULL ((void *)0)\n#endif\n\n\n// ABS\nint ABS(const int i)\n{\n\tint ret;\n\tif (i >= 0) \n\t\tret = i;\n\telse \n\t\tret = (-1) * i;\n\treturn ret;\n}\n\nlong LABS(const long int i)\n{\n\tlong ret;\n\tif (i >= 0)\n\t\tret = i;\n\telse\n\t\tret = (-1) * i;\n\treturn ret;\n}\n\n// char to int\nint CTOI(const char c)\n{\n\tif(c < 48 && c > 57)\n\t\treturn -1;\n\treturn c - 48;\n}\n\n// POW\nunsigned long long  POW(const unsigned long int x,const long int y)\n{\n\tlong result = 1, base = x, index = y;\n\twhile(index)\n\t{\n\t\tif(index % 2 == 1)\n\t\t\tresult *= base;\n\t\tbase *= base;\n\t\tindex /= 2;\n\t}\n\treturn result;\n}\n\n//判断是否有空格\nint ISSPACE(const char ch)\n{\n\tif(ch == ' ' || ch == '\\t' || ch == '\\n' || ch == '\\f' || ch == '\\v' || ch == '\\r')\n\t\treturn 1;\n\treturn 0;\n}\n\n\n/************* ATOI && ATOL*************************/\nint ATOI(const char *nptr)\t// string to int\n{\n\tchar sign;\n\tchar sign_1 = *nptr;\n\tint nValue = 0;\n\n\twhile(ISSPACE(*nptr))\n\t\tnptr++;\t\t//去空格\n\n\tsign = *nptr;\n\tif(!ISDIGIT(sign))\n\t\tnptr++;\n\n\twhile(ISDIGIT(*nptr))\n\t{\n\t\tnValue = 10 * nValue + (*nptr - '0');\n\t\tnptr++;\n\t}\n\n\treturn sign_1 == '-'? -nValue:nValue;\n}\n\nlong ATOL(const char * nptr)\t// string to long\n{\n\tchar sign;\n\tchar sign_1 = *nptr;\n\tlong nValue = 0;\n\n\twhile(ISSPACE(*nptr))\n\t\tnptr++;\t\t//去空格\n\n\tsign = *nptr;\n\tif(!ISDIGIT(sign))\n\t\tnptr++;\n\n\twhile(ISDIGIT(*nptr))\n\t{\n\t\tnValue = 10 * nValue + (*nptr - '0');\n\t\tnptr++;\n\t}\n\n\treturn sign_1 == '-'? -nValue:nValue;\n}\n\ndouble ATOD(const char* nptr)\n{\n\tchar sign;\n\tint point = 0;\n\tchar sign_1 = *nptr;\n\tint nValue = 0;\n\n\twhile(ISSPACE(*nptr))\n\t\tnptr++;\t\t//去空格\n\n\tsign = *nptr;\n\tif(!ISDIGIT(sign) && sign != '.')\n\t\tnptr++;\n\t\n\twhile(ISDIGIT(*nptr))\n\t{\n\t\tif(sign == '.')\n\t\t{\n\t\t\tnptr++;\n\t\t\tpoint++;\n\t\t\tnValue = POW(10,-point) * nValue + (*nptr -'0');\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnValue = 10 * nValue + (*nptr - '0');\n\t\t\tnptr++;\n\t\t}\n\t}\n\treturn sign_1 == '-'? -nValue:nValue;\t\n}\n\n/******************字符操作一些列函数****************/\nint ISALPHA(int ch)\n{\n\tif(ch >= 97 && ch <= 122)\n\t\treturn ch - 96;\n\telse if(ch >= 65 && ch <= 90)\n\t\treturn ch - 64;\n\treturn 0;\n}\n\nint ISALNUM(int ch)\n{\n\tif(ch >= 97 && ch <= 122)\n\t\treturn ch - 96;\n\telse if(ch >= 65 && ch <= 90)\n\t\treturn ch - 64;\n\tif(ch >= 48 && ch <= 57)\n\t\treturn ch - 47;\n\treturn 0;\n}\n\nint ISDIGIT(int ch)\n{\n\tif(ch >= 48 && ch <= 57)\n\t\treturn ch - 47;\n\treturn 0;\n}\n\nint ISLOWER(int ch)\n{\n\tif(ch >= 97 && ch <= 122)\n\t\treturn ch - 96;\n\treturn 0;\n}\n\nint ISUPPER(int ch)\n{\n\tif(ch >= 65 && ch <= 90)\n\t\treturn ch - 64;\n\treturn 0;\n}\n\nint TOLOWER(int ch)\n{\n\tif(ch >= 65 && ch <= 90)\n\t\treturn ch + 32;\n\treturn 0;\n}\n\nint TOUPPER(int ch)\n{\n\tif(ch >= 97 && ch <= 122)\n\t\treturn ch - 32;\n\treturn 0;\n}\n/***************** 浮点数一系列函数***************/\ndouble FABS(const double x)\t//求双精度实数x的绝对值\n{\n\tdouble a = x;\n\tif(x < 0)\n\t\ta *= (-1);\n\treturn a;\n}\ndouble ROUND(const double x)//double四舍五入\n{\n\tint a = x;\n\tdouble b = x - a;\n\tif(b > 0.5)\n\t\ta += 1;\n\treturn a;\n}\ndouble CEIL(const double x)\t//double向上取整数\n{\n\tint a = x;\n\ta += 1;\n\treturn a;\n}\ndouble FLOOR(const double x)\t// double向下取整数\n{\n\tint a = x;\n\treturn a;\n}\ndouble MODF(double val,double *ip)\n{\n\t// 把双精度val分解成整数部分和小数部分，整数部分存放在ip所指的变量中，返回小数部分\n\tint a = val;\n\tdouble d = val - a;\n\tdouble da = val - d;\n\t*ip = da;\n\treturn d;\n}\n\n/***************字符串一系列函数*********************/\nsize_t STRLEN(const char * str)\n{\n\tconst char * str1 = str;\n\tsize_t len = 0;\n\twhile(*str1 != '\\0')\n\t\tif(*str1 != '\\n')\n\t\t\tstr1++;\n\tlen = str1 - str;\n\treturn len;\n}\n//置位函数\nchar * MEMSET(char * str, size_t index, size_t size)\n{\n\tif(index < 0 || str == NULL)\n\t\treturn NULL;\t\t\n\twhile(size-- > 0)\n\t\t*str++ = index;\t\n\treturn str;\n}\n//修改字符串指针指向\nchar *STRCPY(char* dest, const char* src)\n{\n\tint i;\n\tfor(i = 0; i < STRLEN(src); i++)\n\t{\n\t\tdest[i] = src[i];\t\n\t}\n\treturn dest;\n}\nchar *STRNCPY (char* dest, const char* src,size_t n)\n{\n\tint i;\n\tfor(i = 0; i < n; i++)\n\t{\n\t\tdest[i] = src[i];\n\t}\n\treturn dest;\t\n}\n\n// 字符串拼接\nchar *STRCAT(char * dest, const char * src)\n{\n\tchar * str1 = dest;\n\tlong len = STRLEN(src);\n\tlong len_d = STRLEN(dest);\n\tint i;\n\tfor(i = 0; i < len; i++)\n\t{\n\t\tstr1[len_d] = src[i];\n\t\tlen_d++;\n\t}\n\treturn str1;\n}\n\nchar *STRNCAT (char* dest,const char* src, const size_t n)\n{\n\tchar * str1 = dest;\n\tlong len_d = STRLEN(dest);\n\tint i;\n\tfor(i = 0; i < n; i++)\n\t{\n\t\tstr1[len_d] = src[i];\n\t\tlen_d++;\n\t}\n\treturn str1;\n}\n\nchar *STRCHR(const char *s,const int c)\n{\n\t\n\tchar * sb = (char *) s;\n\tint len = STRLEN(s);\n\tint i = 0;\n\t\n\twhile(i < len)\n\t{\n\t\tif(*sb == c)\n\t\t\tbreak;\t\n\t\tsb++;\n\t\ti++;\n\t}\n\tif(i == len)\n\t\treturn \"(null)\";\n\treturn sb;\n}\n\nchar *STRRCHR(const char *s, const int c)\n{\n\tint len = STRLEN(s);\n\tchar * sb = (char *) (s+len-1);\n\tint i = 0;\n\t\n\twhile(i < len)\n\t{\n\t\tif(*sb == c)\n\t\t\tbreak;\n\t\tsb--;\n\t\ti++;\n\t}\n\n\tif(i == len)\n\t\treturn \"(null)\";\n\t\n\treturn sb;\n\t\n}\n\n//====================字符串比较函数=====================\nint STRCMP(const char *str1, const char *str2)\n{\n\tsize_t len = STRLEN(str1)>STRLEN(str2)?STRLEN(str1):STRLEN(str2);\n\twhile(len--)\n\t{\n\t\tif(*str1 != *str2)\n\t\t\treturn (*str1)-(*str2);\n\t\tstr1++;\n\t\tstr2++;\n\t}\n\treturn 0;\n}\nint STRNCMP(const char *str1, const char *str2, size_t n)\n{\n\twhile(n--)\n\t{\n\t\tif(*str1 != *str2)\n\t\t\treturn (*str1) - (*str2);\n\t\tstr1++;\n\t\tstr2++;\n\t}\n\treturn 0;\n}\n// 判断字符串\nvoid ToUpper(char *str)\t//小写字母转大写 忽略其他字符\n{\t\n\twhile(*str != '\\0')\n\t{\n\t\tif(*str >= 97 && *str <= 122)\n\t\t\t*str -= 32;\n\t\tstr++;\n\t}\n\t\t\n}\nvoid ToLower(char *str)\t//大写字母转小写 忽略其他字符\n{\n\tfor(str; *str != '\\0'; str++)\n\t\tif(*str >= 65 && *str <= 90)\n\t\t\t*str += 32;\n}\nint IsDigit(const char *str)\t//判断内容是否全是数字 1-是 0-不是\n{\n\tint flag = 0;\n\tfor(str; *str != '\\0'; str++)\n\t{\n\t\tif(*str >= 48 && *str <= 57)\n\t\t{\n\t\t\tflag = 1;\n\t\t\tcontinue;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tflag = 0;\n\t\t\tbreak;\n\t\t}\n\t}\t\n\treturn flag;\n}\nint IsUpper(const char *str)\t//判断内容是否全是大写字母 1-是 0-不是\n{\n\tint flag = 0;\n\tfor(str; *str != '\\0'; str++)\n\t{\n\t\tif(*str >= 65 && *str <= 90)\n\t\t{\n\t\t\tflag = 1;\n\t\t\tcontinue;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tflag = 0;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn flag;\n}\nint IsLower(const char *str)\t//判断字符是否全是小写字母 1-是 0-不是\n{\n\tint flag = 0;\n\tfor(str; *str != '\\0'; str++)\n\t{\n\t\tif(*str >= 97 && *str <= 122)\n\t\t{\n\t\t\tflag = 1;\n\t\t\tcontinue;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tflag = 0;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn flag;\n} \nint IsASCLL(const char *str) //判断是否全是ASCLL字符 1-是 0-不是\n{\n\tint flag = 0;\n\tfor(str; *str != '\\0'; str++)\n\t{\n\t\tif(*str >= 0 && *str <= 127)\n\t\t{\n\t\t\tflag = 1;\n\t\t\tcontinue;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tflag = 0;\n\t\t\tbreak; \n\t\t} \n\t}\t\n\treturn flag;\n}\n// 暴力算法 -- BF\nchar* STRSTR(const char* str1, const char* str2)\n{\n\t\tchar* s1 = (char*) str1;\n\t\tchar* s2 = (char*) str2;\n\t\tchar* current = (char*) str1;\n\n\t\twhile(*current)\n\t\t{\n\t\t\ts1 = current;\n\t\t\ts2 = (char*)str2;\n\n\t\t\twhile((*s1 != '\\0') && (*s2 != '\\0') && (*s1 == *s2))\n\t\t\t{\n\t\t\t\ts1++;\ts2++;\n\t\t\t}\n\n\t\t\tif(*s2 == '\\0')\n\t\t\t\treturn current;\n\n\t\t\tif(*s1 == '\\0')\n\t\t\t\treturn NULL;\n\t\t\tcurrent++;\n\t\t}\n\t\treturn NULL;\t\n}\n\n/*****************XML  解析*************************/\nint GetXMLBuffer_Str(const char* in_XMLBuffer, const char* in_FieldName, char* out_Value)\n{\n\tif(out_Value == 0) return 0;\t// 要存的地址不存在，即out_Value指针是空指针\n\tchar* start = 0;\n\tchar* end = 0;\n\tchar startStr[50];\n\tchar endStr[50];\n\t\n\tint len_Field = STRLEN(in_FieldName);\n\tMEMSET(startStr, 0, sizeof(startStr));\n\tMEMSET(endStr\t , 0, sizeof(endStr));\n\tSTRCPY(startStr, \"<\");\n\tSTRCAT(startStr, in_FieldName);\n\tSTRCAT(startStr, \">\");\n\tSTRCPY(endStr, \"</\");\n\tSTRCAT(endStr, in_FieldName);\n\tSTRCAT(endStr, \">\");\n\n\tMEMSET(start, 0, sizeof(start));\n\tMEMSET(end, 0, sizeof(end));\n\tstart = (char*)STRSTR(in_XMLBuffer, startStr);\n\tif(start != 0)\n\t\tend\t= (char*)STRSTR(in_XMLBuffer, endStr);\n\n\tif((start == 0) || (end == 0))\n\t\treturn 0;\t\t//未找到匹配字符串\n\tint length_Str = STRLEN(start) - STRLEN(end) - 2 - len_Field;\n\tSTRNCPY(out_Value, start+2+len_Field, length_Str);\n\n\treturn 1;\n}\n\nint GetXMLBuffer_Int(const char *in_XMLBuffer,const char *in_FieldName,int *out_Value)\n{\n\tGetXMLBuffer_Str(in_XMLBuffer, in_FieldName, (char*) out_Value);\n\t\n\t*out_Value = ATOI((const char*)out_Value);\n\t\n\treturn 1;\n}\n\nint GetXMLBuffer_Double(const char *in_XMLBuffer,const char *in_FieldName,double *out_Value)\n{\n\tGetXMLBuffer_Str(in_XMLBuffer, in_FieldName, (char*) out_Value);\n\t\n\t*out_Value = ATOD((const char*)out_Value);\n\n\treturn 1;\n}\n\n/*********************************时间函数***************************************/\n/**\n * 把整数的时间转换为字符串格式的时间，\n * 格式如：\"2019-02-08 12:05:08\"，\n * 如果转换成功函数返回1，失败返回0\n * */\nint TIMETOSTR(const time_t ti,char *strtime)\n{\n\tstruct tm* ptimer;\t//C内置时间结构体\n\tptimer = localtime(&ti);\n\t\n\tMEMSET(strtime, 0, sizeof(strtime));\n\n\tsprintf(strtime,\"%d-%d-%d %d:%d:%d\", \\\n\t\t\t\t\t\t\tptimer->tm_year+1900, \\\n\t\t\t\t\t\t\tptimer->tm_mon+1, \\\n\t\t\t\t\t\t\tptimer->tm_mday, \\\n\t\t\t\t\t\t\tptimer->tm_hour, \\\n\t\t\t\t\t\t\tptimer->tm_min, \\\n\t\t\t\t\t\t\tptimer->tm_sec );\n\treturn 1;\n}\n\n/**\n * 字符串格式的时间转换为整数的时间\n * 写的很烂\n * */\nint STRTOTIME(const char *strtime,time_t *ti)\n{\n\tchar* str = (char*) strtime;\n\tchar syear[10], smon[3], sday[3], shour[3], smin[3], ssec[3];\n\n\tMEMSET(syear, 0, sizeof(syear));\n\tMEMSET(smon, 0, sizeof(smon));\n\tMEMSET(sday, 0, sizeof(sday));\n\tMEMSET(shour, 0, sizeof(shour));\n\tMEMSET(smin, 0, sizeof(smin));\n\tMEMSET(ssec, 0, sizeof(ssec));\n\t\n\tsize_t len, index = 0;\n\tlen = STRLEN(strtime);\n\tint i,j;\n\t\n\tfor(i = index,j = 0; i < len; i++, j++)\n\t{\t\n\t\tsyear[j] = strtime[i];\n\t\tif(strtime[i] == '-')\n\t\t{\n\t\t\tsyear[j] = '\\0';\n\t\t  index = i+1;\n\t\t\tbreak;\n\t\t}\n  }\n\n\tfor(i = index,j = 0; i < len; i++, j++)\n\t{\t\n\t\tsmon[j] = strtime[i];\n\t\tif(strtime[i] == '-')\n\t\t{\n\t\t\tsmon[j] = '\\0';\n\t\t  index = i+1;\n\t\t\tbreak;\n\t\t}\n  }\n\n\tfor(i = index,j = 0; i < len; i++, j++)\n\t{\t\n\t\tsday[j] = strtime[i];\n\t\tif(strtime[i] == ' ')\n\t\t{\n\t\t\tsday[j] = '\\0';\n\t\t  index = i+1;\n\t\t\tbreak;\n\t\t}\n  }\n\n\tfor(i = index,j = 0; i < len; i++, j++)\n\t{\t\n\t\tshour[j] = strtime[i];\n\t\tif(strtime[i] == ':')\n\t\t{\n\t\t\tshour[j] = '\\0';\n\t\t  index = i+1;\n\t\t\tbreak;\n\t\t}\n  }\n\n\tfor(i = index,j = 0; i < len; i++, j++)\n\t{\t\n\t\tsmin[j] = strtime[i];\n\t\tif(strtime[i] == ':')\n\t\t{\n\t\t\tsmin[j] = '\\0';\n\t\t  index = i+1;\n\t\t\tbreak;\n\t\t}\n  }\n\n\tfor(i = index,j = 0; i < len; i++, j++)\n\t\tssec[j] = strtime[i];\n \t\n\n\tstruct tm timer;\n\tMEMSET((char*)&timer, 0, sizeof(timer));\n\ttimer.tm_year = ATOI(syear) - 1900;\n\ttimer.tm_mon = ATOI(smon) - 1;\n\ttimer.tm_mday = ATOI(sday);\n\ttimer.tm_hour = ATOI(shour);\n\ttimer.tm_min = ATOI(smin);\n\ttimer.tm_sec = ATOI(ssec);\t\n\t*ti = mktime(&timer);\n}\n\n/**\n *\n *  获取操作系统当前的时间\n *\n * */\nvoid LOCALTIME(char *out_stime,const char *in_fmt,const int in_interval)\n{\n\ttime_t timep;\n\t\n\tstruct tm* ptimer;\t//C内置时间结构体\n\ttimep = time(&timep) + 1000 * in_interval;\n\tptimer = localtime(&(timep));\n\n\tif(STRCMP(in_fmt, \"yyyy-mm-dd hh24:mi:ss\") == 0)\n\t\tsprintf(out_stime,\"%d-%d-%d %d:%d:%d\", \\\n\t\t\t\t\t\t\tptimer->tm_year+1900, \\\n\t\t\t\t\t\t\tptimer->tm_mon+1, \\\n\t\t\t\t\t\t\tptimer->tm_mday, \\\n\t\t\t\t\t\t\tptimer->tm_hour, \\\n\t\t\t\t\t\t\tptimer->tm_min, \\\n\t\t\t\t\t\t\tptimer->tm_sec );\n\telse if(STRCMP(in_fmt, \"yyyymmddhh24miss\") == 0)\n\t\tsprintf(out_stime,\"%d%d%d%d%d%d\", \\\n\t\t\t\t\t\t\tptimer->tm_year+1900, \\\n\t\t\t\t\t\t\tptimer->tm_mon+1, \\\n\t\t\t\t\t\t\tptimer->tm_mday, \\\n\t\t\t\t\t\t\tptimer->tm_hour, \\\n\t\t\t\t\t\t\tptimer->tm_min, \\\n\t\t\t\t\t\t\tptimer->tm_sec );\n\telse if(STRCMP(in_fmt, \"yyyy-mm-dd\") == 0)\n\t\tsprintf(out_stime,\"%d-%d-%d\", \\\n\t\t\t\t\t\t\tptimer->tm_year+1900, \\\n\t\t\t\t\t\t\tptimer->tm_mon+1, \\\n\t\t\t\t\t\t\tptimer->tm_mday );\n\t\n\telse if(STRCMP(in_fmt, \"yyyymmdd\") == 0)\n\t\tsprintf(out_stime,\"%d%d%d\", \\\n\t\t\t\t\t\t\tptimer->tm_year+1900, \\\n\t\t\t\t\t\t\tptimer->tm_mon+1, \\\n\t\t\t\t\t\t\tptimer->tm_mday );\n\t\n\telse if(STRCMP(in_fmt, \"hh24:mi:ss\") == 0)\n\t\tsprintf(out_stime,\"%d:%d:%d\", \\\n\t\t\t\t\t\t\tptimer->tm_hour, \\\n\t\t\t\t\t\t\tptimer->tm_min, \\\n\t\t\t\t\t\t\tptimer->tm_sec );\n\t\n\telse if(STRCMP(in_fmt, \"hh24miss\") == 0)\n\t\tsprintf(out_stime,\"%d%d%d\", \\\n\t\t\t\t\t\t\tptimer->tm_hour, \\\n\t\t\t\t\t\t\tptimer->tm_min, \\\n\t\t\t\t\t\t\tptimer->tm_sec );\n\t\n\telse if(STRCMP(in_fmt, \"hh24:mi\") == 0)\n\t\tsprintf(out_stime,\"%d:%d\", \\\n\t\t\t\t\t\t\tptimer->tm_hour, \\\n\t\t\t\t\t\t\tptimer->tm_min );\n\n\telse if(STRCMP(in_fmt, \"hh24\") == 0)\n\t\tsprintf(out_stime,\"%d\", \\\n\t\t\t\t\t\t\tptimer->tm_hour );\n\t\n\telse if(STRCMP(in_fmt, \"mi\") == 0)\n\t\tsprintf(out_stime,\"%d\", \n\t\t\t\t\t\t\tptimer->tm_sec );\n}\t\n\n```\n\n_pub : 封装的函数\n\n``` .\n1.\tABS, LABS -- 绝对值\n2.\tCTOI -- 字符转数字\n3.\tPOW -- 求幂值\n4.\tSTRLEN -- 求字符串长度  ××× 已删除合并到8\n5.\tATOI, ATOL -- 字符串转数字\n6.\tISALPHA, ISALNUM, ISDIGIT, ISLOWER, ISUPPER, TOLOWER, TOUPPER -- 字符操作的一系列函数\n7.\tFABS, ROUND, CEIL, FLOOR, MODF -- 浮点数一系列函数\n8.\tSTRLEN, STRCPY, STRNCPY, STRCAT, STRNCAT, STRCHR, STRRCHR -- 字符串一系列函数\n9.  STRCMP, STRNCMP -- 字符串比较函数\n10. ToUpper, ToLower, IsDigit, IsUpper, IsLower, IsASCLL -- 字符串判断函数\n11. STRSTR -- BF匹配子字符串\n12.\tGetXMLBuffer_Str, GetXMLBuffer_Int, GetXMLBuffer_Double\n13. 补充了修补了ATOI, ATOL, ATOD(不精确), ISSPACE 等函数\n14. TIMETOSTR, STRTOTIMR, LOCALTIME -- 时间操作函数\n```\n\n测试代码：test.c\n\n```c\n#include \"_pub.h\"\n#include <stdio.h>\n#include <string.h>\n#include <time.h>\n\nstruct st_girl\n{\n\tchar name[51];\n\tint age;\n\tint height;\n\tdouble weight;\n\tchar stature[31];\n\tchar facevalue[31];\n};\n\n\nint main()\n{\n#if 0\n\tlong int in,out;\n\tprintf(\"请输入要求值的数字\\n\");\n\tscanf(\"%ld\",&in);\n\tif(sizeof(in) <= sizeof(int))\n\t\tout = ABS(in);\n\telse\n\t\tout = LABS(in);\n\tprintf(\"out = %ld\\n\",out);\n#endif\n#if 0\t\n\tchar a;\n\tprintf(\"输入要转化的字符数字\\n\");\n\tscanf(\"%c\",&a);\n\tint bb = CTOI(a);\n\tprintf(\"out = %d\\n\",bb);\n#endif\n#if 0\n\tprintf(\"5^5 = %lld\\n\",POW(5,5));\n\tprintf(\"2^33 = %lld\\n\",POW(2,33));\n#endif\n#if 0\n\tchar aa[30];\n\tscanf(\"%s\",aa);\n\tprintf(\"len of aa = %d\\n\",STRLEN(aa));\n\t//printf(\"aa = %d\\n\",ATOI(aa));\n\tprintf(\"aa = %ld\\n\",ATOL(aa));\n#endif\n#if 0\n\tchar a = 'a',B = 'B';\n\tint c = '5',e = '6';\n\tchar d = '\\\\';\n\tprintf(\"%d %d %d %d %d %c %c\\n\",ISALPHA(a),ISDIGIT(c),ISDIGIT(e),ISUPPER(B),ISALNUM(d),TOLOWER(B),TOUPPER(a));\n#endif\n#if 0\n\tdouble i = -64.54864;\n\tdouble j = FABS(i);\n\tprintf(\"i=%.5lf,j=%.5lf\\n\", i,j);\n\tdouble k = 6.7,b = 3.3;\n\tprintf(\"%lf\\n\",ROUND(k));\n\tprintf(\"%lf\\n\",ROUND(b));\n\tprintf(\"%lf,%lf\\n\",CEIL(1.3),FLOOR(1.3));\n\tdouble z = 1.3;\n\tdouble *pz = &z; \n\tprintf(\"%lf\\n\",MODF(z,pz));\n\tprintf(\"%lf\\n\",*pz);\n#endif\n#if 0\n\tchar str[21];\n\tscanf(\"%s\",str);\n\tprintf(\"%lu\\n\",strlen1(str));\t\n\tchar str1[50],str2[30];\n\tmemset1(str1, 0, sizeof(str1));\n\tmemset1(str2, 0, sizeof(str2));\n\tstrcpy1(str1, \"10000\");\n\tprintf(\"str1=%s=\\n\", str1);\n\tstrcpy1(str2, \"1008611\");\n\tprintf(\"str2=%s=\\n\", str2);\n\tstrcpy1(str1, str2);\n\tprintf(\"str1=%s=\\n\",str1);\n\tprintf(\"----------------------\\n\");\n\tstrcpy(str1,str2);\n\tprintf(\"str1=%s=\\n\",str1);\n#endif\n#if 0\n\tchar A[30],B[10];\n  //置空很重要\n\tmemset1(A, 0,sizeof(A));\n\tmemset1(B, 0,sizeof(B));\n\tprintf(\"A=%s=,B=%s=\\n\",A,B);\n\tstrcpy1(A, \"Hello\");\n\tstrcpy1(B, \"World\");\n\tprintf(\"A=%s=,B=%s=\\n\",A,B);\n\tstrncpy1(A, \"你 好\",7);\n\tstrncpy1(B, \"世 界\",7);\n\tstrcat1(A,B);\n\tstrncat1(A, B, 7);\n\tprintf(\"A=%s=,B=%s=\\n\",A,B);\n#endif\n#if 0\n\tchar X[20];\n\tchar c = 'b';\n\tMEMSET(X, 0, sizeof(X));\n\tSTRCPY(X, \"ksdkkbdeefb\"); \n\tprintf(\"%s\\n\",STRCHR(X, '1'));\n\tprintf(\"-----------------\\n%s\\n\",STRCHR(X, '1'));\n\tprintf(\"%s\\n--------------------\", strrchr(X, 's'));\n\tprintf(\"\\n%s\\n\",STRRCHR(X, 's'));\n#endif\n#if 0\n\tchar str1[15],str2[10];\n\tMEMSET(str1, 0, sizeof(str1));\n\tMEMSET(str2, 0, sizeof(str2));\n\tSTRCPY(str1, \"ABCdd\");\n\tSTRCPY(str2, \"ABCddee\");\n\tprintf(\"str1?str2=.%d.\\n\",strcmp(str1, str2));\n\tprintf(\"str1?str2=.%d.\\n\",STRCMP(str1, str2));\n\tprintf(\"str1?str2=.%d.\\n\",STRNCMP(str1, str2, 2));\n\tprintf(\"str1?str2=.%d.\\n\",STRNCMP(str1, str2, 2));\n\tToUpper(str2);\n\tprintf(\"=%s=\\n\",str2);\n\tprintf(\"%d,%d,%d,%d\\n\", IsUpper(str2),IsDigit(str2),IsLower(str2),IsASCLL(str2));\n\tprintf(\"%d,\\n\",IsDigit(str2));\n\tprintf(\"==================\\n\");\n\tToLower(str2);\t\n\tprintf(\"%d,%d,%d,%d\\n\", IsUpper(str2),IsDigit(str2),IsLower(str2),IsASCLL(str2));\n\tprintf(\"%d\\n\",IsDigit(\"1123545998877445566332211\"));\n#endif\n#if 0\n\tprintf(\"%s\\n\",strstr(\"111222333\",\"222\"));\n\tprintf(\"%s\\n\",STRSTR(\"111222333\",\"222\"));\n\tprintf(\"%s\\n\",strstr(\"111222333\",\"333\"));\n\tprintf(\"%s\\n\",STRSTR(\"111222333\",\"333\"));\n\tprintf(\"%s\\n\",strstr(\"11122233e3\",\"eeee\"));\n\tprintf(\"%s\\n\",STRSTR(\"11122233e3\",\"eeee\"));\n#endif\n\n#if 0\n/*测试XML*/\nstruct st_girl beautygirl;\n\tstruct st_girl*  beauty = &beautygirl;\n\tstrcpy(beauty->name, \"西施\");\n\tbeauty->age = 18;\n\tbeauty->height = 168;\n\tbeauty->weight = 48.5;\n\tstrcpy(beauty->stature, \"火辣\");\n\tstrcpy(beauty->facevalue, \"漂亮\");\n\tchar str[255];\n\tmemset(str, 0, sizeof(str));\n\tsprintf(str,\"<name>%s</name>\"\t\t\t\t\t\t\t\\\n\t\t\t\t\t\t \t\"<age>%d</age>\"\t\t\t\t\t\t\t\t\\\n\t\t\t\t\t\t \t\"<height>%d</height>\"\t\t\t\t\t\\\n\t\t\t\t\t\t\t\"<weight>%lf</weight>\"\t\t\t\t\\\n\t\t\t\t\t\t\t\"<stature>%s</stature>\"\t\t\t\t\\\n\t\t\t\t\t\t\t\"<facevalue>%s</facevalue>\"\t,\t\n\t\t\t\t\t\t\t(*beauty).name, \n\t\t\t\t\t\t\t(*beauty).age, \n\t\t\t\t\t\t\t(*beauty).height, \n\t\t\t\t\t\t\t(*beauty).weight, \n\t\t\t\t\t\t\t(*beauty).stature, \n\t\t\t\t\t\t\t(*beauty).facevalue);\n\tchar str1[50];\n\tMEMSET(str1, 0, sizeof(str1));\n\tGetXMLBuffer_Str(str, \"name\", str1);\n\tprintf(\"=%s=\\n\", str1);\n\tMEMSET(str1, 0, sizeof(str1));\n\tGetXMLBuffer_Str(str, \"stature\", str1);\n\tprintf(\"=%s=\\n\", str1);\n\tMEMSET(str1, 0, sizeof(str1));\n\tGetXMLBuffer_Str(str, \"facevalue\", str1);\n\tprintf(\"=%s=\\n\", str1);\n\n\tprintf(\"%s\\n\", str);\n\tint age,height;\n\tdouble dd;\n\tGetXMLBuffer_Int(str, \"age\", &age);\n\tGetXMLBuffer_Int(str, \"height\", &height);\t\n\tGetXMLBuffer_Double(str, \"weight\", &dd);\t\n\tprintf(\"=age=%d,height=%d=,weight=%lf\\n\", age, height, dd);\n#endif\n\n#if 0\t\n\ttime_t t;\n\tchar str[120];\n\tMEMSET(str, 0, sizeof(str));\n\tt = time(NULL);\n\tprintf(\"%ld\\n\", t);\t\n\tTIMETOSTR(t, str);\n\tprintf(\"datetime=%s\\n\", str);\n\tSTRTOTIME(str,&t);\n\tprintf(\"t=%ld\\n\", t);\n\tchar str1[30];\n\tMEMSET(str1, 0, sizeof(str1));\n#endif\n\n\tchar out_time[30];\n\tMEMSET(out_time, 0, sizeof(out_time));\n\tLOCALTIME(out_time, \"yyyy-mm-dd hh24:mi:ss\", 0);\n\tprintf(\"out_time=%s\\n\", out_time);\n\tLOCALTIME(out_time, \"yyyymmddhh24miss\", 0);\n\tprintf(\"out_time=%s\\n\", out_time);\n\tLOCALTIME(out_time, \"yyyy-mm-dd\", 0);\n\tprintf(\"out_time=%s\\n\", out_time);\n\tLOCALTIME(out_time, \"yyyymmdd\", 0);\n\tprintf(\"out_time=%s\\n\", out_time);\n\tLOCALTIME(out_time, \"hh24:mi:ss\", 0);\n\tprintf(\"out_time=%s\\n\", out_time);\n\treturn 0;\n}\n```\n\n","slug":"封装函数","published":1,"updated":"2024-01-03T06:47:12.874Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clrh5tshs000nccus6hjk5yts","content":"<h1 id=\"封装的一些库函数\"><a href=\"#封装的一些库函数\" class=\"headerlink\" title=\"封装的一些库函数\"></a>封装的一些库函数</h1><h2 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h2><p>学习了B站大佬的 <code>http://www.freecplus.net/</code> 网站，自己动手封装了一些库函数</p>\n<p>头文件： _pub.h</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;time.h></span></span>\n\n<span class=\"token comment\">// 求绝对值的函数</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">ABS</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t<span class=\"token comment\">//int求绝对值</span>\n<span class=\"token keyword\">long</span> <span class=\"token function\">LABS</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//long求绝对值</span>\n\n<span class=\"token comment\">// char to int</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">CTOI</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//字符转化为数字</span>\n\n<span class=\"token comment\">// pow</span>\n<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token function\">POW</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//求幂</span>\n\n<span class=\"token comment\">// nptr to int </span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">ISSPACE</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">ATOI</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> nptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 把字符串转化为int</span>\n<span class=\"token keyword\">long</span> <span class=\"token function\">ATOL</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> nptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//把字符串转化为long</span>\n<span class=\"token keyword\">double</span> <span class=\"token function\">ATOD</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> nptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//字符串操作一系列函数</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">ISALPHA</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//若ch是字母字符'a-z'或者'A-Z' 返回非0值，否则返回0</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">ISALNUM</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//若ch是字母字符'a-z', 'A-Z' 或者数字字符'0-9' 返回非0值，否则返回0</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">ISDIGIT</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//若ch是数字'0-9' 返回非0值，否则返回0</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">ISLOWER</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//若ch是小写字母'a-z' 返回非0值，否则返回0</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">ISUPPER</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//若ch是大写字母'A-Z' 返回非0值  否则返回0</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">TOLOWER</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//若ch是大写字母'A-Z' 转化为对应小写字母 返回其ASCALL码</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">TOUPPER</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//若ch是小写字母'a-z' 转化为对应大写字母 返回其ASCALL码</span>\n\n<span class=\"token comment\">//浮点数的一系列函数</span>\n<span class=\"token keyword\">double</span> <span class=\"token function\">FABS</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">double</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 求双精度实数x的绝对值</span>\n<span class=\"token keyword\">double</span> <span class=\"token function\">ROUND</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">double</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// double四舍五入</span>\n<span class=\"token keyword\">double</span> <span class=\"token function\">CEIL</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">double</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// double向上取整数</span>\n<span class=\"token keyword\">double</span> <span class=\"token function\">FLOOR</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">double</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// double向下取整数</span>\n<span class=\"token comment\">//把双精度val分解成整数部分和小数部分，整数部分存放在ip所指的变量中，返回小数部分</span>\n<span class=\"token keyword\">double</span> <span class=\"token function\">MODF</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> val<span class=\"token punctuation\">,</span><span class=\"token keyword\">double</span> <span class=\"token operator\">*</span>ip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/***字符串一系列函数***/</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token class-name\">size_t</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">MEMSET</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> str<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> index<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//字符串置位函数</span>\n<span class=\"token class-name\">size_t</span> <span class=\"token function\">STRLEN</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span>  str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// 实现strlen函数的功能</span>\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">STRCPY</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> dest<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 实现strcpy函数的功能，下同。</span>\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">STRNCPY</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> dest<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> src<span class=\"token punctuation\">,</span><span class=\"token class-name\">size_t</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">STRCAT</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> dest<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">STRNCAT</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> dest<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> src<span class=\"token punctuation\">,</span><span class=\"token class-name\">size_t</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">STRCHR</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">STRRCHR</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 字符串比较函数</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">STRCMP</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">STRNCMP</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> str2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token class-name\">size_t</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 判断字符串</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ToUpper</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//小写字母转大写 忽略其他字符</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ToLower</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//大写字母转小写 忽略其他字符</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">IsDigit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//判断内容是否全是数字 1-是 0-不是</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">IsUpper</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//判断内容是否全是大写字母 1-是 0-不是</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">IsLower</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//判断字符是否全是小写字母 1-是 0-不是</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">IsASCLL</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//判断是否全是ASCLL字符 1-是 0-不是</span>\n<span class=\"token comment\">// KMP算法重写快速匹配 -- 暂时实现的是暴力破解BF算法</span>\n<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> <span class=\"token function\">STRSTR</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> str1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n\n<span class=\"token comment\">//********************************XML解析**************************************</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">GetXMLBuffer_Int</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>in_XMLBuffer<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>in_FieldName<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>out_Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">GetXMLBuffer_Str</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>in_XMLBuffer<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>in_FieldName<span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>out_Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">GetXMLBuffer_Double</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>in_XMLBuffer<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>in_FieldName<span class=\"token punctuation\">,</span><span class=\"token keyword\">double</span> <span class=\"token operator\">*</span>out_Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*********************************时间转换**************************************/</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">TIMETOSTR</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token class-name\">time_t</span> ti<span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>strtime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">//把整数的时间转换为字符串格式的时间</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">STRTOTIME</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>strtime<span class=\"token punctuation\">,</span><span class=\"token class-name\">time_t</span> <span class=\"token operator\">*</span>ti<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//把字符串格式的时间转换为整数的时间</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">LOCALTIME</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>out_stime<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>in_fmt<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> in_interval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//获取操作系统的时间</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>源文件： _pub.c</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"_pub.h\"</span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\"><span class=\"token constant\">NULL</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">NULL</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n\n\n<span class=\"token comment\">// ABS</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">ABS</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> ret<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> \n\t\tret <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">else</span> \n\t\tret <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> i<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">long</span> <span class=\"token function\">LABS</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">long</span> ret<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\tret <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">else</span>\n\t\tret <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> i<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// char to int</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">CTOI</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> c<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">&lt;</span> <span class=\"token number\">48</span> <span class=\"token operator\">&amp;&amp;</span> c <span class=\"token operator\">></span> <span class=\"token number\">57</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> c <span class=\"token operator\">-</span> <span class=\"token number\">48</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// POW</span>\n<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span>  <span class=\"token function\">POW</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">long</span> result <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> base <span class=\"token operator\">=</span> x<span class=\"token punctuation\">,</span> index <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t\tresult <span class=\"token operator\">*=</span> base<span class=\"token punctuation\">;</span>\n\t\tbase <span class=\"token operator\">*=</span> base<span class=\"token punctuation\">;</span>\n\t\tindex <span class=\"token operator\">/=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//判断是否有空格</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">ISSPACE</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ch <span class=\"token operator\">==</span> <span class=\"token char\">' '</span> <span class=\"token operator\">||</span> ch <span class=\"token operator\">==</span> <span class=\"token char\">'\\t'</span> <span class=\"token operator\">||</span> ch <span class=\"token operator\">==</span> <span class=\"token char\">'\\n'</span> <span class=\"token operator\">||</span> ch <span class=\"token operator\">==</span> <span class=\"token char\">'\\f'</span> <span class=\"token operator\">||</span> ch <span class=\"token operator\">==</span> <span class=\"token char\">'\\v'</span> <span class=\"token operator\">||</span> ch <span class=\"token operator\">==</span> <span class=\"token char\">'\\r'</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n\n<span class=\"token comment\">/************* ATOI &amp;&amp; ATOL*************************/</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">ATOI</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>nptr<span class=\"token punctuation\">)</span>\t<span class=\"token comment\">// string to int</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">char</span> sign<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> sign_1 <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>nptr<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> nValue <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">ISSPACE</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>nptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\tnptr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//去空格</span>\n\n\tsign <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>nptr<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">ISDIGIT</span><span class=\"token punctuation\">(</span>sign<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\tnptr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">ISDIGIT</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>nptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\tnValue <span class=\"token operator\">=</span> <span class=\"token number\">10</span> <span class=\"token operator\">*</span> nValue <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>nptr <span class=\"token operator\">-</span> <span class=\"token char\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tnptr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token keyword\">return</span> sign_1 <span class=\"token operator\">==</span> <span class=\"token char\">'-'</span><span class=\"token operator\">?</span> <span class=\"token operator\">-</span>nValue<span class=\"token operator\">:</span>nValue<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">long</span> <span class=\"token function\">ATOL</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> nptr<span class=\"token punctuation\">)</span>\t<span class=\"token comment\">// string to long</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">char</span> sign<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> sign_1 <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>nptr<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">long</span> nValue <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">ISSPACE</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>nptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\tnptr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//去空格</span>\n\n\tsign <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>nptr<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">ISDIGIT</span><span class=\"token punctuation\">(</span>sign<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\tnptr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">ISDIGIT</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>nptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\tnValue <span class=\"token operator\">=</span> <span class=\"token number\">10</span> <span class=\"token operator\">*</span> nValue <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>nptr <span class=\"token operator\">-</span> <span class=\"token char\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tnptr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token keyword\">return</span> sign_1 <span class=\"token operator\">==</span> <span class=\"token char\">'-'</span><span class=\"token operator\">?</span> <span class=\"token operator\">-</span>nValue<span class=\"token operator\">:</span>nValue<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">double</span> <span class=\"token function\">ATOD</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> nptr<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">char</span> sign<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> point <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> sign_1 <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>nptr<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> nValue <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">ISSPACE</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>nptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\tnptr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//去空格</span>\n\n\tsign <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>nptr<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">ISDIGIT</span><span class=\"token punctuation\">(</span>sign<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> sign <span class=\"token operator\">!=</span> <span class=\"token char\">'.'</span><span class=\"token punctuation\">)</span>\n\t\tnptr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">ISDIGIT</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>nptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>sign <span class=\"token operator\">==</span> <span class=\"token char\">'.'</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\tnptr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\tpoint<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\tnValue <span class=\"token operator\">=</span> <span class=\"token function\">POW</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span>point<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> nValue <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>nptr <span class=\"token operator\">-</span><span class=\"token char\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\tnValue <span class=\"token operator\">=</span> <span class=\"token number\">10</span> <span class=\"token operator\">*</span> nValue <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>nptr <span class=\"token operator\">-</span> <span class=\"token char\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tnptr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> sign_1 <span class=\"token operator\">==</span> <span class=\"token char\">'-'</span><span class=\"token operator\">?</span> <span class=\"token operator\">-</span>nValue<span class=\"token operator\">:</span>nValue<span class=\"token punctuation\">;</span>\t\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">/******************字符操作一些列函数****************/</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">ISALPHA</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> ch<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ch <span class=\"token operator\">>=</span> <span class=\"token number\">97</span> <span class=\"token operator\">&amp;&amp;</span> ch <span class=\"token operator\">&lt;=</span> <span class=\"token number\">122</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> ch <span class=\"token operator\">-</span> <span class=\"token number\">96</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ch <span class=\"token operator\">>=</span> <span class=\"token number\">65</span> <span class=\"token operator\">&amp;&amp;</span> ch <span class=\"token operator\">&lt;=</span> <span class=\"token number\">90</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> ch <span class=\"token operator\">-</span> <span class=\"token number\">64</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">ISALNUM</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> ch<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ch <span class=\"token operator\">>=</span> <span class=\"token number\">97</span> <span class=\"token operator\">&amp;&amp;</span> ch <span class=\"token operator\">&lt;=</span> <span class=\"token number\">122</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> ch <span class=\"token operator\">-</span> <span class=\"token number\">96</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ch <span class=\"token operator\">>=</span> <span class=\"token number\">65</span> <span class=\"token operator\">&amp;&amp;</span> ch <span class=\"token operator\">&lt;=</span> <span class=\"token number\">90</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> ch <span class=\"token operator\">-</span> <span class=\"token number\">64</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ch <span class=\"token operator\">>=</span> <span class=\"token number\">48</span> <span class=\"token operator\">&amp;&amp;</span> ch <span class=\"token operator\">&lt;=</span> <span class=\"token number\">57</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> ch <span class=\"token operator\">-</span> <span class=\"token number\">47</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">ISDIGIT</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> ch<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ch <span class=\"token operator\">>=</span> <span class=\"token number\">48</span> <span class=\"token operator\">&amp;&amp;</span> ch <span class=\"token operator\">&lt;=</span> <span class=\"token number\">57</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> ch <span class=\"token operator\">-</span> <span class=\"token number\">47</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">ISLOWER</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> ch<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ch <span class=\"token operator\">>=</span> <span class=\"token number\">97</span> <span class=\"token operator\">&amp;&amp;</span> ch <span class=\"token operator\">&lt;=</span> <span class=\"token number\">122</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> ch <span class=\"token operator\">-</span> <span class=\"token number\">96</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">ISUPPER</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> ch<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ch <span class=\"token operator\">>=</span> <span class=\"token number\">65</span> <span class=\"token operator\">&amp;&amp;</span> ch <span class=\"token operator\">&lt;=</span> <span class=\"token number\">90</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> ch <span class=\"token operator\">-</span> <span class=\"token number\">64</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">TOLOWER</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> ch<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ch <span class=\"token operator\">>=</span> <span class=\"token number\">65</span> <span class=\"token operator\">&amp;&amp;</span> ch <span class=\"token operator\">&lt;=</span> <span class=\"token number\">90</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> ch <span class=\"token operator\">+</span> <span class=\"token number\">32</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">TOUPPER</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> ch<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ch <span class=\"token operator\">>=</span> <span class=\"token number\">97</span> <span class=\"token operator\">&amp;&amp;</span> ch <span class=\"token operator\">&lt;=</span> <span class=\"token number\">122</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> ch <span class=\"token operator\">-</span> <span class=\"token number\">32</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">/***************** 浮点数一系列函数***************/</span>\n<span class=\"token keyword\">double</span> <span class=\"token function\">FABS</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">double</span> x<span class=\"token punctuation\">)</span>\t<span class=\"token comment\">//求双精度实数x的绝对值</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">double</span> a <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\ta <span class=\"token operator\">*=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">double</span> <span class=\"token function\">ROUND</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">double</span> x<span class=\"token punctuation\">)</span><span class=\"token comment\">//double四舍五入</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">double</span> b <span class=\"token operator\">=</span> x <span class=\"token operator\">-</span> a<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">></span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span>\n\t\ta <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">double</span> <span class=\"token function\">CEIL</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">double</span> x<span class=\"token punctuation\">)</span>\t<span class=\"token comment\">//double向上取整数</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n\ta <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">double</span> <span class=\"token function\">FLOOR</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">double</span> x<span class=\"token punctuation\">)</span>\t<span class=\"token comment\">// double向下取整数</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">double</span> <span class=\"token function\">MODF</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> val<span class=\"token punctuation\">,</span><span class=\"token keyword\">double</span> <span class=\"token operator\">*</span>ip<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// 把双精度val分解成整数部分和小数部分，整数部分存放在ip所指的变量中，返回小数部分</span>\n\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">double</span> d <span class=\"token operator\">=</span> val <span class=\"token operator\">-</span> a<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">double</span> da <span class=\"token operator\">=</span> val <span class=\"token operator\">-</span> d<span class=\"token punctuation\">;</span>\n\t<span class=\"token operator\">*</span>ip <span class=\"token operator\">=</span> da<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> d<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">/***************字符串一系列函数*********************/</span>\n<span class=\"token class-name\">size_t</span> <span class=\"token function\">STRLEN</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> str<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> str1 <span class=\"token operator\">=</span> str<span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">size_t</span> len <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>str1 <span class=\"token operator\">!=</span> <span class=\"token char\">'\\0'</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>str1 <span class=\"token operator\">!=</span> <span class=\"token char\">'\\n'</span><span class=\"token punctuation\">)</span>\n\t\t\tstr1<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\tlen <span class=\"token operator\">=</span> str1 <span class=\"token operator\">-</span> str<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> len<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//置位函数</span>\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> <span class=\"token function\">MEMSET</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> str<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> index<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> size<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> str <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\t\t\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>size<span class=\"token operator\">--</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token operator\">*</span>str<span class=\"token operator\">++</span> <span class=\"token operator\">=</span> index<span class=\"token punctuation\">;</span>\t\n\t<span class=\"token keyword\">return</span> str<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//修改字符串指针指向</span>\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">STRCPY</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> dest<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> src<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token function\">STRLEN</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\tdest<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> src<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\t\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> dest<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">STRNCPY</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> dest<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> src<span class=\"token punctuation\">,</span><span class=\"token class-name\">size_t</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\tdest<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> src<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> dest<span class=\"token punctuation\">;</span>\t\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 字符串拼接</span>\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">STRCAT</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> dest<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> src<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> str1 <span class=\"token operator\">=</span> dest<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">long</span> len <span class=\"token operator\">=</span> <span class=\"token function\">STRLEN</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">long</span> len_d <span class=\"token operator\">=</span> <span class=\"token function\">STRLEN</span><span class=\"token punctuation\">(</span>dest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\tstr1<span class=\"token punctuation\">[</span>len_d<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> src<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\tlen_d<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> str1<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">STRNCAT</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> dest<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> src<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token class-name\">size_t</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> str1 <span class=\"token operator\">=</span> dest<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">long</span> len_d <span class=\"token operator\">=</span> <span class=\"token function\">STRLEN</span><span class=\"token punctuation\">(</span>dest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\tstr1<span class=\"token punctuation\">[</span>len_d<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> src<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\tlen_d<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> str1<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">STRCHR</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> c<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t\n\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> sb <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> s<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token function\">STRLEN</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>sb <span class=\"token operator\">==</span> c<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\t\n\t\tsb<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\ti<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> len<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"(null)\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> sb<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">STRRCHR</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> c<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token function\">STRLEN</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> sb <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>s<span class=\"token operator\">+</span>len<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>sb <span class=\"token operator\">==</span> c<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\tsb<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\t\ti<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> len<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"(null)\"</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">return</span> sb<span class=\"token punctuation\">;</span>\n\t\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//====================字符串比较函数=====================</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">STRCMP</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str2<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token class-name\">size_t</span> len <span class=\"token operator\">=</span> <span class=\"token function\">STRLEN</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token function\">STRLEN</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token function\">STRLEN</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">STRLEN</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>len<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>str1 <span class=\"token operator\">!=</span> <span class=\"token operator\">*</span>str2<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>str1<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tstr1<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\tstr2<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">STRNCMP</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str2<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>str1 <span class=\"token operator\">!=</span> <span class=\"token operator\">*</span>str2<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>str1<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tstr1<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\tstr2<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 判断字符串</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ToUpper</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str<span class=\"token punctuation\">)</span>\t<span class=\"token comment\">//小写字母转大写 忽略其他字符</span>\n<span class=\"token punctuation\">&#123;</span>\t\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>str <span class=\"token operator\">!=</span> <span class=\"token char\">'\\0'</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>str <span class=\"token operator\">>=</span> <span class=\"token number\">97</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">*</span>str <span class=\"token operator\">&lt;=</span> <span class=\"token number\">122</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token operator\">*</span>str <span class=\"token operator\">-=</span> <span class=\"token number\">32</span><span class=\"token punctuation\">;</span>\n\t\tstr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t\t\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ToLower</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str<span class=\"token punctuation\">)</span>\t<span class=\"token comment\">//大写字母转小写 忽略其他字符</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">;</span> <span class=\"token operator\">*</span>str <span class=\"token operator\">!=</span> <span class=\"token char\">'\\0'</span><span class=\"token punctuation\">;</span> str<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>str <span class=\"token operator\">>=</span> <span class=\"token number\">65</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">*</span>str <span class=\"token operator\">&lt;=</span> <span class=\"token number\">90</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token operator\">*</span>str <span class=\"token operator\">+=</span> <span class=\"token number\">32</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">IsDigit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str<span class=\"token punctuation\">)</span>\t<span class=\"token comment\">//判断内容是否全是数字 1-是 0-不是</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> flag <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">;</span> <span class=\"token operator\">*</span>str <span class=\"token operator\">!=</span> <span class=\"token char\">'\\0'</span><span class=\"token punctuation\">;</span> str<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>str <span class=\"token operator\">>=</span> <span class=\"token number\">48</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">*</span>str <span class=\"token operator\">&lt;=</span> <span class=\"token number\">57</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\tflag <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\tflag <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\t\n\t<span class=\"token keyword\">return</span> flag<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">IsUpper</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str<span class=\"token punctuation\">)</span>\t<span class=\"token comment\">//判断内容是否全是大写字母 1-是 0-不是</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> flag <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">;</span> <span class=\"token operator\">*</span>str <span class=\"token operator\">!=</span> <span class=\"token char\">'\\0'</span><span class=\"token punctuation\">;</span> str<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>str <span class=\"token operator\">>=</span> <span class=\"token number\">65</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">*</span>str <span class=\"token operator\">&lt;=</span> <span class=\"token number\">90</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\tflag <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\tflag <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> flag<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">IsLower</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str<span class=\"token punctuation\">)</span>\t<span class=\"token comment\">//判断字符是否全是小写字母 1-是 0-不是</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> flag <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">;</span> <span class=\"token operator\">*</span>str <span class=\"token operator\">!=</span> <span class=\"token char\">'\\0'</span><span class=\"token punctuation\">;</span> str<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>str <span class=\"token operator\">>=</span> <span class=\"token number\">97</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">*</span>str <span class=\"token operator\">&lt;=</span> <span class=\"token number\">122</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\tflag <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\tflag <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> flag<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> \n<span class=\"token keyword\">int</span> <span class=\"token function\">IsASCLL</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str<span class=\"token punctuation\">)</span> <span class=\"token comment\">//判断是否全是ASCLL字符 1-是 0-不是</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> flag <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">;</span> <span class=\"token operator\">*</span>str <span class=\"token operator\">!=</span> <span class=\"token char\">'\\0'</span><span class=\"token punctuation\">;</span> str<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>str <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">*</span>str <span class=\"token operator\">&lt;=</span> <span class=\"token number\">127</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\tflag <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\tflag <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> \n\t\t<span class=\"token punctuation\">&#125;</span> \n\t<span class=\"token punctuation\">&#125;</span>\t\n\t<span class=\"token keyword\">return</span> flag<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 暴力算法 -- BF</span>\n<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> <span class=\"token function\">STRSTR</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> str1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> str2<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> s1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> str1<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> s2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> str2<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> current <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> str1<span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>current<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\ts1 <span class=\"token operator\">=</span> current<span class=\"token punctuation\">;</span>\n\t\t\ts2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>str2<span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>s1 <span class=\"token operator\">!=</span> <span class=\"token char\">'\\0'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>s2 <span class=\"token operator\">!=</span> <span class=\"token char\">'\\0'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>s1 <span class=\"token operator\">==</span> <span class=\"token operator\">*</span>s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\ts1<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\ts2<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>s2 <span class=\"token operator\">==</span> <span class=\"token char\">'\\0'</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token keyword\">return</span> current<span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>s1 <span class=\"token operator\">==</span> <span class=\"token char\">'\\0'</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t\t\tcurrent<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\t\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">/*****************XML  解析*************************/</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">GetXMLBuffer_Str</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> in_XMLBuffer<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> in_FieldName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> out_Value<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>out_Value <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 要存的地址不存在，即out_Value指针是空指针</span>\n\t<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> start <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> end <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> startStr<span class=\"token punctuation\">[</span><span class=\"token number\">50</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> endStr<span class=\"token punctuation\">[</span><span class=\"token number\">50</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">int</span> len_Field <span class=\"token operator\">=</span> <span class=\"token function\">STRLEN</span><span class=\"token punctuation\">(</span>in_FieldName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">MEMSET</span><span class=\"token punctuation\">(</span>startStr<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>startStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">MEMSET</span><span class=\"token punctuation\">(</span>endStr\t <span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>endStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">STRCPY</span><span class=\"token punctuation\">(</span>startStr<span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">STRCAT</span><span class=\"token punctuation\">(</span>startStr<span class=\"token punctuation\">,</span> in_FieldName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">STRCAT</span><span class=\"token punctuation\">(</span>startStr<span class=\"token punctuation\">,</span> <span class=\"token string\">\">\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">STRCPY</span><span class=\"token punctuation\">(</span>endStr<span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">STRCAT</span><span class=\"token punctuation\">(</span>endStr<span class=\"token punctuation\">,</span> in_FieldName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">STRCAT</span><span class=\"token punctuation\">(</span>endStr<span class=\"token punctuation\">,</span> <span class=\"token string\">\">\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">MEMSET</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">MEMSET</span><span class=\"token punctuation\">(</span>end<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tstart <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">STRSTR</span><span class=\"token punctuation\">(</span>in_XMLBuffer<span class=\"token punctuation\">,</span> startStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>start <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\tend\t<span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">STRSTR</span><span class=\"token punctuation\">(</span>in_XMLBuffer<span class=\"token punctuation\">,</span> endStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>start <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//未找到匹配字符串</span>\n\t<span class=\"token keyword\">int</span> length_Str <span class=\"token operator\">=</span> <span class=\"token function\">STRLEN</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token function\">STRLEN</span><span class=\"token punctuation\">(</span>end<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">2</span> <span class=\"token operator\">-</span> len_Field<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">STRNCPY</span><span class=\"token punctuation\">(</span>out_Value<span class=\"token punctuation\">,</span> start<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token operator\">+</span>len_Field<span class=\"token punctuation\">,</span> length_Str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">GetXMLBuffer_Int</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>in_XMLBuffer<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>in_FieldName<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>out_Value<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">GetXMLBuffer_Str</span><span class=\"token punctuation\">(</span>in_XMLBuffer<span class=\"token punctuation\">,</span> in_FieldName<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> out_Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token operator\">*</span>out_Value <span class=\"token operator\">=</span> <span class=\"token function\">ATOI</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>out_Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">GetXMLBuffer_Double</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>in_XMLBuffer<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>in_FieldName<span class=\"token punctuation\">,</span><span class=\"token keyword\">double</span> <span class=\"token operator\">*</span>out_Value<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">GetXMLBuffer_Str</span><span class=\"token punctuation\">(</span>in_XMLBuffer<span class=\"token punctuation\">,</span> in_FieldName<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> out_Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token operator\">*</span>out_Value <span class=\"token operator\">=</span> <span class=\"token function\">ATOD</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>out_Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">/*********************************时间函数***************************************/</span>\n<span class=\"token comment\">/**\n * 把整数的时间转换为字符串格式的时间，\n * 格式如：\"2019-02-08 12:05:08\"，\n * 如果转换成功函数返回1，失败返回0\n * */</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">TIMETOSTR</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token class-name\">time_t</span> ti<span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>strtime<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">tm</span><span class=\"token operator\">*</span> ptimer<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//C内置时间结构体</span>\n\tptimer <span class=\"token operator\">=</span> <span class=\"token function\">localtime</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ti<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token function\">MEMSET</span><span class=\"token punctuation\">(</span>strtime<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>strtime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>strtime<span class=\"token punctuation\">,</span><span class=\"token string\">\"%d-%d-%d %d:%d:%d\"</span><span class=\"token punctuation\">,</span> \\\n\t\t\t\t\t\t\tptimer<span class=\"token operator\">-></span>tm_year<span class=\"token operator\">+</span><span class=\"token number\">1900</span><span class=\"token punctuation\">,</span> \\\n\t\t\t\t\t\t\tptimer<span class=\"token operator\">-></span>tm_mon<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> \\\n\t\t\t\t\t\t\tptimer<span class=\"token operator\">-></span>tm_mday<span class=\"token punctuation\">,</span> \\\n\t\t\t\t\t\t\tptimer<span class=\"token operator\">-></span>tm_hour<span class=\"token punctuation\">,</span> \\\n\t\t\t\t\t\t\tptimer<span class=\"token operator\">-></span>tm_min<span class=\"token punctuation\">,</span> \\\n\t\t\t\t\t\t\tptimer<span class=\"token operator\">-></span>tm_sec <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">/**\n * 字符串格式的时间转换为整数的时间\n * 写的很烂\n * */</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">STRTOTIME</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>strtime<span class=\"token punctuation\">,</span><span class=\"token class-name\">time_t</span> <span class=\"token operator\">*</span>ti<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> str <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> strtime<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> syear<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> smon<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> sday<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> shour<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> smin<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> ssec<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">MEMSET</span><span class=\"token punctuation\">(</span>syear<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>syear<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">MEMSET</span><span class=\"token punctuation\">(</span>smon<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>smon<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">MEMSET</span><span class=\"token punctuation\">(</span>sday<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>sday<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">MEMSET</span><span class=\"token punctuation\">(</span>shour<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>shour<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">MEMSET</span><span class=\"token punctuation\">(</span>smin<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>smin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">MEMSET</span><span class=\"token punctuation\">(</span>ssec<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>ssec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token class-name\">size_t</span> len<span class=\"token punctuation\">,</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tlen <span class=\"token operator\">=</span> <span class=\"token function\">STRLEN</span><span class=\"token punctuation\">(</span>strtime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> index<span class=\"token punctuation\">,</span>j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\t\n\t\tsyear<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> strtime<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>strtime<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">'-'</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\tsyear<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token char\">'\\0'</span><span class=\"token punctuation\">;</span>\n\t\t  index <span class=\"token operator\">=</span> i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> index<span class=\"token punctuation\">,</span>j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\t\n\t\tsmon<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> strtime<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>strtime<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">'-'</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\tsmon<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token char\">'\\0'</span><span class=\"token punctuation\">;</span>\n\t\t  index <span class=\"token operator\">=</span> i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> index<span class=\"token punctuation\">,</span>j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\t\n\t\tsday<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> strtime<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>strtime<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">' '</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\tsday<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token char\">'\\0'</span><span class=\"token punctuation\">;</span>\n\t\t  index <span class=\"token operator\">=</span> i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> index<span class=\"token punctuation\">,</span>j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\t\n\t\tshour<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> strtime<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>strtime<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">':'</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\tshour<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token char\">'\\0'</span><span class=\"token punctuation\">;</span>\n\t\t  index <span class=\"token operator\">=</span> i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> index<span class=\"token punctuation\">,</span>j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\t\n\t\tsmin<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> strtime<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>strtime<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">':'</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\tsmin<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token char\">'\\0'</span><span class=\"token punctuation\">;</span>\n\t\t  index <span class=\"token operator\">=</span> i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> index<span class=\"token punctuation\">,</span>j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\tssec<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> strtime<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n \t\n\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">tm</span> timer<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">MEMSET</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>timer<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ttimer<span class=\"token punctuation\">.</span>tm_year <span class=\"token operator\">=</span> <span class=\"token function\">ATOI</span><span class=\"token punctuation\">(</span>syear<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1900</span><span class=\"token punctuation\">;</span>\n\ttimer<span class=\"token punctuation\">.</span>tm_mon <span class=\"token operator\">=</span> <span class=\"token function\">ATOI</span><span class=\"token punctuation\">(</span>smon<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\ttimer<span class=\"token punctuation\">.</span>tm_mday <span class=\"token operator\">=</span> <span class=\"token function\">ATOI</span><span class=\"token punctuation\">(</span>sday<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ttimer<span class=\"token punctuation\">.</span>tm_hour <span class=\"token operator\">=</span> <span class=\"token function\">ATOI</span><span class=\"token punctuation\">(</span>shour<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ttimer<span class=\"token punctuation\">.</span>tm_min <span class=\"token operator\">=</span> <span class=\"token function\">ATOI</span><span class=\"token punctuation\">(</span>smin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ttimer<span class=\"token punctuation\">.</span>tm_sec <span class=\"token operator\">=</span> <span class=\"token function\">ATOI</span><span class=\"token punctuation\">(</span>ssec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\n\t<span class=\"token operator\">*</span>ti <span class=\"token operator\">=</span> <span class=\"token function\">mktime</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">/**\n *\n *  获取操作系统当前的时间\n *\n * */</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">LOCALTIME</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>out_stime<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>in_fmt<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> in_interval<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token class-name\">time_t</span> timep<span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">tm</span><span class=\"token operator\">*</span> ptimer<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//C内置时间结构体</span>\n\ttimep <span class=\"token operator\">=</span> <span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>timep<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1000</span> <span class=\"token operator\">*</span> in_interval<span class=\"token punctuation\">;</span>\n\tptimer <span class=\"token operator\">=</span> <span class=\"token function\">localtime</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>timep<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">STRCMP</span><span class=\"token punctuation\">(</span>in_fmt<span class=\"token punctuation\">,</span> <span class=\"token string\">\"yyyy-mm-dd hh24:mi:ss\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>out_stime<span class=\"token punctuation\">,</span><span class=\"token string\">\"%d-%d-%d %d:%d:%d\"</span><span class=\"token punctuation\">,</span> \\\n\t\t\t\t\t\t\tptimer<span class=\"token operator\">-></span>tm_year<span class=\"token operator\">+</span><span class=\"token number\">1900</span><span class=\"token punctuation\">,</span> \\\n\t\t\t\t\t\t\tptimer<span class=\"token operator\">-></span>tm_mon<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> \\\n\t\t\t\t\t\t\tptimer<span class=\"token operator\">-></span>tm_mday<span class=\"token punctuation\">,</span> \\\n\t\t\t\t\t\t\tptimer<span class=\"token operator\">-></span>tm_hour<span class=\"token punctuation\">,</span> \\\n\t\t\t\t\t\t\tptimer<span class=\"token operator\">-></span>tm_min<span class=\"token punctuation\">,</span> \\\n\t\t\t\t\t\t\tptimer<span class=\"token operator\">-></span>tm_sec <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">STRCMP</span><span class=\"token punctuation\">(</span>in_fmt<span class=\"token punctuation\">,</span> <span class=\"token string\">\"yyyymmddhh24miss\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>out_stime<span class=\"token punctuation\">,</span><span class=\"token string\">\"%d%d%d%d%d%d\"</span><span class=\"token punctuation\">,</span> \\\n\t\t\t\t\t\t\tptimer<span class=\"token operator\">-></span>tm_year<span class=\"token operator\">+</span><span class=\"token number\">1900</span><span class=\"token punctuation\">,</span> \\\n\t\t\t\t\t\t\tptimer<span class=\"token operator\">-></span>tm_mon<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> \\\n\t\t\t\t\t\t\tptimer<span class=\"token operator\">-></span>tm_mday<span class=\"token punctuation\">,</span> \\\n\t\t\t\t\t\t\tptimer<span class=\"token operator\">-></span>tm_hour<span class=\"token punctuation\">,</span> \\\n\t\t\t\t\t\t\tptimer<span class=\"token operator\">-></span>tm_min<span class=\"token punctuation\">,</span> \\\n\t\t\t\t\t\t\tptimer<span class=\"token operator\">-></span>tm_sec <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">STRCMP</span><span class=\"token punctuation\">(</span>in_fmt<span class=\"token punctuation\">,</span> <span class=\"token string\">\"yyyy-mm-dd\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>out_stime<span class=\"token punctuation\">,</span><span class=\"token string\">\"%d-%d-%d\"</span><span class=\"token punctuation\">,</span> \\\n\t\t\t\t\t\t\tptimer<span class=\"token operator\">-></span>tm_year<span class=\"token operator\">+</span><span class=\"token number\">1900</span><span class=\"token punctuation\">,</span> \\\n\t\t\t\t\t\t\tptimer<span class=\"token operator\">-></span>tm_mon<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> \\\n\t\t\t\t\t\t\tptimer<span class=\"token operator\">-></span>tm_mday <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">STRCMP</span><span class=\"token punctuation\">(</span>in_fmt<span class=\"token punctuation\">,</span> <span class=\"token string\">\"yyyymmdd\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>out_stime<span class=\"token punctuation\">,</span><span class=\"token string\">\"%d%d%d\"</span><span class=\"token punctuation\">,</span> \\\n\t\t\t\t\t\t\tptimer<span class=\"token operator\">-></span>tm_year<span class=\"token operator\">+</span><span class=\"token number\">1900</span><span class=\"token punctuation\">,</span> \\\n\t\t\t\t\t\t\tptimer<span class=\"token operator\">-></span>tm_mon<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> \\\n\t\t\t\t\t\t\tptimer<span class=\"token operator\">-></span>tm_mday <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">STRCMP</span><span class=\"token punctuation\">(</span>in_fmt<span class=\"token punctuation\">,</span> <span class=\"token string\">\"hh24:mi:ss\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>out_stime<span class=\"token punctuation\">,</span><span class=\"token string\">\"%d:%d:%d\"</span><span class=\"token punctuation\">,</span> \\\n\t\t\t\t\t\t\tptimer<span class=\"token operator\">-></span>tm_hour<span class=\"token punctuation\">,</span> \\\n\t\t\t\t\t\t\tptimer<span class=\"token operator\">-></span>tm_min<span class=\"token punctuation\">,</span> \\\n\t\t\t\t\t\t\tptimer<span class=\"token operator\">-></span>tm_sec <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">STRCMP</span><span class=\"token punctuation\">(</span>in_fmt<span class=\"token punctuation\">,</span> <span class=\"token string\">\"hh24miss\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>out_stime<span class=\"token punctuation\">,</span><span class=\"token string\">\"%d%d%d\"</span><span class=\"token punctuation\">,</span> \\\n\t\t\t\t\t\t\tptimer<span class=\"token operator\">-></span>tm_hour<span class=\"token punctuation\">,</span> \\\n\t\t\t\t\t\t\tptimer<span class=\"token operator\">-></span>tm_min<span class=\"token punctuation\">,</span> \\\n\t\t\t\t\t\t\tptimer<span class=\"token operator\">-></span>tm_sec <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">STRCMP</span><span class=\"token punctuation\">(</span>in_fmt<span class=\"token punctuation\">,</span> <span class=\"token string\">\"hh24:mi\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>out_stime<span class=\"token punctuation\">,</span><span class=\"token string\">\"%d:%d\"</span><span class=\"token punctuation\">,</span> \\\n\t\t\t\t\t\t\tptimer<span class=\"token operator\">-></span>tm_hour<span class=\"token punctuation\">,</span> \\\n\t\t\t\t\t\t\tptimer<span class=\"token operator\">-></span>tm_min <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">STRCMP</span><span class=\"token punctuation\">(</span>in_fmt<span class=\"token punctuation\">,</span> <span class=\"token string\">\"hh24\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>out_stime<span class=\"token punctuation\">,</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> \\\n\t\t\t\t\t\t\tptimer<span class=\"token operator\">-></span>tm_hour <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">STRCMP</span><span class=\"token punctuation\">(</span>in_fmt<span class=\"token punctuation\">,</span> <span class=\"token string\">\"mi\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>out_stime<span class=\"token punctuation\">,</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> \n\t\t\t\t\t\t\tptimer<span class=\"token operator\">-></span>tm_sec <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\t\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>_pub : 封装的函数</p>\n<pre class=\"line-numbers language-.\" data-language=\".\"><code class=\"language-.\">1.\tABS, LABS -- 绝对值\n2.\tCTOI -- 字符转数字\n3.\tPOW -- 求幂值\n4.\tSTRLEN -- 求字符串长度  ××× 已删除合并到8\n5.\tATOI, ATOL -- 字符串转数字\n6.\tISALPHA, ISALNUM, ISDIGIT, ISLOWER, ISUPPER, TOLOWER, TOUPPER -- 字符操作的一系列函数\n7.\tFABS, ROUND, CEIL, FLOOR, MODF -- 浮点数一系列函数\n8.\tSTRLEN, STRCPY, STRNCPY, STRCAT, STRNCAT, STRCHR, STRRCHR -- 字符串一系列函数\n9.  STRCMP, STRNCMP -- 字符串比较函数\n10. ToUpper, ToLower, IsDigit, IsUpper, IsLower, IsASCLL -- 字符串判断函数\n11. STRSTR -- BF匹配子字符串\n12.\tGetXMLBuffer_Str, GetXMLBuffer_Int, GetXMLBuffer_Double\n13. 补充了修补了ATOI, ATOL, ATOD(不精确), ISSPACE 等函数\n14. TIMETOSTR, STRTOTIMR, LOCALTIME -- 时间操作函数<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>测试代码：test.c</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"_pub.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;time.h></span></span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">st_girl</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">51</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> height<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">double</span> weight<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> stature<span class=\"token punctuation\">[</span><span class=\"token number\">31</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> facevalue<span class=\"token punctuation\">[</span><span class=\"token number\">31</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token number\">0</span></span></span>\n\t<span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> in<span class=\"token punctuation\">,</span>out<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入要求值的数字\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%ld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\tout <span class=\"token operator\">=</span> <span class=\"token function\">ABS</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">else</span>\n\t\tout <span class=\"token operator\">=</span> <span class=\"token function\">LABS</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"out = %ld\\n\"</span><span class=\"token punctuation\">,</span>out<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token number\">0</span>\t</span></span>\n\t<span class=\"token keyword\">char</span> a<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入要转化的字符数字\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> bb <span class=\"token operator\">=</span> <span class=\"token function\">CTOI</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"out = %d\\n\"</span><span class=\"token punctuation\">,</span>bb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token number\">0</span></span></span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"5^5 = %lld\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">POW</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2^33 = %lld\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">POW</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">33</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token number\">0</span></span></span>\n\t<span class=\"token keyword\">char</span> aa<span class=\"token punctuation\">[</span><span class=\"token number\">30</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span>aa<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"len of aa = %d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">STRLEN</span><span class=\"token punctuation\">(</span>aa<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//printf(\"aa = %d\\n\",ATOI(aa));</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"aa = %ld\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">ATOL</span><span class=\"token punctuation\">(</span>aa<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token number\">0</span></span></span>\n\t<span class=\"token keyword\">char</span> a <span class=\"token operator\">=</span> <span class=\"token char\">'a'</span><span class=\"token punctuation\">,</span>B <span class=\"token operator\">=</span> <span class=\"token char\">'B'</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> <span class=\"token char\">'5'</span><span class=\"token punctuation\">,</span>e <span class=\"token operator\">=</span> <span class=\"token char\">'6'</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> d <span class=\"token operator\">=</span> <span class=\"token char\">'\\\\'</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d %d %d %d %c %c\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">ISALPHA</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">ISDIGIT</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">ISDIGIT</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">ISUPPER</span><span class=\"token punctuation\">(</span>B<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">ISALNUM</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">TOLOWER</span><span class=\"token punctuation\">(</span>B<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">TOUPPER</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token number\">0</span></span></span>\n\t<span class=\"token keyword\">double</span> i <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">64.54864</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">double</span> j <span class=\"token operator\">=</span> <span class=\"token function\">FABS</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i=%.5lf,j=%.5lf\\n\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">double</span> k <span class=\"token operator\">=</span> <span class=\"token number\">6.7</span><span class=\"token punctuation\">,</span>b <span class=\"token operator\">=</span> <span class=\"token number\">3.3</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lf\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">ROUND</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lf\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">ROUND</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lf,%lf\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">CEIL</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">FLOOR</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">double</span> z <span class=\"token operator\">=</span> <span class=\"token number\">1.3</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">double</span> <span class=\"token operator\">*</span>pz <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>z<span class=\"token punctuation\">;</span> \n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lf\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">MODF</span><span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">,</span>pz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lf\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>pz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token number\">0</span></span></span>\n\t<span class=\"token keyword\">char</span> str<span class=\"token punctuation\">[</span><span class=\"token number\">21</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lu\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">strlen1</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\n\t<span class=\"token keyword\">char</span> str1<span class=\"token punctuation\">[</span><span class=\"token number\">50</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>str2<span class=\"token punctuation\">[</span><span class=\"token number\">30</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">memset1</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">memset1</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">strcpy1</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">,</span> <span class=\"token string\">\"10000\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str1=%s=\\n\"</span><span class=\"token punctuation\">,</span> str1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">strcpy1</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">,</span> <span class=\"token string\">\"1008611\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str2=%s=\\n\"</span><span class=\"token punctuation\">,</span> str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">strcpy1</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">,</span> str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str1=%s=\\n\"</span><span class=\"token punctuation\">,</span>str1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----------------------\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">,</span>str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str1=%s=\\n\"</span><span class=\"token punctuation\">,</span>str1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token number\">0</span></span></span>\n\t<span class=\"token keyword\">char</span> A<span class=\"token punctuation\">[</span><span class=\"token number\">30</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>B<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">//置空很重要</span>\n\t<span class=\"token function\">memset1</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">memset1</span><span class=\"token punctuation\">(</span>B<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>B<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A=%s=,B=%s=\\n\"</span><span class=\"token punctuation\">,</span>A<span class=\"token punctuation\">,</span>B<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">strcpy1</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">strcpy1</span><span class=\"token punctuation\">(</span>B<span class=\"token punctuation\">,</span> <span class=\"token string\">\"World\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A=%s=,B=%s=\\n\"</span><span class=\"token punctuation\">,</span>A<span class=\"token punctuation\">,</span>B<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">strncpy1</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> <span class=\"token string\">\"你 好\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">strncpy1</span><span class=\"token punctuation\">(</span>B<span class=\"token punctuation\">,</span> <span class=\"token string\">\"世 界\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">strcat1</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span>B<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">strncat1</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> B<span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A=%s=,B=%s=\\n\"</span><span class=\"token punctuation\">,</span>A<span class=\"token punctuation\">,</span>B<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token number\">0</span></span></span>\n\t<span class=\"token keyword\">char</span> X<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> c <span class=\"token operator\">=</span> <span class=\"token char\">'b'</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">MEMSET</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">STRCPY</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> <span class=\"token string\">\"ksdkkbdeefb\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">STRCHR</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> <span class=\"token char\">'1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-----------------\\n%s\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">STRCHR</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> <span class=\"token char\">'1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n--------------------\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">strrchr</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> <span class=\"token char\">'s'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n%s\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">STRRCHR</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> <span class=\"token char\">'s'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token number\">0</span></span></span>\n\t<span class=\"token keyword\">char</span> str1<span class=\"token punctuation\">[</span><span class=\"token number\">15</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>str2<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">MEMSET</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">MEMSET</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">STRCPY</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">,</span> <span class=\"token string\">\"ABCdd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">STRCPY</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">,</span> <span class=\"token string\">\"ABCddee\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str1?str2=.%d.\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">,</span> str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str1?str2=.%d.\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">STRCMP</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">,</span> str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str1?str2=.%d.\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">STRNCMP</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">,</span> str2<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str1?str2=.%d.\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">STRNCMP</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">,</span> str2<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ToUpper</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"=%s=\\n\"</span><span class=\"token punctuation\">,</span>str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d,%d,%d,%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">IsUpper</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">IsDigit</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">IsLower</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">IsASCLL</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d,\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">IsDigit</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"==================\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ToLower</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d,%d,%d,%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">IsUpper</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">IsDigit</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">IsLower</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">IsASCLL</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">IsDigit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1123545998877445566332211\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token number\">0</span></span></span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">strstr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"111222333\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"222\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">STRSTR</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"111222333\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"222\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">strstr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"111222333\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"333\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">STRSTR</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"111222333\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"333\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">strstr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"11122233e3\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"eeee\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">STRSTR</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"11122233e3\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"eeee\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token number\">0</span></span></span>\n<span class=\"token comment\">/*测试XML*/</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">st_girl</span> beautygirl<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">st_girl</span><span class=\"token operator\">*</span>  beauty <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>beautygirl<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>beauty<span class=\"token operator\">-></span>name<span class=\"token punctuation\">,</span> <span class=\"token string\">\"西施\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tbeauty<span class=\"token operator\">-></span>age <span class=\"token operator\">=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">;</span>\n\tbeauty<span class=\"token operator\">-></span>height <span class=\"token operator\">=</span> <span class=\"token number\">168</span><span class=\"token punctuation\">;</span>\n\tbeauty<span class=\"token operator\">-></span>weight <span class=\"token operator\">=</span> <span class=\"token number\">48.5</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>beauty<span class=\"token operator\">-></span>stature<span class=\"token punctuation\">,</span> <span class=\"token string\">\"火辣\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>beauty<span class=\"token operator\">-></span>facevalue<span class=\"token punctuation\">,</span> <span class=\"token string\">\"漂亮\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> str<span class=\"token punctuation\">[</span><span class=\"token number\">255</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span><span class=\"token string\">\"&lt;name>%s&lt;/name>\"</span>\t\t\t\t\t\t\t\\\n\t\t\t\t\t\t \t<span class=\"token string\">\"&lt;age>%d&lt;/age>\"</span>\t\t\t\t\t\t\t\t\\\n\t\t\t\t\t\t \t<span class=\"token string\">\"&lt;height>%d&lt;/height>\"</span>\t\t\t\t\t\\\n\t\t\t\t\t\t\t<span class=\"token string\">\"&lt;weight>%lf&lt;/weight>\"</span>\t\t\t\t\\\n\t\t\t\t\t\t\t<span class=\"token string\">\"&lt;stature>%s&lt;/stature>\"</span>\t\t\t\t\\\n\t\t\t\t\t\t\t<span class=\"token string\">\"&lt;facevalue>%s&lt;/facevalue>\"</span>\t<span class=\"token punctuation\">,</span>\t\n\t\t\t\t\t\t\t<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>beauty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> \n\t\t\t\t\t\t\t<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>beauty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">,</span> \n\t\t\t\t\t\t\t<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>beauty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">,</span> \n\t\t\t\t\t\t\t<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>beauty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>weight<span class=\"token punctuation\">,</span> \n\t\t\t\t\t\t\t<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>beauty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>stature<span class=\"token punctuation\">,</span> \n\t\t\t\t\t\t\t<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>beauty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>facevalue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> str1<span class=\"token punctuation\">[</span><span class=\"token number\">50</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">MEMSET</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">GetXMLBuffer_Str</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> str1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"=%s=\\n\"</span><span class=\"token punctuation\">,</span> str1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">MEMSET</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">GetXMLBuffer_Str</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token string\">\"stature\"</span><span class=\"token punctuation\">,</span> str1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"=%s=\\n\"</span><span class=\"token punctuation\">,</span> str1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">MEMSET</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">GetXMLBuffer_Str</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token string\">\"facevalue\"</span><span class=\"token punctuation\">,</span> str1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"=%s=\\n\"</span><span class=\"token punctuation\">,</span> str1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> age<span class=\"token punctuation\">,</span>height<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">double</span> dd<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">GetXMLBuffer_Int</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">GetXMLBuffer_Int</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token string\">\"height\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\n\t<span class=\"token function\">GetXMLBuffer_Double</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token string\">\"weight\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>dd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"=age=%d,height=%d=,weight=%lf\\n\"</span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">,</span> dd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token number\">0</span>\t</span></span>\n\t<span class=\"token class-name\">time_t</span> t<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> str<span class=\"token punctuation\">[</span><span class=\"token number\">120</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">MEMSET</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tt <span class=\"token operator\">=</span> <span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%ld\\n\"</span><span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\n\t<span class=\"token function\">TIMETOSTR</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"datetime=%s\\n\"</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">STRTOTIME</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"t=%ld\\n\"</span><span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> str1<span class=\"token punctuation\">[</span><span class=\"token number\">30</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">MEMSET</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n\n\t<span class=\"token keyword\">char</span> out_time<span class=\"token punctuation\">[</span><span class=\"token number\">30</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">MEMSET</span><span class=\"token punctuation\">(</span>out_time<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>out_time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">LOCALTIME</span><span class=\"token punctuation\">(</span>out_time<span class=\"token punctuation\">,</span> <span class=\"token string\">\"yyyy-mm-dd hh24:mi:ss\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"out_time=%s\\n\"</span><span class=\"token punctuation\">,</span> out_time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">LOCALTIME</span><span class=\"token punctuation\">(</span>out_time<span class=\"token punctuation\">,</span> <span class=\"token string\">\"yyyymmddhh24miss\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"out_time=%s\\n\"</span><span class=\"token punctuation\">,</span> out_time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">LOCALTIME</span><span class=\"token punctuation\">(</span>out_time<span class=\"token punctuation\">,</span> <span class=\"token string\">\"yyyy-mm-dd\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"out_time=%s\\n\"</span><span class=\"token punctuation\">,</span> out_time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">LOCALTIME</span><span class=\"token punctuation\">(</span>out_time<span class=\"token punctuation\">,</span> <span class=\"token string\">\"yyyymmdd\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"out_time=%s\\n\"</span><span class=\"token punctuation\">,</span> out_time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">LOCALTIME</span><span class=\"token punctuation\">(</span>out_time<span class=\"token punctuation\">,</span> <span class=\"token string\">\"hh24:mi:ss\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"out_time=%s\\n\"</span><span class=\"token punctuation\">,</span> out_time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"封装的一些库函数\"><a href=\"#封装的一些库函数\" class=\"headerlink\" title=\"封装的一些库函数\"></a>封装的一些库函数</h1><h2 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h2><p>学习了B站大佬的 <code>http://www.freecplus.net/</code> 网站，自己动手封装了一些库函数</p>\n<p>头文件： _pub.h</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;time.h></span></span>\n\n<span class=\"token comment\">// 求绝对值的函数</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">ABS</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t<span class=\"token comment\">//int求绝对值</span>\n<span class=\"token keyword\">long</span> <span class=\"token function\">LABS</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//long求绝对值</span>\n\n<span class=\"token comment\">// char to int</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">CTOI</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//字符转化为数字</span>\n\n<span class=\"token comment\">// pow</span>\n<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token function\">POW</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//求幂</span>\n\n<span class=\"token comment\">// nptr to int </span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">ISSPACE</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">ATOI</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> nptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 把字符串转化为int</span>\n<span class=\"token keyword\">long</span> <span class=\"token function\">ATOL</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> nptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//把字符串转化为long</span>\n<span class=\"token keyword\">double</span> <span class=\"token function\">ATOD</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> nptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//字符串操作一系列函数</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">ISALPHA</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//若ch是字母字符'a-z'或者'A-Z' 返回非0值，否则返回0</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">ISALNUM</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//若ch是字母字符'a-z', 'A-Z' 或者数字字符'0-9' 返回非0值，否则返回0</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">ISDIGIT</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//若ch是数字'0-9' 返回非0值，否则返回0</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">ISLOWER</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//若ch是小写字母'a-z' 返回非0值，否则返回0</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">ISUPPER</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//若ch是大写字母'A-Z' 返回非0值  否则返回0</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">TOLOWER</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//若ch是大写字母'A-Z' 转化为对应小写字母 返回其ASCALL码</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">TOUPPER</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//若ch是小写字母'a-z' 转化为对应大写字母 返回其ASCALL码</span>\n\n<span class=\"token comment\">//浮点数的一系列函数</span>\n<span class=\"token keyword\">double</span> <span class=\"token function\">FABS</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">double</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 求双精度实数x的绝对值</span>\n<span class=\"token keyword\">double</span> <span class=\"token function\">ROUND</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">double</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// double四舍五入</span>\n<span class=\"token keyword\">double</span> <span class=\"token function\">CEIL</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">double</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// double向上取整数</span>\n<span class=\"token keyword\">double</span> <span class=\"token function\">FLOOR</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">double</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// double向下取整数</span>\n<span class=\"token comment\">//把双精度val分解成整数部分和小数部分，整数部分存放在ip所指的变量中，返回小数部分</span>\n<span class=\"token keyword\">double</span> <span class=\"token function\">MODF</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> val<span class=\"token punctuation\">,</span><span class=\"token keyword\">double</span> <span class=\"token operator\">*</span>ip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/***字符串一系列函数***/</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token class-name\">size_t</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">MEMSET</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> str<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> index<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//字符串置位函数</span>\n<span class=\"token class-name\">size_t</span> <span class=\"token function\">STRLEN</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span>  str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// 实现strlen函数的功能</span>\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">STRCPY</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> dest<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 实现strcpy函数的功能，下同。</span>\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">STRNCPY</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> dest<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> src<span class=\"token punctuation\">,</span><span class=\"token class-name\">size_t</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">STRCAT</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> dest<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">STRNCAT</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> dest<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> src<span class=\"token punctuation\">,</span><span class=\"token class-name\">size_t</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">STRCHR</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">STRRCHR</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 字符串比较函数</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">STRCMP</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">STRNCMP</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> str2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token class-name\">size_t</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 判断字符串</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ToUpper</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//小写字母转大写 忽略其他字符</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ToLower</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//大写字母转小写 忽略其他字符</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">IsDigit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//判断内容是否全是数字 1-是 0-不是</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">IsUpper</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//判断内容是否全是大写字母 1-是 0-不是</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">IsLower</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//判断字符是否全是小写字母 1-是 0-不是</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">IsASCLL</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//判断是否全是ASCLL字符 1-是 0-不是</span>\n<span class=\"token comment\">// KMP算法重写快速匹配 -- 暂时实现的是暴力破解BF算法</span>\n<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> <span class=\"token function\">STRSTR</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> str1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n\n<span class=\"token comment\">//********************************XML解析**************************************</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">GetXMLBuffer_Int</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>in_XMLBuffer<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>in_FieldName<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>out_Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">GetXMLBuffer_Str</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>in_XMLBuffer<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>in_FieldName<span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>out_Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">GetXMLBuffer_Double</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>in_XMLBuffer<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>in_FieldName<span class=\"token punctuation\">,</span><span class=\"token keyword\">double</span> <span class=\"token operator\">*</span>out_Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*********************************时间转换**************************************/</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">TIMETOSTR</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token class-name\">time_t</span> ti<span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>strtime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">//把整数的时间转换为字符串格式的时间</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">STRTOTIME</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>strtime<span class=\"token punctuation\">,</span><span class=\"token class-name\">time_t</span> <span class=\"token operator\">*</span>ti<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//把字符串格式的时间转换为整数的时间</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">LOCALTIME</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>out_stime<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>in_fmt<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> in_interval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//获取操作系统的时间</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>源文件： _pub.c</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"_pub.h\"</span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\"><span class=\"token constant\">NULL</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">NULL</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n\n\n<span class=\"token comment\">// ABS</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">ABS</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> ret<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> \n\t\tret <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">else</span> \n\t\tret <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> i<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">long</span> <span class=\"token function\">LABS</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">long</span> ret<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\tret <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">else</span>\n\t\tret <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> i<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// char to int</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">CTOI</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> c<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">&lt;</span> <span class=\"token number\">48</span> <span class=\"token operator\">&amp;&amp;</span> c <span class=\"token operator\">></span> <span class=\"token number\">57</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> c <span class=\"token operator\">-</span> <span class=\"token number\">48</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// POW</span>\n<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span>  <span class=\"token function\">POW</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">long</span> result <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> base <span class=\"token operator\">=</span> x<span class=\"token punctuation\">,</span> index <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t\tresult <span class=\"token operator\">*=</span> base<span class=\"token punctuation\">;</span>\n\t\tbase <span class=\"token operator\">*=</span> base<span class=\"token punctuation\">;</span>\n\t\tindex <span class=\"token operator\">/=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//判断是否有空格</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">ISSPACE</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ch <span class=\"token operator\">==</span> <span class=\"token char\">' '</span> <span class=\"token operator\">||</span> ch <span class=\"token operator\">==</span> <span class=\"token char\">'\\t'</span> <span class=\"token operator\">||</span> ch <span class=\"token operator\">==</span> <span class=\"token char\">'\\n'</span> <span class=\"token operator\">||</span> ch <span class=\"token operator\">==</span> <span class=\"token char\">'\\f'</span> <span class=\"token operator\">||</span> ch <span class=\"token operator\">==</span> <span class=\"token char\">'\\v'</span> <span class=\"token operator\">||</span> ch <span class=\"token operator\">==</span> <span class=\"token char\">'\\r'</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n\n<span class=\"token comment\">/************* ATOI &amp;&amp; ATOL*************************/</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">ATOI</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>nptr<span class=\"token punctuation\">)</span>\t<span class=\"token comment\">// string to int</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">char</span> sign<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> sign_1 <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>nptr<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> nValue <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">ISSPACE</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>nptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\tnptr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//去空格</span>\n\n\tsign <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>nptr<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">ISDIGIT</span><span class=\"token punctuation\">(</span>sign<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\tnptr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">ISDIGIT</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>nptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\tnValue <span class=\"token operator\">=</span> <span class=\"token number\">10</span> <span class=\"token operator\">*</span> nValue <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>nptr <span class=\"token operator\">-</span> <span class=\"token char\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tnptr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token keyword\">return</span> sign_1 <span class=\"token operator\">==</span> <span class=\"token char\">'-'</span><span class=\"token operator\">?</span> <span class=\"token operator\">-</span>nValue<span class=\"token operator\">:</span>nValue<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">long</span> <span class=\"token function\">ATOL</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> nptr<span class=\"token punctuation\">)</span>\t<span class=\"token comment\">// string to long</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">char</span> sign<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> sign_1 <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>nptr<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">long</span> nValue <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">ISSPACE</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>nptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\tnptr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//去空格</span>\n\n\tsign <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>nptr<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">ISDIGIT</span><span class=\"token punctuation\">(</span>sign<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\tnptr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">ISDIGIT</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>nptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\tnValue <span class=\"token operator\">=</span> <span class=\"token number\">10</span> <span class=\"token operator\">*</span> nValue <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>nptr <span class=\"token operator\">-</span> <span class=\"token char\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tnptr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token keyword\">return</span> sign_1 <span class=\"token operator\">==</span> <span class=\"token char\">'-'</span><span class=\"token operator\">?</span> <span class=\"token operator\">-</span>nValue<span class=\"token operator\">:</span>nValue<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">double</span> <span class=\"token function\">ATOD</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> nptr<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">char</span> sign<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> point <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> sign_1 <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>nptr<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> nValue <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">ISSPACE</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>nptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\tnptr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//去空格</span>\n\n\tsign <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>nptr<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">ISDIGIT</span><span class=\"token punctuation\">(</span>sign<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> sign <span class=\"token operator\">!=</span> <span class=\"token char\">'.'</span><span class=\"token punctuation\">)</span>\n\t\tnptr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">ISDIGIT</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>nptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>sign <span class=\"token operator\">==</span> <span class=\"token char\">'.'</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\tnptr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\tpoint<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\tnValue <span class=\"token operator\">=</span> <span class=\"token function\">POW</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span>point<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> nValue <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>nptr <span class=\"token operator\">-</span><span class=\"token char\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\tnValue <span class=\"token operator\">=</span> <span class=\"token number\">10</span> <span class=\"token operator\">*</span> nValue <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>nptr <span class=\"token operator\">-</span> <span class=\"token char\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tnptr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> sign_1 <span class=\"token operator\">==</span> <span class=\"token char\">'-'</span><span class=\"token operator\">?</span> <span class=\"token operator\">-</span>nValue<span class=\"token operator\">:</span>nValue<span class=\"token punctuation\">;</span>\t\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">/******************字符操作一些列函数****************/</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">ISALPHA</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> ch<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ch <span class=\"token operator\">>=</span> <span class=\"token number\">97</span> <span class=\"token operator\">&amp;&amp;</span> ch <span class=\"token operator\">&lt;=</span> <span class=\"token number\">122</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> ch <span class=\"token operator\">-</span> <span class=\"token number\">96</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ch <span class=\"token operator\">>=</span> <span class=\"token number\">65</span> <span class=\"token operator\">&amp;&amp;</span> ch <span class=\"token operator\">&lt;=</span> <span class=\"token number\">90</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> ch <span class=\"token operator\">-</span> <span class=\"token number\">64</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">ISALNUM</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> ch<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ch <span class=\"token operator\">>=</span> <span class=\"token number\">97</span> <span class=\"token operator\">&amp;&amp;</span> ch <span class=\"token operator\">&lt;=</span> <span class=\"token number\">122</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> ch <span class=\"token operator\">-</span> <span class=\"token number\">96</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ch <span class=\"token operator\">>=</span> <span class=\"token number\">65</span> <span class=\"token operator\">&amp;&amp;</span> ch <span class=\"token operator\">&lt;=</span> <span class=\"token number\">90</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> ch <span class=\"token operator\">-</span> <span class=\"token number\">64</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ch <span class=\"token operator\">>=</span> <span class=\"token number\">48</span> <span class=\"token operator\">&amp;&amp;</span> ch <span class=\"token operator\">&lt;=</span> <span class=\"token number\">57</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> ch <span class=\"token operator\">-</span> <span class=\"token number\">47</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">ISDIGIT</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> ch<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ch <span class=\"token operator\">>=</span> <span class=\"token number\">48</span> <span class=\"token operator\">&amp;&amp;</span> ch <span class=\"token operator\">&lt;=</span> <span class=\"token number\">57</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> ch <span class=\"token operator\">-</span> <span class=\"token number\">47</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">ISLOWER</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> ch<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ch <span class=\"token operator\">>=</span> <span class=\"token number\">97</span> <span class=\"token operator\">&amp;&amp;</span> ch <span class=\"token operator\">&lt;=</span> <span class=\"token number\">122</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> ch <span class=\"token operator\">-</span> <span class=\"token number\">96</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">ISUPPER</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> ch<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ch <span class=\"token operator\">>=</span> <span class=\"token number\">65</span> <span class=\"token operator\">&amp;&amp;</span> ch <span class=\"token operator\">&lt;=</span> <span class=\"token number\">90</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> ch <span class=\"token operator\">-</span> <span class=\"token number\">64</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">TOLOWER</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> ch<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ch <span class=\"token operator\">>=</span> <span class=\"token number\">65</span> <span class=\"token operator\">&amp;&amp;</span> ch <span class=\"token operator\">&lt;=</span> <span class=\"token number\">90</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> ch <span class=\"token operator\">+</span> <span class=\"token number\">32</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">TOUPPER</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> ch<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ch <span class=\"token operator\">>=</span> <span class=\"token number\">97</span> <span class=\"token operator\">&amp;&amp;</span> ch <span class=\"token operator\">&lt;=</span> <span class=\"token number\">122</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> ch <span class=\"token operator\">-</span> <span class=\"token number\">32</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">/***************** 浮点数一系列函数***************/</span>\n<span class=\"token keyword\">double</span> <span class=\"token function\">FABS</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">double</span> x<span class=\"token punctuation\">)</span>\t<span class=\"token comment\">//求双精度实数x的绝对值</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">double</span> a <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\ta <span class=\"token operator\">*=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">double</span> <span class=\"token function\">ROUND</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">double</span> x<span class=\"token punctuation\">)</span><span class=\"token comment\">//double四舍五入</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">double</span> b <span class=\"token operator\">=</span> x <span class=\"token operator\">-</span> a<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">></span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span>\n\t\ta <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">double</span> <span class=\"token function\">CEIL</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">double</span> x<span class=\"token punctuation\">)</span>\t<span class=\"token comment\">//double向上取整数</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n\ta <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">double</span> <span class=\"token function\">FLOOR</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">double</span> x<span class=\"token punctuation\">)</span>\t<span class=\"token comment\">// double向下取整数</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">double</span> <span class=\"token function\">MODF</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> val<span class=\"token punctuation\">,</span><span class=\"token keyword\">double</span> <span class=\"token operator\">*</span>ip<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// 把双精度val分解成整数部分和小数部分，整数部分存放在ip所指的变量中，返回小数部分</span>\n\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">double</span> d <span class=\"token operator\">=</span> val <span class=\"token operator\">-</span> a<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">double</span> da <span class=\"token operator\">=</span> val <span class=\"token operator\">-</span> d<span class=\"token punctuation\">;</span>\n\t<span class=\"token operator\">*</span>ip <span class=\"token operator\">=</span> da<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> d<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">/***************字符串一系列函数*********************/</span>\n<span class=\"token class-name\">size_t</span> <span class=\"token function\">STRLEN</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> str<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> str1 <span class=\"token operator\">=</span> str<span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">size_t</span> len <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>str1 <span class=\"token operator\">!=</span> <span class=\"token char\">'\\0'</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>str1 <span class=\"token operator\">!=</span> <span class=\"token char\">'\\n'</span><span class=\"token punctuation\">)</span>\n\t\t\tstr1<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\tlen <span class=\"token operator\">=</span> str1 <span class=\"token operator\">-</span> str<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> len<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//置位函数</span>\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> <span class=\"token function\">MEMSET</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> str<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> index<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> size<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> str <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\t\t\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>size<span class=\"token operator\">--</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token operator\">*</span>str<span class=\"token operator\">++</span> <span class=\"token operator\">=</span> index<span class=\"token punctuation\">;</span>\t\n\t<span class=\"token keyword\">return</span> str<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//修改字符串指针指向</span>\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">STRCPY</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> dest<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> src<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token function\">STRLEN</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\tdest<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> src<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\t\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> dest<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">STRNCPY</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> dest<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> src<span class=\"token punctuation\">,</span><span class=\"token class-name\">size_t</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\tdest<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> src<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> dest<span class=\"token punctuation\">;</span>\t\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 字符串拼接</span>\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">STRCAT</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> dest<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> src<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> str1 <span class=\"token operator\">=</span> dest<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">long</span> len <span class=\"token operator\">=</span> <span class=\"token function\">STRLEN</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">long</span> len_d <span class=\"token operator\">=</span> <span class=\"token function\">STRLEN</span><span class=\"token punctuation\">(</span>dest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\tstr1<span class=\"token punctuation\">[</span>len_d<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> src<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\tlen_d<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> str1<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">STRNCAT</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> dest<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> src<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token class-name\">size_t</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> str1 <span class=\"token operator\">=</span> dest<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">long</span> len_d <span class=\"token operator\">=</span> <span class=\"token function\">STRLEN</span><span class=\"token punctuation\">(</span>dest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\tstr1<span class=\"token punctuation\">[</span>len_d<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> src<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\tlen_d<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> str1<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">STRCHR</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> c<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t\n\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> sb <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> s<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token function\">STRLEN</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>sb <span class=\"token operator\">==</span> c<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\t\n\t\tsb<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\ti<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> len<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"(null)\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> sb<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">STRRCHR</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> c<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token function\">STRLEN</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> sb <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>s<span class=\"token operator\">+</span>len<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>sb <span class=\"token operator\">==</span> c<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\tsb<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\t\ti<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> len<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"(null)\"</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">return</span> sb<span class=\"token punctuation\">;</span>\n\t\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//====================字符串比较函数=====================</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">STRCMP</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str2<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token class-name\">size_t</span> len <span class=\"token operator\">=</span> <span class=\"token function\">STRLEN</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token function\">STRLEN</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token function\">STRLEN</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">STRLEN</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>len<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>str1 <span class=\"token operator\">!=</span> <span class=\"token operator\">*</span>str2<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>str1<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tstr1<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\tstr2<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">STRNCMP</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str2<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>str1 <span class=\"token operator\">!=</span> <span class=\"token operator\">*</span>str2<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>str1<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tstr1<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\tstr2<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 判断字符串</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ToUpper</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str<span class=\"token punctuation\">)</span>\t<span class=\"token comment\">//小写字母转大写 忽略其他字符</span>\n<span class=\"token punctuation\">&#123;</span>\t\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>str <span class=\"token operator\">!=</span> <span class=\"token char\">'\\0'</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>str <span class=\"token operator\">>=</span> <span class=\"token number\">97</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">*</span>str <span class=\"token operator\">&lt;=</span> <span class=\"token number\">122</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token operator\">*</span>str <span class=\"token operator\">-=</span> <span class=\"token number\">32</span><span class=\"token punctuation\">;</span>\n\t\tstr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t\t\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ToLower</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str<span class=\"token punctuation\">)</span>\t<span class=\"token comment\">//大写字母转小写 忽略其他字符</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">;</span> <span class=\"token operator\">*</span>str <span class=\"token operator\">!=</span> <span class=\"token char\">'\\0'</span><span class=\"token punctuation\">;</span> str<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>str <span class=\"token operator\">>=</span> <span class=\"token number\">65</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">*</span>str <span class=\"token operator\">&lt;=</span> <span class=\"token number\">90</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token operator\">*</span>str <span class=\"token operator\">+=</span> <span class=\"token number\">32</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">IsDigit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str<span class=\"token punctuation\">)</span>\t<span class=\"token comment\">//判断内容是否全是数字 1-是 0-不是</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> flag <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">;</span> <span class=\"token operator\">*</span>str <span class=\"token operator\">!=</span> <span class=\"token char\">'\\0'</span><span class=\"token punctuation\">;</span> str<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>str <span class=\"token operator\">>=</span> <span class=\"token number\">48</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">*</span>str <span class=\"token operator\">&lt;=</span> <span class=\"token number\">57</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\tflag <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\tflag <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\t\n\t<span class=\"token keyword\">return</span> flag<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">IsUpper</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str<span class=\"token punctuation\">)</span>\t<span class=\"token comment\">//判断内容是否全是大写字母 1-是 0-不是</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> flag <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">;</span> <span class=\"token operator\">*</span>str <span class=\"token operator\">!=</span> <span class=\"token char\">'\\0'</span><span class=\"token punctuation\">;</span> str<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>str <span class=\"token operator\">>=</span> <span class=\"token number\">65</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">*</span>str <span class=\"token operator\">&lt;=</span> <span class=\"token number\">90</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\tflag <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\tflag <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> flag<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">IsLower</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str<span class=\"token punctuation\">)</span>\t<span class=\"token comment\">//判断字符是否全是小写字母 1-是 0-不是</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> flag <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">;</span> <span class=\"token operator\">*</span>str <span class=\"token operator\">!=</span> <span class=\"token char\">'\\0'</span><span class=\"token punctuation\">;</span> str<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>str <span class=\"token operator\">>=</span> <span class=\"token number\">97</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">*</span>str <span class=\"token operator\">&lt;=</span> <span class=\"token number\">122</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\tflag <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\tflag <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> flag<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> \n<span class=\"token keyword\">int</span> <span class=\"token function\">IsASCLL</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str<span class=\"token punctuation\">)</span> <span class=\"token comment\">//判断是否全是ASCLL字符 1-是 0-不是</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> flag <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">;</span> <span class=\"token operator\">*</span>str <span class=\"token operator\">!=</span> <span class=\"token char\">'\\0'</span><span class=\"token punctuation\">;</span> str<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>str <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">*</span>str <span class=\"token operator\">&lt;=</span> <span class=\"token number\">127</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\tflag <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\tflag <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> \n\t\t<span class=\"token punctuation\">&#125;</span> \n\t<span class=\"token punctuation\">&#125;</span>\t\n\t<span class=\"token keyword\">return</span> flag<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 暴力算法 -- BF</span>\n<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> <span class=\"token function\">STRSTR</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> str1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> str2<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> s1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> str1<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> s2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> str2<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> current <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> str1<span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>current<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\ts1 <span class=\"token operator\">=</span> current<span class=\"token punctuation\">;</span>\n\t\t\ts2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>str2<span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>s1 <span class=\"token operator\">!=</span> <span class=\"token char\">'\\0'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>s2 <span class=\"token operator\">!=</span> <span class=\"token char\">'\\0'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>s1 <span class=\"token operator\">==</span> <span class=\"token operator\">*</span>s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\ts1<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\ts2<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>s2 <span class=\"token operator\">==</span> <span class=\"token char\">'\\0'</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token keyword\">return</span> current<span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>s1 <span class=\"token operator\">==</span> <span class=\"token char\">'\\0'</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t\t\tcurrent<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\t\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">/*****************XML  解析*************************/</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">GetXMLBuffer_Str</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> in_XMLBuffer<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> in_FieldName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> out_Value<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>out_Value <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 要存的地址不存在，即out_Value指针是空指针</span>\n\t<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> start <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> end <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> startStr<span class=\"token punctuation\">[</span><span class=\"token number\">50</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> endStr<span class=\"token punctuation\">[</span><span class=\"token number\">50</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">int</span> len_Field <span class=\"token operator\">=</span> <span class=\"token function\">STRLEN</span><span class=\"token punctuation\">(</span>in_FieldName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">MEMSET</span><span class=\"token punctuation\">(</span>startStr<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>startStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">MEMSET</span><span class=\"token punctuation\">(</span>endStr\t <span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>endStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">STRCPY</span><span class=\"token punctuation\">(</span>startStr<span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">STRCAT</span><span class=\"token punctuation\">(</span>startStr<span class=\"token punctuation\">,</span> in_FieldName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">STRCAT</span><span class=\"token punctuation\">(</span>startStr<span class=\"token punctuation\">,</span> <span class=\"token string\">\">\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">STRCPY</span><span class=\"token punctuation\">(</span>endStr<span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">STRCAT</span><span class=\"token punctuation\">(</span>endStr<span class=\"token punctuation\">,</span> in_FieldName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">STRCAT</span><span class=\"token punctuation\">(</span>endStr<span class=\"token punctuation\">,</span> <span class=\"token string\">\">\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">MEMSET</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">MEMSET</span><span class=\"token punctuation\">(</span>end<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tstart <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">STRSTR</span><span class=\"token punctuation\">(</span>in_XMLBuffer<span class=\"token punctuation\">,</span> startStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>start <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\tend\t<span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">STRSTR</span><span class=\"token punctuation\">(</span>in_XMLBuffer<span class=\"token punctuation\">,</span> endStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>start <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//未找到匹配字符串</span>\n\t<span class=\"token keyword\">int</span> length_Str <span class=\"token operator\">=</span> <span class=\"token function\">STRLEN</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token function\">STRLEN</span><span class=\"token punctuation\">(</span>end<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">2</span> <span class=\"token operator\">-</span> len_Field<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">STRNCPY</span><span class=\"token punctuation\">(</span>out_Value<span class=\"token punctuation\">,</span> start<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token operator\">+</span>len_Field<span class=\"token punctuation\">,</span> length_Str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">GetXMLBuffer_Int</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>in_XMLBuffer<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>in_FieldName<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>out_Value<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">GetXMLBuffer_Str</span><span class=\"token punctuation\">(</span>in_XMLBuffer<span class=\"token punctuation\">,</span> in_FieldName<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> out_Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token operator\">*</span>out_Value <span class=\"token operator\">=</span> <span class=\"token function\">ATOI</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>out_Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">GetXMLBuffer_Double</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>in_XMLBuffer<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>in_FieldName<span class=\"token punctuation\">,</span><span class=\"token keyword\">double</span> <span class=\"token operator\">*</span>out_Value<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">GetXMLBuffer_Str</span><span class=\"token punctuation\">(</span>in_XMLBuffer<span class=\"token punctuation\">,</span> in_FieldName<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> out_Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token operator\">*</span>out_Value <span class=\"token operator\">=</span> <span class=\"token function\">ATOD</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>out_Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">/*********************************时间函数***************************************/</span>\n<span class=\"token comment\">/**\n * 把整数的时间转换为字符串格式的时间，\n * 格式如：\"2019-02-08 12:05:08\"，\n * 如果转换成功函数返回1，失败返回0\n * */</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">TIMETOSTR</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token class-name\">time_t</span> ti<span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>strtime<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">tm</span><span class=\"token operator\">*</span> ptimer<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//C内置时间结构体</span>\n\tptimer <span class=\"token operator\">=</span> <span class=\"token function\">localtime</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ti<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token function\">MEMSET</span><span class=\"token punctuation\">(</span>strtime<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>strtime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>strtime<span class=\"token punctuation\">,</span><span class=\"token string\">\"%d-%d-%d %d:%d:%d\"</span><span class=\"token punctuation\">,</span> \\\n\t\t\t\t\t\t\tptimer<span class=\"token operator\">-></span>tm_year<span class=\"token operator\">+</span><span class=\"token number\">1900</span><span class=\"token punctuation\">,</span> \\\n\t\t\t\t\t\t\tptimer<span class=\"token operator\">-></span>tm_mon<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> \\\n\t\t\t\t\t\t\tptimer<span class=\"token operator\">-></span>tm_mday<span class=\"token punctuation\">,</span> \\\n\t\t\t\t\t\t\tptimer<span class=\"token operator\">-></span>tm_hour<span class=\"token punctuation\">,</span> \\\n\t\t\t\t\t\t\tptimer<span class=\"token operator\">-></span>tm_min<span class=\"token punctuation\">,</span> \\\n\t\t\t\t\t\t\tptimer<span class=\"token operator\">-></span>tm_sec <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">/**\n * 字符串格式的时间转换为整数的时间\n * 写的很烂\n * */</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">STRTOTIME</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>strtime<span class=\"token punctuation\">,</span><span class=\"token class-name\">time_t</span> <span class=\"token operator\">*</span>ti<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> str <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> strtime<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> syear<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> smon<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> sday<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> shour<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> smin<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> ssec<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">MEMSET</span><span class=\"token punctuation\">(</span>syear<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>syear<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">MEMSET</span><span class=\"token punctuation\">(</span>smon<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>smon<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">MEMSET</span><span class=\"token punctuation\">(</span>sday<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>sday<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">MEMSET</span><span class=\"token punctuation\">(</span>shour<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>shour<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">MEMSET</span><span class=\"token punctuation\">(</span>smin<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>smin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">MEMSET</span><span class=\"token punctuation\">(</span>ssec<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>ssec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token class-name\">size_t</span> len<span class=\"token punctuation\">,</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tlen <span class=\"token operator\">=</span> <span class=\"token function\">STRLEN</span><span class=\"token punctuation\">(</span>strtime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> index<span class=\"token punctuation\">,</span>j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\t\n\t\tsyear<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> strtime<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>strtime<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">'-'</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\tsyear<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token char\">'\\0'</span><span class=\"token punctuation\">;</span>\n\t\t  index <span class=\"token operator\">=</span> i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> index<span class=\"token punctuation\">,</span>j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\t\n\t\tsmon<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> strtime<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>strtime<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">'-'</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\tsmon<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token char\">'\\0'</span><span class=\"token punctuation\">;</span>\n\t\t  index <span class=\"token operator\">=</span> i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> index<span class=\"token punctuation\">,</span>j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\t\n\t\tsday<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> strtime<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>strtime<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">' '</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\tsday<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token char\">'\\0'</span><span class=\"token punctuation\">;</span>\n\t\t  index <span class=\"token operator\">=</span> i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> index<span class=\"token punctuation\">,</span>j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\t\n\t\tshour<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> strtime<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>strtime<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">':'</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\tshour<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token char\">'\\0'</span><span class=\"token punctuation\">;</span>\n\t\t  index <span class=\"token operator\">=</span> i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> index<span class=\"token punctuation\">,</span>j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\t\n\t\tsmin<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> strtime<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>strtime<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">':'</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\tsmin<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token char\">'\\0'</span><span class=\"token punctuation\">;</span>\n\t\t  index <span class=\"token operator\">=</span> i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> index<span class=\"token punctuation\">,</span>j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\tssec<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> strtime<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n \t\n\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">tm</span> timer<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">MEMSET</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>timer<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ttimer<span class=\"token punctuation\">.</span>tm_year <span class=\"token operator\">=</span> <span class=\"token function\">ATOI</span><span class=\"token punctuation\">(</span>syear<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1900</span><span class=\"token punctuation\">;</span>\n\ttimer<span class=\"token punctuation\">.</span>tm_mon <span class=\"token operator\">=</span> <span class=\"token function\">ATOI</span><span class=\"token punctuation\">(</span>smon<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\ttimer<span class=\"token punctuation\">.</span>tm_mday <span class=\"token operator\">=</span> <span class=\"token function\">ATOI</span><span class=\"token punctuation\">(</span>sday<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ttimer<span class=\"token punctuation\">.</span>tm_hour <span class=\"token operator\">=</span> <span class=\"token function\">ATOI</span><span class=\"token punctuation\">(</span>shour<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ttimer<span class=\"token punctuation\">.</span>tm_min <span class=\"token operator\">=</span> <span class=\"token function\">ATOI</span><span class=\"token punctuation\">(</span>smin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ttimer<span class=\"token punctuation\">.</span>tm_sec <span class=\"token operator\">=</span> <span class=\"token function\">ATOI</span><span class=\"token punctuation\">(</span>ssec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\n\t<span class=\"token operator\">*</span>ti <span class=\"token operator\">=</span> <span class=\"token function\">mktime</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">/**\n *\n *  获取操作系统当前的时间\n *\n * */</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">LOCALTIME</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>out_stime<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>in_fmt<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> in_interval<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token class-name\">time_t</span> timep<span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">tm</span><span class=\"token operator\">*</span> ptimer<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//C内置时间结构体</span>\n\ttimep <span class=\"token operator\">=</span> <span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>timep<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1000</span> <span class=\"token operator\">*</span> in_interval<span class=\"token punctuation\">;</span>\n\tptimer <span class=\"token operator\">=</span> <span class=\"token function\">localtime</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>timep<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">STRCMP</span><span class=\"token punctuation\">(</span>in_fmt<span class=\"token punctuation\">,</span> <span class=\"token string\">\"yyyy-mm-dd hh24:mi:ss\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>out_stime<span class=\"token punctuation\">,</span><span class=\"token string\">\"%d-%d-%d %d:%d:%d\"</span><span class=\"token punctuation\">,</span> \\\n\t\t\t\t\t\t\tptimer<span class=\"token operator\">-></span>tm_year<span class=\"token operator\">+</span><span class=\"token number\">1900</span><span class=\"token punctuation\">,</span> \\\n\t\t\t\t\t\t\tptimer<span class=\"token operator\">-></span>tm_mon<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> \\\n\t\t\t\t\t\t\tptimer<span class=\"token operator\">-></span>tm_mday<span class=\"token punctuation\">,</span> \\\n\t\t\t\t\t\t\tptimer<span class=\"token operator\">-></span>tm_hour<span class=\"token punctuation\">,</span> \\\n\t\t\t\t\t\t\tptimer<span class=\"token operator\">-></span>tm_min<span class=\"token punctuation\">,</span> \\\n\t\t\t\t\t\t\tptimer<span class=\"token operator\">-></span>tm_sec <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">STRCMP</span><span class=\"token punctuation\">(</span>in_fmt<span class=\"token punctuation\">,</span> <span class=\"token string\">\"yyyymmddhh24miss\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>out_stime<span class=\"token punctuation\">,</span><span class=\"token string\">\"%d%d%d%d%d%d\"</span><span class=\"token punctuation\">,</span> \\\n\t\t\t\t\t\t\tptimer<span class=\"token operator\">-></span>tm_year<span class=\"token operator\">+</span><span class=\"token number\">1900</span><span class=\"token punctuation\">,</span> \\\n\t\t\t\t\t\t\tptimer<span class=\"token operator\">-></span>tm_mon<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> \\\n\t\t\t\t\t\t\tptimer<span class=\"token operator\">-></span>tm_mday<span class=\"token punctuation\">,</span> \\\n\t\t\t\t\t\t\tptimer<span class=\"token operator\">-></span>tm_hour<span class=\"token punctuation\">,</span> \\\n\t\t\t\t\t\t\tptimer<span class=\"token operator\">-></span>tm_min<span class=\"token punctuation\">,</span> \\\n\t\t\t\t\t\t\tptimer<span class=\"token operator\">-></span>tm_sec <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">STRCMP</span><span class=\"token punctuation\">(</span>in_fmt<span class=\"token punctuation\">,</span> <span class=\"token string\">\"yyyy-mm-dd\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>out_stime<span class=\"token punctuation\">,</span><span class=\"token string\">\"%d-%d-%d\"</span><span class=\"token punctuation\">,</span> \\\n\t\t\t\t\t\t\tptimer<span class=\"token operator\">-></span>tm_year<span class=\"token operator\">+</span><span class=\"token number\">1900</span><span class=\"token punctuation\">,</span> \\\n\t\t\t\t\t\t\tptimer<span class=\"token operator\">-></span>tm_mon<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> \\\n\t\t\t\t\t\t\tptimer<span class=\"token operator\">-></span>tm_mday <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">STRCMP</span><span class=\"token punctuation\">(</span>in_fmt<span class=\"token punctuation\">,</span> <span class=\"token string\">\"yyyymmdd\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>out_stime<span class=\"token punctuation\">,</span><span class=\"token string\">\"%d%d%d\"</span><span class=\"token punctuation\">,</span> \\\n\t\t\t\t\t\t\tptimer<span class=\"token operator\">-></span>tm_year<span class=\"token operator\">+</span><span class=\"token number\">1900</span><span class=\"token punctuation\">,</span> \\\n\t\t\t\t\t\t\tptimer<span class=\"token operator\">-></span>tm_mon<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> \\\n\t\t\t\t\t\t\tptimer<span class=\"token operator\">-></span>tm_mday <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">STRCMP</span><span class=\"token punctuation\">(</span>in_fmt<span class=\"token punctuation\">,</span> <span class=\"token string\">\"hh24:mi:ss\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>out_stime<span class=\"token punctuation\">,</span><span class=\"token string\">\"%d:%d:%d\"</span><span class=\"token punctuation\">,</span> \\\n\t\t\t\t\t\t\tptimer<span class=\"token operator\">-></span>tm_hour<span class=\"token punctuation\">,</span> \\\n\t\t\t\t\t\t\tptimer<span class=\"token operator\">-></span>tm_min<span class=\"token punctuation\">,</span> \\\n\t\t\t\t\t\t\tptimer<span class=\"token operator\">-></span>tm_sec <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">STRCMP</span><span class=\"token punctuation\">(</span>in_fmt<span class=\"token punctuation\">,</span> <span class=\"token string\">\"hh24miss\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>out_stime<span class=\"token punctuation\">,</span><span class=\"token string\">\"%d%d%d\"</span><span class=\"token punctuation\">,</span> \\\n\t\t\t\t\t\t\tptimer<span class=\"token operator\">-></span>tm_hour<span class=\"token punctuation\">,</span> \\\n\t\t\t\t\t\t\tptimer<span class=\"token operator\">-></span>tm_min<span class=\"token punctuation\">,</span> \\\n\t\t\t\t\t\t\tptimer<span class=\"token operator\">-></span>tm_sec <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">STRCMP</span><span class=\"token punctuation\">(</span>in_fmt<span class=\"token punctuation\">,</span> <span class=\"token string\">\"hh24:mi\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>out_stime<span class=\"token punctuation\">,</span><span class=\"token string\">\"%d:%d\"</span><span class=\"token punctuation\">,</span> \\\n\t\t\t\t\t\t\tptimer<span class=\"token operator\">-></span>tm_hour<span class=\"token punctuation\">,</span> \\\n\t\t\t\t\t\t\tptimer<span class=\"token operator\">-></span>tm_min <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">STRCMP</span><span class=\"token punctuation\">(</span>in_fmt<span class=\"token punctuation\">,</span> <span class=\"token string\">\"hh24\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>out_stime<span class=\"token punctuation\">,</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> \\\n\t\t\t\t\t\t\tptimer<span class=\"token operator\">-></span>tm_hour <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">STRCMP</span><span class=\"token punctuation\">(</span>in_fmt<span class=\"token punctuation\">,</span> <span class=\"token string\">\"mi\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>out_stime<span class=\"token punctuation\">,</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> \n\t\t\t\t\t\t\tptimer<span class=\"token operator\">-></span>tm_sec <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\t\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>_pub : 封装的函数</p>\n<pre class=\"line-numbers language-.\" data-language=\".\"><code class=\"language-.\">1.\tABS, LABS -- 绝对值\n2.\tCTOI -- 字符转数字\n3.\tPOW -- 求幂值\n4.\tSTRLEN -- 求字符串长度  ××× 已删除合并到8\n5.\tATOI, ATOL -- 字符串转数字\n6.\tISALPHA, ISALNUM, ISDIGIT, ISLOWER, ISUPPER, TOLOWER, TOUPPER -- 字符操作的一系列函数\n7.\tFABS, ROUND, CEIL, FLOOR, MODF -- 浮点数一系列函数\n8.\tSTRLEN, STRCPY, STRNCPY, STRCAT, STRNCAT, STRCHR, STRRCHR -- 字符串一系列函数\n9.  STRCMP, STRNCMP -- 字符串比较函数\n10. ToUpper, ToLower, IsDigit, IsUpper, IsLower, IsASCLL -- 字符串判断函数\n11. STRSTR -- BF匹配子字符串\n12.\tGetXMLBuffer_Str, GetXMLBuffer_Int, GetXMLBuffer_Double\n13. 补充了修补了ATOI, ATOL, ATOD(不精确), ISSPACE 等函数\n14. TIMETOSTR, STRTOTIMR, LOCALTIME -- 时间操作函数<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>测试代码：test.c</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"_pub.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;time.h></span></span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">st_girl</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">51</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> height<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">double</span> weight<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> stature<span class=\"token punctuation\">[</span><span class=\"token number\">31</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> facevalue<span class=\"token punctuation\">[</span><span class=\"token number\">31</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token number\">0</span></span></span>\n\t<span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> in<span class=\"token punctuation\">,</span>out<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入要求值的数字\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%ld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\tout <span class=\"token operator\">=</span> <span class=\"token function\">ABS</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">else</span>\n\t\tout <span class=\"token operator\">=</span> <span class=\"token function\">LABS</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"out = %ld\\n\"</span><span class=\"token punctuation\">,</span>out<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token number\">0</span>\t</span></span>\n\t<span class=\"token keyword\">char</span> a<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入要转化的字符数字\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> bb <span class=\"token operator\">=</span> <span class=\"token function\">CTOI</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"out = %d\\n\"</span><span class=\"token punctuation\">,</span>bb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token number\">0</span></span></span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"5^5 = %lld\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">POW</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2^33 = %lld\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">POW</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">33</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token number\">0</span></span></span>\n\t<span class=\"token keyword\">char</span> aa<span class=\"token punctuation\">[</span><span class=\"token number\">30</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span>aa<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"len of aa = %d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">STRLEN</span><span class=\"token punctuation\">(</span>aa<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//printf(\"aa = %d\\n\",ATOI(aa));</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"aa = %ld\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">ATOL</span><span class=\"token punctuation\">(</span>aa<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token number\">0</span></span></span>\n\t<span class=\"token keyword\">char</span> a <span class=\"token operator\">=</span> <span class=\"token char\">'a'</span><span class=\"token punctuation\">,</span>B <span class=\"token operator\">=</span> <span class=\"token char\">'B'</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> <span class=\"token char\">'5'</span><span class=\"token punctuation\">,</span>e <span class=\"token operator\">=</span> <span class=\"token char\">'6'</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> d <span class=\"token operator\">=</span> <span class=\"token char\">'\\\\'</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d %d %d %d %c %c\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">ISALPHA</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">ISDIGIT</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">ISDIGIT</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">ISUPPER</span><span class=\"token punctuation\">(</span>B<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">ISALNUM</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">TOLOWER</span><span class=\"token punctuation\">(</span>B<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">TOUPPER</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token number\">0</span></span></span>\n\t<span class=\"token keyword\">double</span> i <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">64.54864</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">double</span> j <span class=\"token operator\">=</span> <span class=\"token function\">FABS</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i=%.5lf,j=%.5lf\\n\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">double</span> k <span class=\"token operator\">=</span> <span class=\"token number\">6.7</span><span class=\"token punctuation\">,</span>b <span class=\"token operator\">=</span> <span class=\"token number\">3.3</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lf\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">ROUND</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lf\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">ROUND</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lf,%lf\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">CEIL</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">FLOOR</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">double</span> z <span class=\"token operator\">=</span> <span class=\"token number\">1.3</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">double</span> <span class=\"token operator\">*</span>pz <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>z<span class=\"token punctuation\">;</span> \n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lf\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">MODF</span><span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">,</span>pz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lf\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>pz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token number\">0</span></span></span>\n\t<span class=\"token keyword\">char</span> str<span class=\"token punctuation\">[</span><span class=\"token number\">21</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lu\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">strlen1</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\n\t<span class=\"token keyword\">char</span> str1<span class=\"token punctuation\">[</span><span class=\"token number\">50</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>str2<span class=\"token punctuation\">[</span><span class=\"token number\">30</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">memset1</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">memset1</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">strcpy1</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">,</span> <span class=\"token string\">\"10000\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str1=%s=\\n\"</span><span class=\"token punctuation\">,</span> str1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">strcpy1</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">,</span> <span class=\"token string\">\"1008611\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str2=%s=\\n\"</span><span class=\"token punctuation\">,</span> str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">strcpy1</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">,</span> str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str1=%s=\\n\"</span><span class=\"token punctuation\">,</span>str1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----------------------\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">,</span>str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str1=%s=\\n\"</span><span class=\"token punctuation\">,</span>str1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token number\">0</span></span></span>\n\t<span class=\"token keyword\">char</span> A<span class=\"token punctuation\">[</span><span class=\"token number\">30</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>B<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">//置空很重要</span>\n\t<span class=\"token function\">memset1</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">memset1</span><span class=\"token punctuation\">(</span>B<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>B<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A=%s=,B=%s=\\n\"</span><span class=\"token punctuation\">,</span>A<span class=\"token punctuation\">,</span>B<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">strcpy1</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">strcpy1</span><span class=\"token punctuation\">(</span>B<span class=\"token punctuation\">,</span> <span class=\"token string\">\"World\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A=%s=,B=%s=\\n\"</span><span class=\"token punctuation\">,</span>A<span class=\"token punctuation\">,</span>B<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">strncpy1</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> <span class=\"token string\">\"你 好\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">strncpy1</span><span class=\"token punctuation\">(</span>B<span class=\"token punctuation\">,</span> <span class=\"token string\">\"世 界\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">strcat1</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span>B<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">strncat1</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> B<span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A=%s=,B=%s=\\n\"</span><span class=\"token punctuation\">,</span>A<span class=\"token punctuation\">,</span>B<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token number\">0</span></span></span>\n\t<span class=\"token keyword\">char</span> X<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> c <span class=\"token operator\">=</span> <span class=\"token char\">'b'</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">MEMSET</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">STRCPY</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> <span class=\"token string\">\"ksdkkbdeefb\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">STRCHR</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> <span class=\"token char\">'1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-----------------\\n%s\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">STRCHR</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> <span class=\"token char\">'1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n--------------------\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">strrchr</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> <span class=\"token char\">'s'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n%s\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">STRRCHR</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> <span class=\"token char\">'s'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token number\">0</span></span></span>\n\t<span class=\"token keyword\">char</span> str1<span class=\"token punctuation\">[</span><span class=\"token number\">15</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>str2<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">MEMSET</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">MEMSET</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">STRCPY</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">,</span> <span class=\"token string\">\"ABCdd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">STRCPY</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">,</span> <span class=\"token string\">\"ABCddee\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str1?str2=.%d.\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">,</span> str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str1?str2=.%d.\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">STRCMP</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">,</span> str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str1?str2=.%d.\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">STRNCMP</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">,</span> str2<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str1?str2=.%d.\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">STRNCMP</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">,</span> str2<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ToUpper</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"=%s=\\n\"</span><span class=\"token punctuation\">,</span>str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d,%d,%d,%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">IsUpper</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">IsDigit</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">IsLower</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">IsASCLL</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d,\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">IsDigit</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"==================\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ToLower</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d,%d,%d,%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">IsUpper</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">IsDigit</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">IsLower</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">IsASCLL</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">IsDigit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1123545998877445566332211\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token number\">0</span></span></span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">strstr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"111222333\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"222\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">STRSTR</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"111222333\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"222\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">strstr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"111222333\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"333\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">STRSTR</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"111222333\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"333\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">strstr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"11122233e3\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"eeee\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">STRSTR</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"11122233e3\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"eeee\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token number\">0</span></span></span>\n<span class=\"token comment\">/*测试XML*/</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">st_girl</span> beautygirl<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">st_girl</span><span class=\"token operator\">*</span>  beauty <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>beautygirl<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>beauty<span class=\"token operator\">-></span>name<span class=\"token punctuation\">,</span> <span class=\"token string\">\"西施\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tbeauty<span class=\"token operator\">-></span>age <span class=\"token operator\">=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">;</span>\n\tbeauty<span class=\"token operator\">-></span>height <span class=\"token operator\">=</span> <span class=\"token number\">168</span><span class=\"token punctuation\">;</span>\n\tbeauty<span class=\"token operator\">-></span>weight <span class=\"token operator\">=</span> <span class=\"token number\">48.5</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>beauty<span class=\"token operator\">-></span>stature<span class=\"token punctuation\">,</span> <span class=\"token string\">\"火辣\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>beauty<span class=\"token operator\">-></span>facevalue<span class=\"token punctuation\">,</span> <span class=\"token string\">\"漂亮\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> str<span class=\"token punctuation\">[</span><span class=\"token number\">255</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span><span class=\"token string\">\"&lt;name>%s&lt;/name>\"</span>\t\t\t\t\t\t\t\\\n\t\t\t\t\t\t \t<span class=\"token string\">\"&lt;age>%d&lt;/age>\"</span>\t\t\t\t\t\t\t\t\\\n\t\t\t\t\t\t \t<span class=\"token string\">\"&lt;height>%d&lt;/height>\"</span>\t\t\t\t\t\\\n\t\t\t\t\t\t\t<span class=\"token string\">\"&lt;weight>%lf&lt;/weight>\"</span>\t\t\t\t\\\n\t\t\t\t\t\t\t<span class=\"token string\">\"&lt;stature>%s&lt;/stature>\"</span>\t\t\t\t\\\n\t\t\t\t\t\t\t<span class=\"token string\">\"&lt;facevalue>%s&lt;/facevalue>\"</span>\t<span class=\"token punctuation\">,</span>\t\n\t\t\t\t\t\t\t<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>beauty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> \n\t\t\t\t\t\t\t<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>beauty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">,</span> \n\t\t\t\t\t\t\t<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>beauty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">,</span> \n\t\t\t\t\t\t\t<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>beauty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>weight<span class=\"token punctuation\">,</span> \n\t\t\t\t\t\t\t<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>beauty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>stature<span class=\"token punctuation\">,</span> \n\t\t\t\t\t\t\t<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>beauty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>facevalue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> str1<span class=\"token punctuation\">[</span><span class=\"token number\">50</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">MEMSET</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">GetXMLBuffer_Str</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> str1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"=%s=\\n\"</span><span class=\"token punctuation\">,</span> str1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">MEMSET</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">GetXMLBuffer_Str</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token string\">\"stature\"</span><span class=\"token punctuation\">,</span> str1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"=%s=\\n\"</span><span class=\"token punctuation\">,</span> str1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">MEMSET</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">GetXMLBuffer_Str</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token string\">\"facevalue\"</span><span class=\"token punctuation\">,</span> str1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"=%s=\\n\"</span><span class=\"token punctuation\">,</span> str1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> age<span class=\"token punctuation\">,</span>height<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">double</span> dd<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">GetXMLBuffer_Int</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">GetXMLBuffer_Int</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token string\">\"height\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\n\t<span class=\"token function\">GetXMLBuffer_Double</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token string\">\"weight\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>dd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"=age=%d,height=%d=,weight=%lf\\n\"</span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">,</span> dd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token number\">0</span>\t</span></span>\n\t<span class=\"token class-name\">time_t</span> t<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> str<span class=\"token punctuation\">[</span><span class=\"token number\">120</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">MEMSET</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tt <span class=\"token operator\">=</span> <span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%ld\\n\"</span><span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\n\t<span class=\"token function\">TIMETOSTR</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"datetime=%s\\n\"</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">STRTOTIME</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"t=%ld\\n\"</span><span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> str1<span class=\"token punctuation\">[</span><span class=\"token number\">30</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">MEMSET</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n\n\t<span class=\"token keyword\">char</span> out_time<span class=\"token punctuation\">[</span><span class=\"token number\">30</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">MEMSET</span><span class=\"token punctuation\">(</span>out_time<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>out_time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">LOCALTIME</span><span class=\"token punctuation\">(</span>out_time<span class=\"token punctuation\">,</span> <span class=\"token string\">\"yyyy-mm-dd hh24:mi:ss\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"out_time=%s\\n\"</span><span class=\"token punctuation\">,</span> out_time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">LOCALTIME</span><span class=\"token punctuation\">(</span>out_time<span class=\"token punctuation\">,</span> <span class=\"token string\">\"yyyymmddhh24miss\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"out_time=%s\\n\"</span><span class=\"token punctuation\">,</span> out_time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">LOCALTIME</span><span class=\"token punctuation\">(</span>out_time<span class=\"token punctuation\">,</span> <span class=\"token string\">\"yyyy-mm-dd\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"out_time=%s\\n\"</span><span class=\"token punctuation\">,</span> out_time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">LOCALTIME</span><span class=\"token punctuation\">(</span>out_time<span class=\"token punctuation\">,</span> <span class=\"token string\">\"yyyymmdd\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"out_time=%s\\n\"</span><span class=\"token punctuation\">,</span> out_time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">LOCALTIME</span><span class=\"token punctuation\">(</span>out_time<span class=\"token punctuation\">,</span> <span class=\"token string\">\"hh24:mi:ss\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"out_time=%s\\n\"</span><span class=\"token punctuation\">,</span> out_time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n"},{"title":"解决Hexo部署GitHub域名解析文件丢失的问题","date":"2023-12-29T02:37:20.000Z","_content":"\n# 问题\n\n使用Hexo部署GitHub，会删除之前的所有文件，再重写写入你的博客网站内容。每次部署都会导致`CNAME`文件丢失，从而无法解析你的自定义域名。\n\n# 解决\n\n1. 在你的博客目录的source目录下,新建一个文件，名为`CNAME`，内容是你的域名地址，例如`13524.cn`,不含`www http`\n![image-20231229104202709](https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/231229/2.jpg)\n![image-20231229104319066](https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/231229/1.jpg)\n\n2. 直接使用`hexo d`,部署就可以看到GitHub仓库已经有了CNAME文件了\n![image-20231229104508940](https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/231229/3.jpg)","source":"_posts/部署域名丢失.md","raw":"---\ntitle: 解决Hexo部署GitHub域名解析文件丢失的问题\ndate: 2023-12-29 10:37:20\ntags: DNS, LOSS\n---\n\n# 问题\n\n使用Hexo部署GitHub，会删除之前的所有文件，再重写写入你的博客网站内容。每次部署都会导致`CNAME`文件丢失，从而无法解析你的自定义域名。\n\n# 解决\n\n1. 在你的博客目录的source目录下,新建一个文件，名为`CNAME`，内容是你的域名地址，例如`13524.cn`,不含`www http`\n![image-20231229104202709](https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/231229/2.jpg)\n![image-20231229104319066](https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/231229/1.jpg)\n\n2. 直接使用`hexo d`,部署就可以看到GitHub仓库已经有了CNAME文件了\n![image-20231229104508940](https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/231229/3.jpg)","slug":"部署域名丢失","published":1,"updated":"2024-01-10T07:22:31.055Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clrh5tsht000qccus029i16cf","content":"<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><p>使用Hexo部署GitHub，会删除之前的所有文件，再重写写入你的博客网站内容。每次部署都会导致<code>CNAME</code>文件丢失，从而无法解析你的自定义域名。</p>\n<h1 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h1><ol>\n<li><p>在你的博客目录的source目录下,新建一个文件，名为<code>CNAME</code>，内容是你的域名地址，例如<code>13524.cn</code>,不含<code>www http</code><br><img src=\"https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/231229/2.jpg\" alt=\"image-20231229104202709\"><br><img src=\"https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/231229/1.jpg\" alt=\"image-20231229104319066\"></p>\n</li>\n<li><p>直接使用<code>hexo d</code>,部署就可以看到GitHub仓库已经有了CNAME文件了<br><img src=\"https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/231229/3.jpg\" alt=\"image-20231229104508940\"></p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><p>使用Hexo部署GitHub，会删除之前的所有文件，再重写写入你的博客网站内容。每次部署都会导致<code>CNAME</code>文件丢失，从而无法解析你的自定义域名。</p>\n<h1 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h1><ol>\n<li><p>在你的博客目录的source目录下,新建一个文件，名为<code>CNAME</code>，内容是你的域名地址，例如<code>13524.cn</code>,不含<code>www http</code><br><img src=\"https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/231229/2.jpg\" alt=\"image-20231229104202709\"><br><img src=\"https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/231229/1.jpg\" alt=\"image-20231229104319066\"></p>\n</li>\n<li><p>直接使用<code>hexo d</code>,部署就可以看到GitHub仓库已经有了CNAME文件了<br><img src=\"https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/231229/3.jpg\" alt=\"image-20231229104508940\"></p>\n</li>\n</ol>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clrh5tshd0004ccus5t8c53mz","category_id":"clrh5tshh0007ccus6ssm0hon","_id":"clrh5tshq000jccusbjed70aw"},{"post_id":"clrh5tshm000dccuscmn5gxys","category_id":"clrh5tshp000hccus2ucaebk3","_id":"clrh5tshu000sccusfkl38ohf"},{"post_id":"clrh5tshp000iccus1wla9hbn","category_id":"clrh5tsht000occush5d37xk7","_id":"clrh5tshv000vccus82vaa4s6"}],"PostTag":[{"post_id":"clrh5tshd0004ccus5t8c53mz","tag_id":"clrh5tshi0008ccuseam4eao6","_id":"clrh5tshn000fccusaqcwgwyg"},{"post_id":"clrh5tshg0006ccus9eccgk1o","tag_id":"clrh5tshm000eccus52ia9ice","_id":"clrh5tshs000mccus89c4czbb"},{"post_id":"clrh5tshj000accushphvehai","tag_id":"clrh5tshq000kccusf9o83ien","_id":"clrh5tshu000rccusflrtfat2"},{"post_id":"clrh5tshl000cccusfv3va3rg","tag_id":"clrh5tsht000pccus7z4fbqww","_id":"clrh5tshv000uccus94v25kb3"},{"post_id":"clrh5tshm000dccuscmn5gxys","tag_id":"clrh5tshu000tccus7yfk8r6p","_id":"clrh5tshv000xccus88xm7px5"},{"post_id":"clrh5tshn000gccusf0ei2pu5","tag_id":"clrh5tshv000wccusc6sz37gc","_id":"clrh5tshw000zccusdf601wyr"},{"post_id":"clrh5tshp000iccus1wla9hbn","tag_id":"clrh5tshv000yccusa0eec51m","_id":"clrh5tshw0011ccus6u4ebd54"},{"post_id":"clrh5tshr000lccus7abc31nr","tag_id":"clrh5tshw0010ccus29g2bizq","_id":"clrh5tshw0013ccus2cm9133k"},{"post_id":"clrh5tshs000nccus6hjk5yts","tag_id":"clrh5tshw0012ccus0qb64hpy","_id":"clrh5tshx0015ccus7ct87onv"},{"post_id":"clrh5tsht000qccus029i16cf","tag_id":"clrh5tshw0014ccusf725a027","_id":"clrh5tshx0016ccuselh9bj6n"}],"Tag":[{"name":"繁体输出, win11","_id":"clrh5tshi0008ccuseam4eao6"},{"name":"C语言, 指针","_id":"clrh5tshm000eccus52ia9ice"},{"name":"冒泡排序","_id":"clrh5tshq000kccusf9o83ien"},{"name":"build the net","_id":"clrh5tsht000pccus7z4fbqww"},{"name":"图床 + cdn + picgo","_id":"clrh5tshu000tccus7yfk8r6p"},{"name":"list, link, C语言","_id":"clrh5tshv000wccusc6sz37gc"},{"name":"网站加速","_id":"clrh5tshv000yccusa0eec51m"},{"name":"socket, c++","_id":"clrh5tshw0010ccus29g2bizq"},{"name":"C语言, 库函数","_id":"clrh5tshw0012ccus0qb64hpy"},{"name":"DNS, LOSS","_id":"clrh5tshw0014ccusf725a027"}]}}