<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Chauity の 筆 卷</title>
  
  <subtitle>欢迎访问我的小屋 ~</subtitle>
  <link href="https://chauity.github.io/atom.xml" rel="self"/>
  
  <link href="https://chauity.github.io/"/>
  <updated>2022-11-07T07:20:51.655Z</updated>
  <id>https://chauity.github.io/</id>
  
  <author>
    <name>ZhiQiang ZHANG</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>VScode+PicGo +GitHub图床----辅助书写markdown文档</title>
    <link href="https://chauity.github.io/2022/11/07/VScode+PicGo%20+GitHub%E5%9B%BE%E5%BA%8A----%E8%BE%85%E5%8A%A9%E4%B9%A6%E5%86%99markdown%E6%96%87%E6%A1%A3/"/>
    <id>https://chauity.github.io/2022/11/07/VScode+PicGo%20+GitHub%E5%9B%BE%E5%BA%8A----%E8%BE%85%E5%8A%A9%E4%B9%A6%E5%86%99markdown%E6%96%87%E6%A1%A3/</id>
    <published>2022-11-07T08:17:22.133Z</published>
    <updated>2022-11-07T07:20:51.655Z</updated>
    
    <content type="html"><![CDATA[<h1 id="VScode-GitHub-PicGo-Statically"><a href="#VScode-GitHub-PicGo-Statically" class="headerlink" title="VScode + GitHub + PicGo + Statically"></a>VScode + GitHub + PicGo + Statically</h1><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>本文将介绍，如何使用VScode安装picGo插件。将图片上传至GitHub的图床中，将使用到Staticlly的CDN加速，方便国内查看。</p><p>建议：<br>免费图床虽好，切勿滥用，如果有条件的话，可以选择国内的OSS和COS等云服务器搭建。GitHub国内加速CDN已经封了jsdelivr了，请谨慎使用statically。建议一个库不超过1G，，一张图片不要超过15M。超过了，就建立其他的库。否则可能会有封号的风险。</p><h2 id="第一步：安装VScode、配置PicGo"><a href="#第一步：安装VScode、配置PicGo" class="headerlink" title="第一步：安装VScode、配置PicGo"></a>第一步：安装VScode、配置PicGo</h2><p>国内可以选择腾讯软件中心下载：<a href="https://pc.qq.com/detail/16/detail_22856.html">https://pc.qq.com/detail/16/detail_22856.html</a></p><p>官网是：<a href="https://code.visualstudio.com/Download">https://code.visualstudio.com/Download</a></p><p>下载插件PicGo、Chinese、GitHub Theme、markdownlint、Office Viewer<br><img src="https://cdn.staticaly.com/gh/chauity/images@master/blog/pictrues20221107110904.png" alt="20221107110904"></p><p>上面是我使用VScode的一些插件，VScode还是挺好用的。如果只是写一些md文档，不使用远程图床工具本地使用的话，可以选择其他工具。我之前使用的是typedown，这个工具有一个很大的缺陷就是不能直接粘贴图片，付费的话也可以选择typero。</p><p>配置PicGo远程图床<br><img src="https://cdn.staticaly.com/gh/chauity/images@master/blog/pictrues20221107111319.png" alt="20221107111319"></p><p><img src="https://cdn.staticaly.com/gh/chauity/images@master/blog/pictures/20221107145751.png" alt="20221107145751"></p><h2 id="第二步：GitHub的设置"><a href="#第二步：GitHub的设置" class="headerlink" title="第二步：GitHub的设置"></a>第二步：GitHub的设置</h2><h3 id="1）配置密钥"><a href="#1）配置密钥" class="headerlink" title="1）配置密钥"></a>1）配置密钥</h3><p>在GitHub里面的注册账号，并点击头像下面设置<br>如果无法进入GitHub，就下载一个Steam++或者UU加速器学术资源加速。<br><img src="https://cdn.staticaly.com/gh/chauity/images@master/blog/pictures/20221107134300.jpg" alt="20221107134300"></p><p>下滑到最下面找到 <code>Developer settings</code>,点击进入<br><img src="https://cdn.staticaly.com/gh/chauity/images@master/blog/pictures/20221107134455.jpg" alt="20221107134455"></p><p>点击 <code>Personal access tokens</code>下面的 <code>Tokens(classic)</code><br><img src="https://cdn.staticaly.com/gh/chauity/images@master/blog/pictures/20221107134529.jpg" alt="20221107134529"></p><p>点击 <code>Generate new token</code>，创建密钥<br><img src="https://cdn.staticaly.com/gh/chauity/images@master/blog/pictures/20221107134802.jpg" alt="20221107134802"></p><p><img src="https://cdn.staticaly.com/gh/chauity/images@master/blog/pictures/20221107134953.jpg" alt="20221107134953"></p><p>这里的密钥就是上面配置PicGo需要的密钥。</p><h3 id="2）创建仓库"><a href="#2）创建仓库" class="headerlink" title="2）创建仓库"></a>2）创建仓库</h3><p>回到GitHub首页，点击 <code>New</code>按钮<br><img src="https://cdn.staticaly.com/gh/chauity/images@master/blog/pictures/20221107135217.jpg" alt="20221107135217"></p><p><img src="https://cdn.staticaly.com/gh/chauity/images@master/blog/pictures/20221107140047.jpg" alt="20221107140047"></p><p>配置完成后点击，Create repository，就创建好了仓库了。</p><h2 id="完成，使用"><a href="#完成，使用" class="headerlink" title="完成，使用"></a>完成，使用</h2><p>这里就配置好了，大家使用markdown文档时，打开VScode时。</p><p>直接使用 <code>Ctrl + Alt + U</code>键就能粘贴且上传到GitHub里面。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;VScode-GitHub-PicGo-Statically&quot;&gt;&lt;a href=&quot;#VScode-GitHub-PicGo-Statically&quot; class=&quot;headerlink&quot; title=&quot;VScode + GitHub + PicGo + Static</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>建站历程</title>
    <link href="https://chauity.github.io/2022/11/04/%E5%BB%BA%E7%AB%99%E5%8E%86%E7%A8%8B/"/>
    <id>https://chauity.github.io/2022/11/04/%E5%BB%BA%E7%AB%99%E5%8E%86%E7%A8%8B/</id>
    <published>2022-11-04T02:38:53.000Z</published>
    <updated>2022-11-07T07:22:46.717Z</updated>
    
    <content type="html"><![CDATA[<h2 id="缘由"><a href="#缘由" class="headerlink" title="缘由"></a>缘由</h2><p>博主是一个新入行的编程小白，目前从事的是C++游戏开发学徒。我在大学期间也走了很多的弯路，自己学习过的东西，希望从今天开始学到的东西记录到本网站上。希望搭建博客来展示自己，奈何自己技术不行，在网上也学过一些 Java语言的SpringBoot框架 +Vue 的前后端开发的博客的教程。</p><p>说一下，为什么不选择前后端，其一是我的技术不过关，写出来的东西不仅花时间，可能自己都不想看。其二Hexo和GitHub搭建静态网站已经很成熟了，而且不使用后端数据库，笔记全在自己的电脑上，不用去花钱买远程服务器。为什么使用GitHub，当然是我舍不得花钱啊，能白嫖坚决不会花钱，哈哈哈哈。</p><p>在搭建之前，笔者希望读者已经学会了MarkDown文档编写自己的笔记。</p><h2 id="搭建工具"><a href="#搭建工具" class="headerlink" title="搭建工具"></a>搭建工具</h2><p>我相信在你有搭建自己博客网站的想法之后，肯定已经学过这两个工具了。我就简单说一下吧，Git就是提交代码的工具，目前世界上最大的Git仓库就是GitHub，国内的码云（Gitee）也日渐成熟。我们学习写的代码就可以提交到GitHub上，方便存储，在GitHub上也有数不清的大佬教学Code。</p><ul><li><a href="https://git-scm.com/downloads">Git</a></li></ul><p>Node则是前端开发，必须使用的工具。我也不太懂前端，反正现在前端的Vue框架实现了前后端的分离，前端人员只用编写页面，数据也可以使用Json自己造假数据。加速前后端开发效率。</p><ul><li><a href="https://nodejs.org/zh-cn/">Node.js</a></li></ul><p>反正大家不用管下载下来就完事了。我来教你们怎么用。</p><h2 id="本地搭建过程"><a href="#本地搭建过程" class="headerlink" title="本地搭建过程"></a>本地搭建过程</h2><h3 id="1）node换源"><a href="#1）node换源" class="headerlink" title="1）node换源"></a>1）node换源</h3><p>下载安装完成之后，打开任务命令行 <code>win + R</code></p><p>输入<code>node -v 和 git -v</code> 查看自己的安装状态</p><p><img src="https://cdn.staticaly.com/gh/chauity/images@master/20221104111425.jpg"></p><p>看安装状态，没什么问题就可以进行node的换源了。有问题的话大概就可能是环境变量安装时候没选，系统找不到他们。读者自行解决（百度~~）。</p><ul><li><p>1）执行换源命令：<code>npm config set registry https://registry.npm.taobao.org</code></p></li><li><p>2）执行查看源命令：<code>npm config get registry</code></p></li></ul><p><img src="https://cdn.staticaly.com/gh/chauity/images@master/20221104112415.jpg"></p><h3 id="2）安装Hexo"><a href="#2）安装Hexo" class="headerlink" title="2）安装Hexo"></a>2）安装Hexo</h3><p>自己找一个空白文件夹，进入<code>Command</code>终端命令窗口。</p><p><img src="https://cdn.staticaly.com/gh/chauity/images@master/20221104113323.jpg"></p><ul><li><p>1）执行node安装hexo：<code>npm install hexo-cli g</code></p></li><li><p>2）初始化脚手架：<code>hexo init blog2</code>（名字随意起，我这里是blog2）</p></li></ul><p><img src="https://cdn.staticaly.com/gh/chauity/images@master/20221104114010.jpg"></p><h3 id="3）访问本地网站"><a href="#3）访问本地网站" class="headerlink" title="3）访问本地网站"></a>3）访问本地网站</h3><ul><li><p>执行命令：<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</code></p><p><mark>注意看路径：blog2目录下面执行</mark></p><p>解释一下：这是三条命令的集合，大概意思就是重新部署一下，并运行起来</p><ul><li><p><code>hexo clean</code>  ：clean的意思</p></li><li><p><code>hexo g</code> ： g是generate的缩写</p></li><li><p><code>hexo s</code> :    s是server的缩写</p></li></ul><p><img src="https://cdn.staticaly.com/gh/chauity/images@master/20221104115235.jpg"></p></li><li><p>访问<code>localhost:4000</code>,可以看到一个<strong>很丑</strong>的网站，就长下面这样，这种做Blog，大多数人肯定都接受不了</p></li></ul><p><img src="https://cdn.staticaly.com/gh/chauity/images@master/20221104115349.jpg"></p><h3 id="4）美化"><a href="#4）美化" class="headerlink" title="4）美化"></a>4）美化</h3><p>这里使用的是名为<code>landscape</code>的主题，这里我使用的是butterfly的主题</p><p><a href="https://hexo.io/themes/">Hexo 主题仓库</a></p><p>butterfly主题GitHub仓库地址：(<a href="https://github.com/jerryc127/hexo-theme-butterfly">🦋 A Hexo Theme: Butterfly</a>)</p><p>如果不能访问GitHub，可以下载一个加速器，我用的是<code>Steam++</code>，现在改名叫<code>Watt Toolkit</code>了。</p><p>下载的时候选择<a href="https://gitee.com/rmbgame/SteamTools/releases/tag/2.8.4">码云下载</a>就好了</p><p><a href="https://steampp.net/">Steam++下载地址</a></p><ul><li>主题安装步骤<ul><li><p>1）使用git 下载到本地，下载路径是blog2的themes文件内，git克隆时一定要关闭加速器。</p><p><code>git clone https://github.com/jerryc127/hexo-theme-butterfly.git</code></p><p><img src="https://cdn.staticaly.com/gh/chauity/images@master/20221104134631.jpg"></p></li><li><p>2）下载完成之后，修改配置文件的主题配置，配置文件是blog2目录下</p><p>   <img src="https://cdn.staticaly.com/gh/chauity/images@master/20221104134834.jpg"></p><p>修改内容如下：编辑器(建议大家不使用记事本)打开，第一百行的<code>theme: landscape</code>，将修改为<code>hexo-theme-butterfly</code>，当然你git下来可以重命名，用你新的名字也行的，修改后保存。</p><p>注意yml配置文件有层级关系的<mark>: 和后面的内容之间也必须有一个空格</mark></p><p><img src="https://cdn.staticaly.com/gh/chauity/images@master/20221104135634.jpg"></p></li><li><p>3） 执行以下命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive</span><br></pre></td></tr></table></figure></li><li><p>4）重启Hexo项目 <code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</code>，访问<code>localhost:4000</code></p></li></ul></li></ul><p>    <img src="https://cdn.staticaly.com/gh/chauity/images@master/20221104140901.jpg"></p><p><img src="https://cdn.staticaly.com/gh/chauity/images@master/20221104140956.jpg"></p><p>其他的美化、魔改就在butterfly主题包的<code>_config.yml</code>文件修改内容下，这篇Blog不再赘述。</p><h2 id="部署到GitHub服务器上"><a href="#部署到GitHub服务器上" class="headerlink" title="部署到GitHub服务器上"></a>部署到GitHub服务器上</h2><p>这一部分以我已经搭好的blog为例子</p><h3 id="1）注册账号"><a href="#1）注册账号" class="headerlink" title="1）注册账号"></a>1）注册账号</h3><p>首先注册GitHub账号，进不去的下载<code>steam++</code>加速器加速。使用QQ邮箱注册就行了。</p><h3 id="2）创建新的仓库"><a href="#2）创建新的仓库" class="headerlink" title="2）创建新的仓库"></a>2）创建新的仓库</h3><p><img src="https://cdn.staticaly.com/gh/chauity/images@master/20221104143154.jpg"></p><p><img src="https://cdn.staticaly.com/gh/chauity/images@master/20221104142921.jpg"></p><h3 id="3）设置本地电脑公钥"><a href="#3）设置本地电脑公钥" class="headerlink" title="3）设置本地电脑公钥"></a>3）设置本地电脑公钥</h3><ul><li><p>1）检测下自己之前有没有配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config –global user.name `xxxxx` </span><br><span class="line">git config –global user.email `xxx@xx.xxx`</span><br></pre></td></tr></table></figure></li><li><p>2）生成秘钥</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/chauity/images@master/20221104144343.jpg"></p></li><li><p>3）生成之后，会在你的用户目录生成.ssh目录，该目录里面的公钥文件内容拷贝到GitHub上</p></li></ul><p><img src="https://cdn.staticaly.com/gh/chauity/images@master/20221104144702.jpg"></p><p><img src="https://cdn.staticaly.com/gh/chauity/images@master/20221104144945.jpg"></p><p><img src="https://cdn.staticaly.com/gh/chauity/images@master/20221104145053.jpg"></p><p><img src="https://cdn.staticaly.com/gh/chauity/images@master/20221104145142.jpg"></p><p>之后就在新建一个公钥联系上你的本地电脑就好了。</p><h3 id="4）部署发布到GitHub上"><a href="#4）部署发布到GitHub上" class="headerlink" title="4）部署发布到GitHub上"></a>4）部署发布到GitHub上</h3><ul><li><p>1）修改<code>_congfig.yml</code>文件，注意不是主题的<code>_congfig.yml</code>文件，而是你根目录的该文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="comment"># 你的github仓库地址 -&gt; git@xxx/chauity.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="comment"># 分支名 -&gt;master</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/chauity/images@master/20221104145902.jpg"></p></li><li><p>2）部署上传</p><p><mark>上传一定要关闭加速器！！！</mark></p><ul><li><p>1）安装部署插件：</p></li><li><p>1）执行部署安装上传</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><p>d是deploy的缩写</p></li><li><p>致此，就大功告成了哈哈哈。</p><p>完结撒花~~~~。</p></li></ul></li></ul><h2 id="这是我的效果图-，你们的呢"><a href="#这是我的效果图-，你们的呢" class="headerlink" title="这是我的效果图~，你们的呢"></a>这是我的效果图~，你们的呢</h2><p><img src="https://cdn.staticaly.com/gh/chauity/images@master/20221104150448.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;缘由&quot;&gt;&lt;a href=&quot;#缘由&quot; class=&quot;headerlink&quot; title=&quot;缘由&quot;&gt;&lt;/a&gt;缘由&lt;/h2&gt;&lt;p&gt;博主是一个新入行的编程小白，目前从事的是C++游戏开发学徒。我在大学期间也走了很多的弯路，自己学习过的东西，希望从今天开始学到的东西记录到本</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>指针详解1</title>
    <link href="https://chauity.github.io/2022/11/03/%E6%8C%87%E9%92%88%E8%AF%A6%E8%A7%A31/"/>
    <id>https://chauity.github.io/2022/11/03/%E6%8C%87%E9%92%88%E8%AF%A6%E8%A7%A31/</id>
    <published>2022-11-03T04:24:18.000Z</published>
    <updated>2022-11-04T12:30:49.857Z</updated>
    
    <content type="html"><![CDATA[<h2 id="指针的基本概念"><a href="#指针的基本概念" class="headerlink" title="指针的基本概念"></a>指针的基本概念</h2><h3 id="1）变量的地址"><a href="#1）变量的地址" class="headerlink" title="1）变量的地址"></a>1）变量的地址</h3><p>变量是内存变量的简称，在C++中，系统会给变量分配一块内存，内存是有地址的。</p><table><thead><tr><th align="center">0x00000001</th></tr></thead><tbody><tr><td align="center">0x00000002</td></tr><tr><td align="center">0x00000003</td></tr><tr><td align="center">0x00000004</td></tr><tr><td align="center">0x00000005</td></tr><tr><td align="center">0x00000006</td></tr><tr><td align="center">0x00000007</td></tr><tr><td align="center">0x00000008</td></tr><tr><td align="center">0x00000009</td></tr><tr><td align="center">0x00000010</td></tr><tr><td align="center">0x0000000A</td></tr><tr><td align="center">0x0000000B</td></tr><tr><td align="center">……</td></tr><tr><td align="center">0xFFFFFFFF</td></tr></tbody></table><p>C++用运算符&amp;获取变量在内存中的起始地址。</p><p>语法：<code>&amp;变量名</code></p><h3 id="2-指针变量"><a href="#2-指针变量" class="headerlink" title="2)指针变量"></a>2)指针变量</h3><p>指针变量简称指针，他是一种特殊的变量，专用于存放变量在内存中的<strong>起始地址</strong>。</p><p>语法：<code>数据类型 *变量名;</code></p><p>数据类型必须是合法的C++数据类型（int、char、double或其他自定义数据类型）。</p><p>星号*与乘法中的星号是相同的，但是，在这个场景中，星号用于表示这个变量是指针。</p><h3 id="3）对指针赋值"><a href="#3）对指针赋值" class="headerlink" title="3）对指针赋值"></a>3）对指针赋值</h3><p>不管是整型、浮点型、字符型，还是其他数据类型的变量，它的地址都是一个十六进制数。我们用整型指针存放整型变量的地址，用字符型指针存放字符型变量的地址，用浮点型指针存放浮点型变量的地址，用自定义数据类型指针存放自定义数据类型变量的地址。</p><p>语法：<code>指针=&amp;变量名;</code></p><h3 id="4-指针占用的内存"><a href="#4-指针占用的内存" class="headerlink" title="4)指针占用的内存"></a>4)指针占用的内存</h3><p>指针也是变量，是变量就要占用内存空间。</p><p>在64位操作系统中，不管什么类型的指针，占用内存都是8字节。</p><p>在C++中，指针是复合数据类型，复合数据类型是指基于其他类型而定义的数据类型，在程序中，int是整型变量，int *是整型指针类型，int *可以用于sizeof运算符，可以用于数据类型的强制转换，总的来说，把int *当成一种数据类型就对了。</p><h2 id="使用指针"><a href="#使用指针" class="headerlink" title="使用指针"></a>使用指针</h2><p>声明变量后，在没有赋值之前，里面是乱七八糟的值，这时候不能使用指针。</p><p>指针存放变量的地址，因此，指针名表示的是地址（就像变量名可以表示变量的值一样）。</p><p><em>运算符被称为<strong>间接值</strong>或<strong>解除引用（解引用）</strong>，将它用于指针，可以的得到该地址的内存中存储的值，</em>也是乘法符号，C++根据上下文来确定所指的是乘法还是解引用。</p><p>变量和指向变量的指针就像同一枚硬币的两面。</p><p><code>int no = 38;</code></p><p><code>int *ptr = &amp;no;</code></p><p><img src="https://cdn.jsdelivr.net/gh/ZZQPHPGIT/images/20221025104337.png"></p><p>程序在存储数据的时候，必须跟踪三种基本属性：</p><ul><li>程序存储在哪里；</li><li>数据是什么类型；</li><li>数据的值是多少。</li></ul><p>用两种策略可以达到以上目的；</p><p>声明一个普通变量，声明时指出数据类型和变量名（符号名），系统在内部跟踪该内存单元。</p><p>声明一个指针变量，存储的值是地址，而不是值本身，程序直接访问该内存单元。</p><h2 id="指针用于函数的参数"><a href="#指针用于函数的参数" class="headerlink" title="指针用于函数的参数"></a>指针用于函数的参数</h2><p>如果把函数的形参声明为指针，调用的时候把实参地址传进去，形参中存放的是实参的地址，在函数中</p><p>通过解引用的方法直接操作内存中的数据，可以修改实数的值，这种方法被通俗的称为<strong>地址传递</strong>或<strong>传地址</strong>。</p><p><strong>值传递</strong>：函数的形参是普通变量。</p><p>传地址的意义如下：</p><ul><li>可以在函数中修改实参的值。</li><li>减少内存拷贝，提升性能。</li></ul><h2 id="使用常量"><a href="#使用常量" class="headerlink" title="使用常量"></a>使用常量</h2><p>常量是程序中固定不变的数据。</p><h3 id="1）宏常量"><a href="#1）宏常量" class="headerlink" title="1）宏常量"></a>1）宏常量</h3><p>一般在 main 函数的上面声明，用大写命名。</p><p>语法：<code>#define 常量名 值</code></p><h3 id="2）const修饰的变量"><a href="#2）const修饰的变量" class="headerlink" title="2）const修饰的变量"></a>2）const修饰的变量</h3><p>在程序的任何地方都可以声明。</p><p>语法：<code>const 数据类型 常量名 = 值</code></p><h3 id="3-常量的特点"><a href="#3-常量的特点" class="headerlink" title="3)常量的特点"></a>3)常量的特点</h3><p>程序中不允许改变常量的值，否则编译的时候会报错。</p><h3 id="4）示例"><a href="#4）示例" class="headerlink" title="4）示例"></a>4）示例</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>    <span class="comment">//包含头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MONTHS 12           <span class="comment">//一年中的月份数</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PI     3.14159      <span class="comment">//圆周率</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;        <span class="comment">//指定缺省的命名空间</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//main函数u，程序从这里开始执行，每个程序只能有一个 main 函数。</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">const</span> days = <span class="number">7</span>;        <span class="comment">//一星期的天数</span></span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;一年有&quot;</span> &lt;&lt; MONTHS &lt;&lt; <span class="string">&quot;个月&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h2 id="用const修饰指针"><a href="#用const修饰指针" class="headerlink" title="用const修饰指针"></a>用const修饰指针</h2><h3 id="1）常量指针"><a href="#1）常量指针" class="headerlink" title="1）常量指针"></a>1）常量指针</h3><p>语法：<code>const 数据类型 *变量名;</code></p><p>不能通过解引用的方法修改内存地址中的值（用原始的变量名是可以修改的）。</p><p>注意：</p><ul><li>指向的变量（对象）可以改变（之前是指向变量a的，后来可以改为指向变量b）。</li><li>一般用于修饰函数的形参，表示不希望在函数里修改内存地址中的值。</li><li>如果用于形参、虽然指向的对象可以改变，但那么做没有任何意义。</li><li>如果形参的值不需要改变，建议加上const修饰，程序可读性更好。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">3</span>, b = <span class="number">8</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span>* p = &amp;a;</span><br><span class="line"><span class="comment">//不能通过解引用赋值修改值，编译会报错 错误  C3892</span></span><br><span class="line"><span class="comment">//*p = 13;</span></span><br><span class="line"><span class="comment">//只能通过变量修改值</span></span><br><span class="line">a = <span class="number">13</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;a=&quot;</span> &lt;&lt; a &lt;&lt; <span class="string">&quot;,*p=&quot;</span> &lt;&lt; *p &lt;&lt; endl;</span><br><span class="line">p = &amp;b;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;b=&quot;</span> &lt;&lt; b &lt;&lt; <span class="string">&quot;,*p=&quot;</span> &lt;&lt; *p &lt;&lt; endl;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">const</span> <span class="type">int</span>* no,<span class="type">const</span> string *str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//参数加上const，解引用赋值,编译时 同样会报错</span></span><br><span class="line">    <span class="comment">//*no = 8;</span></span><br><span class="line">    <span class="comment">//*str = &quot;我有一只小小鸟.&quot;;</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;亲爱的&quot;</span> &lt;&lt; *no &lt;&lt; <span class="string">&quot;号&quot;</span> &lt;&lt; *str &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-指针常量"><a href="#2-指针常量" class="headerlink" title="2)指针常量"></a>2)指针常量</h3><p>语法：<code>数据类型 *const 变量名;</code></p><p>指向的变量（对象）不可改变。</p><p>注意：</p><ul><li>在定义的同时必须初始化，否则没有意义。</li><li>可以通过解引用的方法修改内存地址中的值。</li><li>C++编译器把指针常量做了一些特别的处理，改投换面之后，有了一个新的名字，叫做引用。</li></ul><h3 id="3）常指针常量"><a href="#3）常指针常量" class="headerlink" title="3）常指针常量"></a>3）常指针常量</h3><p>语法：<code>const 数据类型 *const 变量名;</code></p><p>指向的变量（对象）不可改变，不能通过解引用的方法修改内存地址中的值。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//常指针常量</span></span><br><span class="line"><span class="type">int</span> a = <span class="number">3</span>,b = <span class="number">8</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span>* <span class="type">const</span> pa = &amp;a;</span><br><span class="line"><span class="comment">//既不能改变指针指向，也不能解引用改变值，下列两种写法都是错误的</span></span><br><span class="line"><span class="comment">//*pa = 13;</span></span><br><span class="line"><span class="comment">//pa = &amp;b;</span></span><br></pre></td></tr></table></figure><p>常量指针：指针指向可以改，指针指向的值不可以改。</p><p>指针常量：指针指向不可以改，指针的指向的值可以更改。</p><p>常指针常量：指针指向不可以改，指针指向的值不可以更改。</p><h2 id="void-关键字"><a href="#void-关键字" class="headerlink" title="void 关键字"></a>void 关键字</h2><p>在C++中，void表示为<strong>无类型</strong>，主要有三个用途：</p><ul><li><p>函数的返回值使用 <code>void</code> ，表示函数没有返回值。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span> <span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     <span class="comment">//函数体代码</span></span><br><span class="line">     <span class="keyword">return</span>;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>函数的参数填 <code>void</code> ，表示函数不需要参数（或者让参数列表空着）。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">func</span><span class="params">( <span class="type">void</span> )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//函数体代码</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>函数的形参用 <code>void *</code>，表示接受任意数据类型的指针。</p><p>注意：</p><ul><li>不能用 <code>void</code>声明变量，它不能代表一个真实的变量。</li><li>不能对 <code>void *</code>指针直接解引用（需要转化为其他类型的指针）。</li><li>把其他类型的指针赋值给 <code>void *</code>指针不需要转换。</li><li>把 <code>void *</code>指针赋值给其他类型的指针需要转换。</li></ul></li></ul><h2 id="动态分配内存new和delete"><a href="#动态分配内存new和delete" class="headerlink" title="动态分配内存new和delete"></a>动态分配内存new和delete</h2><p>C++内存空间</p><p><img src="https://cdn.jsdelivr.net/gh/ZZQPHPGIT/images/20221025192803.png"></p><p>使用堆区内存有四个步骤：</p><p>1）声明一个指针；</p><p>2）用new运算符向系统申请一块内存，让指针指向这块内存；</p><p>3）通过对指针的解引用的方法，像使用变量一样使用这块内存；</p><p>4）如果这块内存不用了，用delete运算符释放它；</p><p>申请内存的语法：<code>new 数据类型(初始值);</code> //C++11支持 {}</p><p>如果申请成功，返回一个地址；如果申请失败，返回一个空地址（暂时不考虑失败的情况）</p><p>是否内存的语法：<code>delete 地址;</code></p><p>注意：</p><ul><li>动态分配出来的内存没有变量名，只能通过指向它的指针来操作内存中的数据。</li><li>如果动态分配的内存用不了，必须使用 <code>delete</code>释放它，否则可能用尽系统的内存。</li><li>动态分配的内存的生命周期与程序相同，程序退出时，如果没有是否，系统将自动回收。</li><li>就算指针的作用域已失效，所指向的内存也不会释放。</li><li>用指针跟踪已分配的内存时，不能跟丢。</li></ul><h2 id="二级指针"><a href="#二级指针" class="headerlink" title="二级指针"></a>二级指针</h2><p><strong>指针</strong>是<strong>指针变量</strong>的简称，也是<strong>变量</strong>。是<strong>变量</strong>就有<strong>地址</strong>。</p><p><strong>指针</strong>用于存放<strong>普通变量</strong>的<strong>地址</strong>。</p><p><strong>二级指针</strong>用于存放<strong>指针变量</strong>的<strong>地址</strong>。</p><p>声明<strong>二级指针</strong>的语法：<code>数据类型** 指针名;</code></p><p>使用指针有两个目的：1）传递地址；2）存放动态分配的内存的地址。</p><p>在函数中，如果传递普通变量的地址，形参用指针；<strong>传递指针的地址，形参用二级指针</strong>。</p><h2 id="空指针"><a href="#空指针" class="headerlink" title="空指针"></a>空指针</h2><p>在C++和C中，用0或NULL都可以表示空指针。</p><p>声明指针后，在赋值之前，让它指向空，表示没有任何地址。</p><h3 id="1）使用空指针的后果"><a href="#1）使用空指针的后果" class="headerlink" title="1）使用空指针的后果"></a>1）使用空指针的后果</h3><p><strong>如果对空指针解引用，程序会崩溃。</strong></p><p><strong>如果对空指针使用delete运算符，系统忽略该操作，不会出现异常。所以内存释放后，也应该把指针指向空。</strong></p><p>为什么空指针访问会出现异常？</p><p>NULL指针分配的分区：其范围是从 <code>0x00000000</code>到 <code>0x0000FFFF</code>。这段代码是空闲的，对于空闲的空间而言，没有相对应的物理存储器，与之相对应，所以对这段代码来说，任何读写操作都会引起异常的。空指针是程序无论在核实都没有物理存储器与之相对应的地址。为了保障“无论何时”这个条件，需要人为划分一个空指针的区域，固有上面NULL指针分区。</p><h3 id="2）C-11的nullptr"><a href="#2）C-11的nullptr" class="headerlink" title="2）C++ 11的nullptr"></a>2）C++ 11的nullptr</h3><p>用0和NULL表示空指针会产生歧义，C++11建议用 <code>nullptr</code>表示空指针，也就是 <code>（void *）0</code>。</p><p>NULL在C++中就是0，这是因为在C++中 <code>void *</code> 类型是不允许隐式转换成其他类型的，所以之前C++中用0来代表空指针，但是在重载整型的情况下，会出现上述的问题。所以C++11加入了nullptr，可以保证在任何情况下都代表空指针，而不会出现上述的情况，因此，建议用nullptr替代NULL，而NULL就当做0使用。</p><p><strong>注意：在Linux平台下，如果使用nullptr，编译要加 <code>-std=c++11</code>参数</strong></p><h2 id="野指针"><a href="#野指针" class="headerlink" title="野指针"></a>野指针</h2><p>野指针就是指针指向的不是一个有效（合法）的地址。</p><p>在程序中，如果访问野指针，<strong>可能</strong>会造成程序的崩溃。</p><p>出现野指针的情况主要有三种：</p><ul><li>1）指针在定义的时候，如果没有初始化，它的值是不确定的（乱指一气）。</li><li>2）如果指针指向了动态分配的内存，内存被释放后，指针不会置空，但是，指向的指针已失效。</li><li>3）指针指向的变量超越变量的作用域（变量的内存空间已被回收），作用域指的是是局部变量还是全局变量。</li></ul><p>规避方法：</p><ul><li><p>1）指针在定义的时候，如果没地方指，就初始化为nullptr。</p></li><li><p>2）动态分配的内存释放后，将其置位nullptr。</p></li><li><p>3）函数不要返回局部变量的地址。</p><p>注意：野指针的危害比空指针要大很多，如果访问野指针，<strong>可能</strong>会造成程序的崩溃。是可能，表示一定，程序的表现是<strong>不稳定</strong>，增加了调试的难度。</p></li></ul><h2 id="一维数组与指针"><a href="#一维数组与指针" class="headerlink" title="一维数组与指针"></a>一维数组与指针</h2><h3 id="1-指针的算术"><a href="#1-指针的算术" class="headerlink" title="1) 指针的算术"></a>1) 指针的算术</h3><ul><li>将一个整型变量加1后，其值将增加1。</li><li>但是，将指针变量（地址的值）加1后，增加的量等于它指向的数据类型的字节数。</li></ul><h3 id="2-数组的地址"><a href="#2-数组的地址" class="headerlink" title="2) 数组的地址"></a>2) 数组的地址</h3><ul><li>a) 数组在内存中占用的空间是连续的。</li><li>b) C++数组名解释为数组的第0个元素的地址。</li><li>c) 数组第0个元素的地址和数组首地址的取值是相同的。</li><li>d) 数组第n个元素的地址是：<code>数组首地址+n</code></li><li>e) C++编译器把 <code>数组名[下标]</code>解释为 <code>*(数组首地址+下标)</code></li></ul><h3 id="3-数组的本质"><a href="#3-数组的本质" class="headerlink" title="3) 数组的本质"></a>3) 数组的本质</h3><ul><li>数组是占用连续空间的一块内存，数组名被解释为数组第0个元素的地址。C++操作内存有两种方法：数组解释法和指针表示法，他们说等价的。</li></ul><h3 id="4）数组名不一定会被解释为地址"><a href="#4）数组名不一定会被解释为地址" class="headerlink" title="4）数组名不一定会被解释为地址"></a>4）数组名不一定会被解释为地址</h3><ul><li>在多数情况下，C++将数组名解释成第0个元素的地址，但是，将sizeof运算符用于数组名，返回的是整个数组的内存空间的字节数。</li><li>可以修改指针的值，但数组是常量，不可修改。</li></ul><h2 id="一维数组用于函数的参数"><a href="#一维数组用于函数的参数" class="headerlink" title="一维数组用于函数的参数"></a>一维数组用于函数的参数</h2><h3 id="1）指针的数组表示"><a href="#1）指针的数组表示" class="headerlink" title="1）指针的数组表示"></a>1）指针的数组表示</h3><ul><li>在C++内部，用指针来处理数组。</li><li>C++编译器把 <code>数组名[下标]</code>解释为 <code>*(数组首地址+下标)</code></li><li>C++编译器把 <code>地址[下标]</code>解释为 <code>*(地址+下标)</code></li></ul><h3 id="2）一维数组用于函数的参数"><a href="#2）一维数组用于函数的参数" class="headerlink" title="2）一维数组用于函数的参数"></a>2）一维数组用于函数的参数</h3><ul><li><p>一维数组用于函数的参数时，只能传数组的地址，并且必须把数组长度也传进去，除非数组中有最后一个元素的标志。</p></li><li><p>书写的方法有两种：</p><p><code>void func(int* arr,int len)</code></p></li></ul><p>        <code>void func(int* arr[],int len)</code></p><ul><li><p>注意：</p><p>在函数中，可以用数组表示法，也可以用指针表示法。</p><p>在函数中，不要对指针名用sizeof运算符，由于64位操作系统指针大小是永远是8，并不是数组占用内存的大小。</p></li></ul><h2 id="用-new-动态创建一维数组"><a href="#用-new-动态创建一维数组" class="headerlink" title="用 new 动态创建一维数组"></a>用 new 动态创建一维数组</h2><p>普通数组在栈上分配内存，栈很小；如果需要存放更多的元素，必须在堆上分配内存。</p><p>动态创建一维数组的语法：<code>数据类型 *指针=new 数据类型[数组长度]</code>；</p><p>释放一维数组的语法：<code>delete []指针;</code></p><p>注意：</p><ul><li>动态创建的数组没有数组名，不能用 sizeof 运算符。</li><li>可以用数组比色法和指针表示法两种方式使用动态创建的数组。</li><li>必须使用<code>&lt;mark&gt;</code>delete[]<code>&lt;/mark&gt;</code>来释放内存（不能只用 <code>delete</code>）。</li><li>不用用<code>&lt;mark&gt;</code>delete[]<code>&lt;/mark&gt;</code>来释放不是<code>&lt;mark&gt;</code>new[]<code>&lt;/mark&gt;</code>分配的内存。</li><li>不要用<code>&lt;mark&gt;</code>delete[]<code>&lt;/mark&gt;</code>释放同一个内存块两次（否则等同于操作野指针）。</li><li>对空指针用<code>&lt;mark&gt;</code>delete[]<code>&lt;/mark&gt;</code>是安全的（释放内存后，应该把指针置空nullptr）。</li><li>声明普通数组的时候，数组长度可以用变量，相当于在栈上动态创建数组，并且不需要释放。</li><li>如果内存不足，调用<code>&lt;mark&gt;</code>new<code>&lt;/mark&gt;</code>会产生异常，导致程序终止；如果在new关键字后面加（<code>&lt;mark&gt;</code>std::nothrow<code>&lt;/mark&gt;</code>）选项，则返回<code>&lt;mark&gt;</code>nullptr<code>&lt;/mark&gt;</code>，不会产生异常。</li><li>为什么用<code>&lt;mark&gt;</code>delete[]<code>&lt;/mark&gt;</code>释放数组的时候，不需要指定数组的大小？因为系统会自动跟踪分配的内存。</li></ul><h2 id="二维数组用于函数的参数"><a href="#二维数组用于函数的参数" class="headerlink" title="二维数组用于函数的参数"></a>二维数组用于函数的参数</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>* p;      <span class="comment">//整型指针。</span></span><br><span class="line"><span class="type">int</span>* p[<span class="number">3</span>];   <span class="comment">//一维整型指针数组，元素是3个整型指针（p[0]、p[1]、p[2]）。</span></span><br><span class="line"><span class="function"><span class="type">int</span>* <span class="title">p</span><span class="params">()</span></span>;    <span class="comment">//函数p的返回值类型是整型的地址。</span></span><br><span class="line"><span class="built_in">int</span> (*p)(<span class="type">int</span>, <span class="type">int</span>);    <span class="comment">//p是函数指针，指针指向的函数具有两个int型的形参。函数的返回值是整型。</span></span><br></pre></td></tr></table></figure><h3 id="1）行指针（数组指针）"><a href="#1）行指针（数组指针）" class="headerlink" title="1）行指针（数组指针）"></a>1）行指针（数组指针）</h3><p>声明行指针的语法：<code>&lt;mark&gt;</code>数据类型 (*行指针名)[行的大小];   //行的大小即数组长度。<code>&lt;/mark&gt;</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//行指针的举例</span></span><br><span class="line"><span class="built_in">int</span>(*p1)[<span class="number">3</span>]; <span class="comment">//p1是行指针，用于指向数组长度为3的int型数组。</span></span><br><span class="line"><span class="built_in">int</span>(*p2)[<span class="number">5</span>]; <span class="comment">//p2是行指针，用于指向数组长度为5的int型数组。</span></span><br><span class="line"><span class="built_in">double</span>(*p3)[<span class="number">5</span>]; <span class="comment">//p3是行指针，用于指向数组长度为5的double型数组。</span></span><br></pre></td></tr></table></figure><p><img src="image/%E6%8C%87%E9%92%88%E8%AF%A6%E8%A7%A31/1667564963187.png" alt="1667564963187"></p><p>一维数组名被解释为数组的第0个元素地址。</p><p>对一维数组名取地址得到的是数组的地址，是行地址。</p><h3 id="2）二维数组名是行地址"><a href="#2）二维数组名是行地址" class="headerlink" title="2）二维数组名是行地址"></a>2）二维数组名是行地址</h3><p><code>int bh[2][3] = &#123;&#123;11,12,13&#125;,&#123;21,22,23&#125;&#125;;</code></p><p>bh 是二维数组名，该数组有2元素，每一个元素又是一个<code>&lt;mark&gt;</code>数组长度为3的整型数组<code>&lt;/mark&gt;</code>。</p><p>bh被解释为<code>&lt;mark&gt;</code>数组长度为三的整型数组<code>&lt;/mark&gt;</code>类型的地址。</p><p>如果存放bh的值，要用<code>&lt;mark&gt;</code>数组长度为3的整型数组<code>&lt;/mark&gt;</code>类型的指针。</p><p>int (*p)[3] = bh</p><h3 id="3-把二维数组传递给函数"><a href="#3-把二维数组传递给函数" class="headerlink" title="3)把二维数组传递给函数"></a>3)把二维数组传递给函数</h3><p>如果要把bh传给函数，函数的声明如下：</p><p>void func(int (*p)[3],int len);</p><p>void func(int p[][3],int len);</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;指针的基本概念&quot;&gt;&lt;a href=&quot;#指针的基本概念&quot; class=&quot;headerlink&quot; title=&quot;指针的基本概念&quot;&gt;&lt;/a&gt;指针的基本概念&lt;/h2&gt;&lt;h3 id=&quot;1）变量的地址&quot;&gt;&lt;a href=&quot;#1）变量的地址&quot; class=&quot;headerlink</summary>
      
    
    
    
    
    <category term="关于指针的一些事儿" scheme="https://chauity.github.io/tags/%E5%85%B3%E4%BA%8E%E6%8C%87%E9%92%88%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BA%8B%E5%84%BF/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://chauity.github.io/2022/11/03/hello-world/"/>
    <id>https://chauity.github.io/2022/11/03/hello-world/</id>
    <published>2022-11-03T02:33:38.663Z</published>
    <updated>2022-11-07T02:43:08.721Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
